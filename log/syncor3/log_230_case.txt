code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0103
Next Token :  positive, Posbility: 0.0219
Next Token :  find, Posbility: 0.0461
Next Token :  , Posbility: 0.1108
Next Token :  rec, Posbility: 0.7227
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0283
Next Token :  positive, Posbility: 0.0283
Next Token :  rec, Posbility: 0.0598
Next Token :  find, Posbility: 0.2373
Next Token :  , Posbility: 0.3457
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0466
Next Token : r, Posbility: 0.0601
Next Token : rat, Posbility: 0.0874
Next Token : divide, Posbility: 0.0874
Next Token : ratio, Posbility: 0.0986
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0203
Next Token : s, Posbility: 0.0913
Next Token : _, Posbility: 0.1924
Next Token :  =, Posbility: 0.2471
Next Token :  , Posbility: 0.3594
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : arr, Posbility: 0.0579
Next Token : :, Posbility: 0.0952
Next Token : (, Posbility: 0.1572
Next Token : n, Posbility: 0.2012
Next Token : x, Posbility: 0.2012
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0103
Next Token :  i, Posbility: 0.0359
Next Token :  =, Posbility: 0.1416
Next Token :  , Posbility: 0.3008
Next Token : s, Posbility: 0.4375
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0160
Next Token :  a, Posbility: 0.0206
Next Token :  i, Posbility: 0.0264
Next Token :  , Posbility: 0.1953
Next Token :  =, Posbility: 0.6797
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0045
Next Token :  function, Posbility: 0.0058
Next Token :  match, Posbility: 0.0547
Next Token :  , Posbility: 0.0703
Next Token : 
, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0039
Next Token :    , Posbility: 0.0084
Next Token : 	, Posbility: 0.0084
Next Token :     , Posbility: 0.1152
Next Token :   , Posbility: 0.8516
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0061
Next Token : List, Posbility: 0.0100
Next Token : if, Posbility: 0.2012
Next Token : let, Posbility: 0.2012
Next Token : match, Posbility: 0.5469
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0010
Next Token :  !, Posbility: 0.0013
Next Token :  [, Posbility: 0.0015
Next Token :  String, Posbility: 0.0095
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0088
Next Token : (, Posbility: 0.0099
Next Token : Array, Posbility: 0.0186
Next Token : List, Posbility: 0.1367
Next Token : x, Posbility: 0.7891
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  with, Posbility: 0.0015
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0009
Next Token :  |, Posbility: 0.0009
Next Token :  , Posbility: 0.0015
Next Token :  @, Posbility: 0.0015
Next Token :  with, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0020
Next Token :  , Posbility: 0.0038
Next Token :  [, Posbility: 0.0081
Next Token :  [], Posbility: 0.0525
Next Token : 
, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0004
Next Token :       , Posbility: 0.0014
Next Token :    , Posbility: 0.0016
Next Token :     , Posbility: 0.0598
Next Token :   , Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([], Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : [, Posbility: 0.0219
Next Token : [], Posbility: 0.0464
Next Token : |, Posbility: 0.9297
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [],, Posbility: 0.0007
Next Token :  nil, Posbility: 0.0024
Next Token :  , Posbility: 0.0137
Next Token :  [, Posbility: 0.0226
Next Token :  [], Posbility: 0.9570
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0030
Next Token :    , Posbility: 0.0050
Next Token :  |, Posbility: 0.0082
Next Token :  =>, Posbility: 0.0135
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token : -, Posbility: 0.0002
Next Token : â†’, Posbility: 0.0003
Next Token : ::, Posbility: 0.0017
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0649
Next Token :  [], Posbility: 0.0830
Next Token :  1, Posbility: 0.0830
Next Token :  0, Posbility: 0.1367
Next Token :  , Posbility: 0.3730
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0583
Next Token : (), Posbility: 0.0747
Next Token : (0,, Posbility: 0.0850
Next Token : raise, Posbility: 0.1396
Next Token : (, Posbility: 0.1582
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Ratio, Posbility: 0.0479
Next Token : x, Posbility: 0.0542
Next Token : 0, Posbility: 0.0693
Next Token : 1., Posbility: 0.0786
Next Token : 1.0,, Posbility: 0.1147
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0182
Next Token :  1.0,, Posbility: 0.0264
Next Token :  , Posbility: 0.1045
Next Token :  0.0, Posbility: 0.3223
Next Token :  1.0, Posbility: 0.4141
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ),, Posbility: 0.0009
Next Token : /, Posbility: 0.0012
Next Token :  , Posbility: 0.0031
Next Token : );, Posbility: 0.0109
Next Token : ), Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
 score:False
Error type: noerr
---------------------------
Next Token :  --, Posbility: 0.0030
Next Token :   , Posbility: 0.0064
Next Token :  |, Posbility: 0.0072
Next Token :  , Posbility: 0.0197
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  
 score:False
Error type: noerr
---------------------------
Next Token : |[, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0076
Next Token :  i, Posbility: 0.0097
Next Token :  [], Posbility: 0.0233
Next Token :  [, Posbility: 0.2500
Next Token :  , Posbility: 0.6797
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0170
Next Token : head, Posbility: 0.0217
Next Token : (, Posbility: 0.0359
Next Token : _, Posbility: 0.2061
Next Token : x, Posbility: 0.6367
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0044
Next Token : :, Posbility: 0.0172
Next Token : s, Posbility: 0.0364
Next Token : ::, Posbility: 0.3457
Next Token :  , Posbility: 0.5703
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0014
Next Token : :, Posbility: 0.0024
Next Token : if, Posbility: 0.0057
Next Token : ->, Posbility: 0.0369
Next Token : ::, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  new, Posbility: 0.0008
Next Token :  acc, Posbility: 0.0010
Next Token :  [], Posbility: 0.0059
Next Token :  rest, Posbility: 0.1050
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : t, Posbility: 0.0073
Next Token : tail, Posbility: 0.0106
Next Token : y, Posbility: 0.0225
Next Token : _, Posbility: 0.0889
Next Token : x, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 0.0005
Next Token : ', Posbility: 0.0041
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0121
Next Token : 1, Posbility: 0.0226
Next Token : ', Posbility: 0.0422
Next Token :  when, Posbility: 0.0422
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : -, Posbility: 0.0003
Next Token : if, Posbility: 0.0022
Next Token : ::, Posbility: 0.0022
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (1, Posbility: 0.0031
Next Token :  match, Posbility: 0.0085
Next Token :  {, Posbility: 0.0123
Next Token :  , Posbility: 0.2812
Next Token : 
, Posbility: 0.6758
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0041
Next Token :      , Posbility: 0.0097
Next Token :   , Posbility: 0.0110
Next Token :     , Posbility: 0.3652
Next Token :       , Posbility: 0.6016
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0308
Next Token : ratio, Posbility: 0.0308
Next Token : if, Posbility: 0.0349
Next Token : (, Posbility: 0.0947
Next Token : let, Posbility: 0.7930
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0092
Next Token :  num, Posbility: 0.0151
Next Token :  a, Posbility: 0.0194
Next Token :  rec, Posbility: 0.2080
Next Token :  , Posbility: 0.6406
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0776
Next Token : r, Posbility: 0.0879
Next Token : x, Posbility: 0.1133
Next Token : ratio, Posbility: 0.1641
Next Token : (, Posbility: 0.2715
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : num, Posbility: 0.0654
Next Token : n, Posbility: 0.0742
Next Token : x, Posbility: 0.1387
Next Token : a, Posbility: 0.1387
Next Token : r, Posbility: 0.1572
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2,, Posbility: 0.0104
Next Token : _, Posbility: 0.0171
Next Token : 0,, Posbility: 0.0679
Next Token : ,, Posbility: 0.2363
Next Token : 1,, Posbility: 0.6445
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : g, Posbility: 0.0023
Next Token :  a, Posbility: 0.0030
Next Token :  v, Posbility: 0.0030
Next Token : r, Posbility: 0.0287
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : c, Posbility: 0.0376
Next Token : g, Posbility: 0.0376
Next Token : s, Posbility: 0.0376
Next Token : n, Posbility: 0.0376
Next Token : r, Posbility: 0.7578
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0038
Next Token : 2, Posbility: 0.0049
Next Token : 2,, Posbility: 0.0104
Next Token : 0, Posbility: 0.0361
Next Token : 2), Posbility: 0.9336
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  :=, Posbility: 0.0003
Next Token :   , Posbility: 0.0005
Next Token :  , Posbility: 0.0010
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  !, Posbility: 0.0007
Next Token :  rec, Posbility: 0.0021
Next Token : 
, Posbility: 0.0139
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ration, Posbility: 0.0005
Next Token : Ratio, Posbility: 0.0015
Next Token : (, Posbility: 0.0040
Next Token : x, Posbility: 0.0109
Next Token : ratio, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0015
Next Token :  ~, Posbility: 0.0015
Next Token :  [, Posbility: 0.0019
Next Token : (, Posbility: 0.0031
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([, Posbility: 0.0000
Next Token : [0, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0474
Next Token : x, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0017
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0018
Next Token :  , Posbility: 0.0018
Next Token : ;, Posbility: 0.0062
Next Token : 
, Posbility: 0.0591
Next Token :  in, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token : 

, Posbility: 0.0007
Next Token :  , Posbility: 0.0052
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0005
Next Token :     , Posbility: 0.0006
Next Token :         , Posbility: 0.0025
Next Token :      , Posbility: 0.0052
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ratio, Posbility: 0.0088
Next Token : r, Posbility: 0.0186
Next Token : if, Posbility: 0.0444
Next Token : let, Posbility: 0.2910
Next Token : (, Posbility: 0.6133
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  , Posbility: 0.0398
Next Token : 1.0, Posbility: 0.0581
Next Token : (, Posbility: 0.0845
Next Token : x, Posbility: 0.1787
Next Token : r, Posbility: 0.5508
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1/2, Posbility: 0.0045
Next Token : 2,, Posbility: 0.0058
Next Token : 1,, Posbility: 0.0549
Next Token : 2, Posbility: 0.0703
Next Token : 1, Posbility: 0.8594
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : +, Posbility: 0.0183
Next Token : *, Posbility: 0.0496
Next Token :  , Posbility: 0.2227
Next Token :  +, Posbility: 0.2227
Next Token :  *, Posbility: 0.4707
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  double, Posbility: 0.0011
Next Token :  1.0,, Posbility: 0.0013
Next Token :  ((, Posbility: 0.0044
Next Token :  float, Posbility: 0.0288
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0052
Next Token : ratio, Posbility: 0.0233
Next Token : r, Posbility: 0.0559
Next Token : (, Posbility: 0.1182
Next Token : x, Posbility: 0.7695
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0054
Next Token :  , Posbility: 0.0396
Next Token : ), Posbility: 0.0396
Next Token :  +, Posbility: 0.1079
Next Token : ,, Posbility: 0.7969
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x,
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0007
Next Token :  (1, Posbility: 0.0007
Next Token : r, Posbility: 0.0015
Next Token :  1.0, Posbility: 0.0085
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : min, Posbility: 0.0001
Next Token : -, Posbility: 0.0004
Next Token : x, Posbility: 0.0223
Next Token : (, Posbility: 0.0286
Next Token : r, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2);, Posbility: 0.0008
Next Token : 1), Posbility: 0.0013
Next Token : 1, Posbility: 0.0259
Next Token : 2), Posbility: 0.1157
Next Token : 2, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0004
Next Token : *, Posbility: 0.0005
Next Token :  +, Posbility: 0.0064
Next Token :  , Posbility: 0.1465
Next Token :  *, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0018
Next Token :  1.0, Posbility: 0.0049
Next Token :  ((, Posbility: 0.0049
Next Token :  (1, Posbility: 0.0466
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0008
Next Token : ratio, Posbility: 0.0011
Next Token : r, Posbility: 0.0103
Next Token : (, Posbility: 0.2637
Next Token : x, Posbility: 0.7188
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0205
Next Token :  , Posbility: 0.0262
Next Token : s, Posbility: 0.0262
Next Token :  *, Posbility: 0.0432
Next Token : ), Posbility: 0.8711
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0092
Next Token :  in, Posbility: 0.0172
Next Token :  , Posbility: 0.0172
Next Token : 

, Posbility: 0.4434
Next Token : 
, Posbility: 0.5000
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0232
Next Token : 

, Posbility: 0.0381
Next Token :     , Posbility: 0.0408
Next Token : let, Posbility: 0.0977
Next Token :   , Posbility: 0.5625
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0055
Next Token : end, Posbility: 0.0109
Next Token : ;, Posbility: 0.0334
Next Token : in, Posbility: 0.0708
Next Token : |, Posbility: 0.8633
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0120
Next Token :  ?, Posbility: 0.0136
Next Token :  [, Posbility: 0.0288
Next Token :  [], Posbility: 0.0540
Next Token :  , Posbility: 0.8438
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0081
Next Token : n, Posbility: 0.0133
Next Token : (, Posbility: 0.0220
Next Token : x, Posbility: 0.3438
Next Token : _, Posbility: 0.5664
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  | _
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0011
Next Token :  =>, Posbility: 0.0017
Next Token : x, Posbility: 0.0031
Next Token : ::, Posbility: 0.0123
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  | _ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0002
Next Token : x, Posbility: 0.0026
Next Token : if, Posbility: 0.0038
Next Token : ::, Posbility: 0.1631
Next Token : ->, Posbility: 0.8281
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  | _ ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  un, Posbility: 0.0072
Next Token :  error, Posbility: 0.0322
Next Token : 
, Posbility: 0.1865
Next Token :  fail, Posbility: 0.2393
Next Token :  , Posbility: 0.5078
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  | _ -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0136
Next Token : panic, Posbility: 0.0136
Next Token : assert, Posbility: 0.1660
Next Token : raise, Posbility: 0.2412
Next Token : ratio, Posbility: 0.5117
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  | _ -> ratio
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0059
Next Token : _, Posbility: 0.0182
Next Token :  [, Posbility: 0.0300
Next Token :  [], Posbility: 0.0339
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  | _ -> ratio 
 score:False
Error type: noerr
---------------------------
Next Token : tail, Posbility: 0.0032
Next Token : ([], Posbility: 0.0111
Next Token : [0, Posbility: 0.0111
Next Token : x, Posbility: 0.4180
Next Token : (, Posbility: 0.5352
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  | _ -> ratio (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : cons, Posbility: 0.0033
Next Token : tail, Posbility: 0.0103
Next Token : Array, Posbility: 0.0192
Next Token : List, Posbility: 0.0859
Next Token : x, Posbility: 0.8164
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  | _ -> ratio (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0026
Next Token : :, Posbility: 0.0071
Next Token : ::, Posbility: 0.0151
Next Token :  , Posbility: 0.1436
Next Token : s, Posbility: 0.8281
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  | _ -> ratio (xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0087
Next Token :  |, Posbility: 0.0098
Next Token :  @, Posbility: 0.0143
Next Token :  +, Posbility: 0.0162
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  | _ -> ratio (xs 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : @@, Posbility: 0.0024
Next Token : ^, Posbility: 0.0199
Next Token : :, Posbility: 0.1465
Next Token : ::, Posbility: 0.3105
Next Token : -, Posbility: 0.5117
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  | _ -> ratio (xs -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0046
Next Token : >, Posbility: 0.0067
Next Token :  1), Posbility: 0.0815
Next Token :  [, Posbility: 0.4141
Next Token :  , Posbility: 0.4688
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  | _ -> ratio (xs - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0098
Next Token : (, Posbility: 0.0162
Next Token : []), Posbility: 0.0162
Next Token : [1]), Posbility: 0.0388
Next Token : x, Posbility: 0.8867
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  | _ -> ratio (xs - x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0027
Next Token : );, Posbility: 0.0035
Next Token : s, Posbility: 0.0065
Next Token :  , Posbility: 0.0095
Next Token : ), Posbility: 0.9688
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  | _ -> ratio (xs - x)
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0104
Next Token :  +, Posbility: 0.0171
Next Token :  , Posbility: 0.0283
Next Token : 
, Posbility: 0.3438
Next Token : 

, Posbility: 0.5664
---------------------------
code:
 (* Write a function to find the ration of positive numbers in an array of integers. *)
let rec ratio xs =
  match xs with
  | [] -> (1.0, 1.0)
  | x :: xs ->
      let (r1, r2) = ratio xs in
      (r1 * x, r2 * x)
  | _ -> ratio (xs - x)


 score:True
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END and No Syntax Error--------

processing time : :38.52433490753174

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>