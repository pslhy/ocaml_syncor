code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0116
Next Token :  list, Posbility: 0.0131
Next Token :  find, Posbility: 0.0459
Next Token :  , Posbility: 0.2061
Next Token :  rec, Posbility: 0.6328
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0232
Next Token :  loop, Posbility: 0.0262
Next Token :  list, Posbility: 0.0337
Next Token :  find, Posbility: 0.1943
Next Token :  , Posbility: 0.5273
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0106
Next Token : f, Posbility: 0.0154
Next Token : smallest, Posbility: 0.1465
Next Token : min, Posbility: 0.3105
Next Token : length, Posbility: 0.3516
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0466
Next Token :  =, Posbility: 0.0767
Next Token :  , Posbility: 0.0986
Next Token : -, Posbility: 0.1436
Next Token : _, Posbility: 0.5664
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : min, Posbility: 0.0315
Next Token : helper, Posbility: 0.0356
Next Token : rec, Posbility: 0.0403
Next Token : list, Posbility: 0.1094
Next Token : of, Posbility: 0.6289
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0005
Next Token :  list, Posbility: 0.0005
Next Token :  =, Posbility: 0.0066
Next Token :  , Posbility: 0.0109
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : short, Posbility: 0.0417
Next Token : min, Posbility: 0.0535
Next Token : lists, Posbility: 0.1001
Next Token : smallest, Posbility: 0.2402
Next Token : list, Posbility: 0.2715
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0165
Next Token :  l, Posbility: 0.0947
Next Token : _, Posbility: 0.2002
Next Token :  =, Posbility: 0.2578
Next Token :  , Posbility: 0.3301
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ls, Posbility: 0.0630
Next Token : lists, Posbility: 0.0713
Next Token : (, Posbility: 0.1514
Next Token : lst, Posbility: 0.1719
Next Token : x, Posbility: 0.1719
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0051
Next Token :  l, Posbility: 0.0123
Next Token :  , Posbility: 0.0801
Next Token : s, Posbility: 0.4062
Next Token :  =, Posbility: 0.4609
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0041
Next Token :  function, Posbility: 0.0046
Next Token :  , Posbility: 0.1045
Next Token :  match, Posbility: 0.1045
Next Token : 
, Posbility: 0.7695
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0049
Next Token :    , Posbility: 0.0132
Next Token : 	, Posbility: 0.0150
Next Token :     , Posbility: 0.1260
Next Token :   , Posbility: 0.8203
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : case, Posbility: 0.0074
Next Token : List, Posbility: 0.0260
Next Token : let, Posbility: 0.0549
Next Token : if, Posbility: 0.1318
Next Token : match, Posbility: 0.7617
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token : (, Posbility: 0.0004
Next Token :   , Posbility: 0.0006
Next Token :  String, Posbility: 0.0036
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0009
Next Token : Seq, Posbility: 0.0009
Next Token : (, Posbility: 0.0042
Next Token : List, Posbility: 0.0840
Next Token : x, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token :  @, Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 0.0006
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0038
Next Token :  , Posbility: 0.0049
Next Token :  [, Posbility: 0.0063
Next Token :  [], Posbility: 0.0366
Next Token : 
, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0008
Next Token :       , Posbility: 0.0020
Next Token :    , Posbility: 0.0037
Next Token :     , Posbility: 0.0947
Next Token :   , Posbility: 0.8984
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0006
Next Token : Nil, Posbility: 0.0007
Next Token : [, Posbility: 0.0391
Next Token : [], Posbility: 0.0645
Next Token : |, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0036
Next Token :  nil, Posbility: 0.0265
Next Token :  , Posbility: 0.0435
Next Token :  [, Posbility: 0.0435
Next Token :  [], Posbility: 0.8750
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0050
Next Token :    , Posbility: 0.0064
Next Token :  =>, Posbility: 0.0082
Next Token :  |, Posbility: 0.0082
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0002
Next Token : -, Posbility: 0.0003
Next Token : â†’, Posbility: 0.0006
Next Token : ::, Posbility: 0.0012
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0159
Next Token :  [], Posbility: 0.0159
Next Token :  , Posbility: 0.0432
Next Token :  1, Posbility: 0.0432
Next Token :  0, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0012
Next Token :   , Posbility: 0.0026
Next Token :  , Posbility: 0.0072
Next Token :  |, Posbility: 0.0413
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0081
Next Token :  [], Posbility: 0.0104
Next Token :  l, Posbility: 0.0118
Next Token :  [, Posbility: 0.2090
Next Token :  , Posbility: 0.7305
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0193
Next Token : h, Posbility: 0.0762
Next Token : hd, Posbility: 0.1108
Next Token : _, Posbility: 0.1426
Next Token : x, Posbility: 0.5625
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0041
Next Token : s, Posbility: 0.0111
Next Token : :, Posbility: 0.0236
Next Token : ::, Posbility: 0.4727
Next Token :  , Posbility: 0.4727
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : if, Posbility: 0.0004
Next Token : :, Posbility: 0.0025
Next Token : ->, Posbility: 0.0075
Next Token : ::, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0040
Next Token :  l, Posbility: 0.0157
Next Token :  rest, Posbility: 0.0378
Next Token :  [], Posbility: 0.0625
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : t, Posbility: 0.0271
Next Token : tail, Posbility: 0.0271
Next Token : _, Posbility: 0.1377
Next Token : y, Posbility: 0.1377
Next Token : x, Posbility: 0.6172
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0029
Next Token :  , Posbility: 0.0037
Next Token : _, Posbility: 0.0062
Next Token : ', Posbility: 0.0586
Next Token : s, Posbility: 0.9141
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  @, Posbility: 0.0018
Next Token :   , Posbility: 0.0030
Next Token :  =>, Posbility: 0.0039
Next Token :  when, Posbility: 0.0366
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0003
Next Token : if, Posbility: 0.0019
Next Token : ::, Posbility: 0.0229
Next Token : ->, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0016
Next Token :  (1, Posbility: 0.0119
Next Token : 
, Posbility: 0.0879
Next Token :  , Posbility: 0.2393
Next Token :  1, Posbility: 0.6523
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0004
Next Token : 
, Posbility: 0.0017
Next Token :  , Posbility: 0.0028
Next Token : +, Posbility: 0.0085
Next Token :  +, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0005
Next Token :   , Posbility: 0.0007
Next Token : 
, Posbility: 0.0008
Next Token :  max, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0003
Next Token : List, Posbility: 0.0009
Next Token : x, Posbility: 0.0023
Next Token : (, Posbility: 0.0471
Next Token : length, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length
 score:False
Error type: noerr
---------------------------
Next Token :  of, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_
 score:False
Error type: noerr
---------------------------
Next Token : for, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token : list, Posbility: 0.0001
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  list, Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_
 score:False
Error type: noerr
---------------------------
Next Token : first, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token : _, Posbility: 0.0004
Next Token : (, Posbility: 0.0229
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0110
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list x
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0053
Next Token :  in, Posbility: 0.0088
Next Token : ), Posbility: 0.0145
Next Token : 

, Posbility: 0.4785
Next Token : 
, Posbility: 0.4785
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs

 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0226
Next Token : end, Posbility: 0.0309
Next Token :   , Posbility: 0.0952
Next Token : in, Posbility: 0.1299
Next Token : let, Posbility: 0.4531
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0204
Next Token :  find, Posbility: 0.0297
Next Token :  main, Posbility: 0.0625
Next Token :  , Posbility: 0.1934
Next Token :  rec, Posbility: 0.5938
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0275
Next Token :  list, Posbility: 0.0312
Next Token :  rec, Posbility: 0.0312
Next Token :  find, Posbility: 0.0962
Next Token :  , Posbility: 0.6250
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0026
Next Token : longest, Posbility: 0.0063
Next Token : smallest, Posbility: 0.0281
Next Token : min, Posbility: 0.0596
Next Token : length, Posbility: 0.8203
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0005
Next Token :  =, Posbility: 0.0021
Next Token : s, Posbility: 0.0066
Next Token :  , Posbility: 0.0109
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0011
Next Token : lists, Posbility: 0.0015
Next Token : list, Posbility: 0.0045
Next Token : rec, Posbility: 0.0051
Next Token : of, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0002
Next Token :  list, Posbility: 0.0003
Next Token :  =, Posbility: 0.0019
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : set, Posbility: 0.0089
Next Token : all, Posbility: 0.0147
Next Token : sub, Posbility: 0.0354
Next Token : lists, Posbility: 0.1787
Next Token : list, Posbility: 0.5508
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0106
Next Token : 2, Posbility: 0.0474
Next Token :  , Posbility: 0.0537
Next Token : ', Posbility: 0.0889
Next Token : _, Posbility: 0.7422
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0466
Next Token : aux, Posbility: 0.0598
Next Token : list, Posbility: 0.0986
Next Token : of, Posbility: 0.0986
Next Token : rec, Posbility: 0.1118
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0047
Next Token : _, Posbility: 0.0077
Next Token :  =, Posbility: 0.0391
Next Token : urse, Posbility: 0.2246
Next Token :  , Posbility: 0.6914
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : L, Posbility: 0.0021
Next Token : lst, Posbility: 0.0027
Next Token : lists, Posbility: 0.0039
Next Token : (, Posbility: 0.0073
Next Token : x, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0013
Next Token :  l, Posbility: 0.0013
Next Token :  , Posbility: 0.0415
Next Token : s, Posbility: 0.1128
Next Token :  =, Posbility: 0.8320
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0012
Next Token :  1, Posbility: 0.0028
Next Token :  match, Posbility: 0.0111
Next Token :  , Posbility: 0.0933
Next Token : 
, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0005
Next Token : let, Posbility: 0.0010
Next Token :    , Posbility: 0.0017
Next Token :     , Posbility: 0.0067
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0065
Next Token : if, Posbility: 0.0327
Next Token : length, Posbility: 0.0327
Next Token : let, Posbility: 0.0613
Next Token : match, Posbility: 0.8438
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0002
Next Token : (, Posbility: 0.0005
Next Token : List, Posbility: 0.0013
Next Token : length, Posbility: 0.0028
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token :  [], Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0001
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0003
Next Token :  nil, Posbility: 0.0009
Next Token :  [, Posbility: 0.0024
Next Token :  , Posbility: 0.0179
Next Token :  [], Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :   , Posbility: 0.0004
Next Token :  =>, Posbility: 0.0006
Next Token :  |, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0024
Next Token : 
, Posbility: 0.0065
Next Token :  1, Posbility: 0.0065
Next Token :  , Posbility: 0.0176
Next Token :  0, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :  as, Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token :  |, Posbility: 0.0008
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0009
Next Token :  l, Posbility: 0.0014
Next Token :  [], Posbility: 0.0136
Next Token :  [, Posbility: 0.0225
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0030
Next Token : head, Posbility: 0.0056
Next Token : (, Posbility: 0.0063
Next Token : _, Posbility: 0.0286
Next Token : x, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0005
Next Token : :, Posbility: 0.0011
Next Token : s, Posbility: 0.0057
Next Token : ::, Posbility: 0.0227
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0002
Next Token : ->, Posbility: 0.0006
Next Token : :, Posbility: 0.0015
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  l, Posbility: 0.0007
Next Token :  rest, Posbility: 0.0011
Next Token :  [, Posbility: 0.0024
Next Token :  [], Posbility: 0.0157
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0005
Next Token : (, Posbility: 0.0007
Next Token : y, Posbility: 0.0051
Next Token : _, Posbility: 0.0139
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : ', Posbility: 0.0006
Next Token :  , Posbility: 0.0008
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0006
Next Token : 
, Posbility: 0.0006
Next Token :  =>, Posbility: 0.0009
Next Token :  when, Posbility: 0.0075
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0002
Next Token : ::, Posbility: 0.0006
Next Token : if, Posbility: 0.0010
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0021
Next Token :  (1, Posbility: 0.0021
Next Token : 
, Posbility: 0.0415
Next Token :  , Posbility: 0.1128
Next Token :  1, Posbility: 0.8359
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : +, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 0.0006
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0003
Next Token :  match, Posbility: 0.0005
Next Token : 
, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0005
Next Token : List, Posbility: 0.0007
Next Token : x, Posbility: 0.0025
Next Token : (, Posbility: 0.0041
Next Token : length, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_
 score:False
Error type: noerr
---------------------------
Next Token : for, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : from, Posbility: 0.0000
Next Token : rec, Posbility: 0.0001
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_
 score:False
Error type: noerr
---------------------------
Next Token : sub, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0004
Next Token :  , Posbility: 0.0179
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : re, Posbility: 0.0000
Next Token : recursive, Posbility: 0.0001
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : _, Posbility: 0.0004
Next Token : (, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0067
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec x
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0005
Next Token : 
, Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0033
Next Token :  +, Posbility: 0.0054
Next Token :  , Posbility: 0.0054
Next Token : 

, Posbility: 0.4863
Next Token : 
, Posbility: 0.4863
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0192
Next Token : (, Posbility: 0.0192
Next Token :   , Posbility: 0.0198
Next Token : in, Posbility: 0.0204
Next Token : let, Posbility: 0.5586
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0173
Next Token :  find, Posbility: 0.0197
Next Token :  len, Posbility: 0.0286
Next Token :  , Posbility: 0.2715
Next Token :  rec, Posbility: 0.5742
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0194
Next Token :  max, Posbility: 0.0194
Next Token :  count, Posbility: 0.0194
Next Token :  find, Posbility: 0.0598
Next Token :  , Posbility: 0.7266
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0017
Next Token : longest, Posbility: 0.0059
Next Token : smallest, Posbility: 0.0110
Next Token : min, Posbility: 0.0386
Next Token : length, Posbility: 0.8789
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0004
Next Token : s, Posbility: 0.0028
Next Token :  =, Posbility: 0.0031
Next Token :  , Posbility: 0.0040
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0005
Next Token : helper, Posbility: 0.0005
Next Token : list, Posbility: 0.0024
Next Token : rec, Posbility: 0.0036
Next Token : of, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  =, Posbility: 0.0006
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : first, Posbility: 0.0050
Next Token : longest, Posbility: 0.0050
Next Token : smallest, Posbility: 0.0153
Next Token : lists, Posbility: 0.0417
Next Token : list, Posbility: 0.8359
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0042
Next Token :  , Posbility: 0.0148
Next Token : 2, Posbility: 0.0244
Next Token : ', Posbility: 0.0312
Next Token : _, Posbility: 0.9141
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0413
Next Token : tail, Posbility: 0.0466
Next Token : opt, Posbility: 0.0869
Next Token : rec, Posbility: 0.0986
Next Token : iter, Posbility: 0.3906
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0065
Next Token : _, Posbility: 0.0121
Next Token : ative, Posbility: 0.0374
Next Token :  =, Posbility: 0.0425
Next Token :  , Posbility: 0.8516
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ls, Posbility: 0.0011
Next Token : f, Posbility: 0.0017
Next Token : lst, Posbility: 0.0019
Next Token : (, Posbility: 0.0058
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0014
Next Token :  i, Posbility: 0.0018
Next Token :  , Posbility: 0.0280
Next Token : s, Posbility: 0.0359
Next Token :  =, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0004
Next Token :  0, Posbility: 0.0005
Next Token :  match, Posbility: 0.0040
Next Token :  , Posbility: 0.0201
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0003
Next Token : let, Posbility: 0.0012
Next Token :    , Posbility: 0.0015
Next Token :     , Posbility: 0.0046
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0054
Next Token : if, Posbility: 0.0165
Next Token : List, Posbility: 0.0349
Next Token : let, Posbility: 0.2930
Next Token : match, Posbility: 0.6211
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  iter, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0001
Next Token : Seq, Posbility: 0.0002
Next Token : (, Posbility: 0.0006
Next Token : List, Posbility: 0.0041
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  WITH, Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  [], Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0002
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  [, Posbility: 0.0009
Next Token :  nil, Posbility: 0.0009
Next Token :  , Posbility: 0.0067
Next Token :  [], Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :  |, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  1, Posbility: 0.0009
Next Token :  [], Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  0, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  |, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0003
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0005
Next Token :  l, Posbility: 0.0006
Next Token :  [, Posbility: 0.0075
Next Token :  [], Posbility: 0.0085
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0021
Next Token : (, Posbility: 0.0027
Next Token : head, Posbility: 0.0027
Next Token : _, Posbility: 0.0226
Next Token : x, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0004
Next Token : :, Posbility: 0.0007
Next Token : s, Posbility: 0.0066
Next Token : ::, Posbility: 0.0096
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : x, Posbility: 0.0003
Next Token : :, Posbility: 0.0015
Next Token : ->, Posbility: 0.0015
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  nil, Posbility: 0.0005
Next Token :  [, Posbility: 0.0019
Next Token :  rest, Posbility: 0.0022
Next Token :  [], Posbility: 0.0067
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : tail, Posbility: 0.0006
Next Token : y, Posbility: 0.0024
Next Token : _, Posbility: 0.0178
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : ', Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token : ,, Posbility: 0.0004
Next Token :  =>, Posbility: 0.0006
Next Token :  when, Posbility: 0.0085
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0001
Next Token : if, Posbility: 0.0003
Next Token : ::, Posbility: 0.0004
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0052
Next Token :  match, Posbility: 0.0052
Next Token : 
, Posbility: 0.1040
Next Token :  , Posbility: 0.1040
Next Token :  1, Posbility: 0.7695
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : +, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 0.0019
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0027
Next Token :  iter, Posbility: 0.0105
Next Token :  match, Posbility: 0.0105
Next Token : 
, Posbility: 0.0173
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0063
Next Token : Seq, Posbility: 0.0103
Next Token : x, Posbility: 0.0219
Next Token : List, Posbility: 0.1113
Next Token : length, Posbility: 0.8203
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length
 score:False
Error type: noerr
---------------------------
Next Token :  of, Posbility: 0.0001
Next Token :  (*, Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : (, Posbility: 0.0012
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_
 score:False
Error type: noerr
---------------------------
Next Token : for, Posbility: 0.0001
Next Token : list, Posbility: 0.0001
Next Token : rec, Posbility: 0.0002
Next Token : iter, Posbility: 0.0010
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  list, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_
 score:False
Error type: noerr
---------------------------
Next Token : next, Posbility: 0.0000
Next Token : iterator, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : iter, Posbility: 0.0004
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0002
Next Token : (, Posbility: 0.0010
Next Token :  iter, Posbility: 0.0024
Next Token :  , Posbility: 0.0179
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_
 score:False
Error type: noerr
---------------------------
Next Token : iterator, Posbility: 0.0000
Next Token : loop, Posbility: 0.0000
Next Token : it, Posbility: 0.0001
Next Token : rec, Posbility: 0.0474
Next Token : iter, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter
 score:False
Error type: noerr
---------------------------
Next Token :  iter, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0009
Next Token : (, Posbility: 0.0015
Next Token : _, Posbility: 0.0075
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter 
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : tail, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0036
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0005
Next Token : 
, Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0014
Next Token :  in, Posbility: 0.0034
Next Token :  , Posbility: 0.0039
Next Token : 

, Posbility: 0.3984
Next Token : 
, Posbility: 0.5820
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0104
Next Token : 

, Posbility: 0.0156
Next Token : (, Posbility: 0.0242
Next Token : in, Posbility: 0.0352
Next Token : let, Posbility: 0.7031
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0063
Next Token :  main, Posbility: 0.0063
Next Token :  list, Posbility: 0.0092
Next Token :  , Posbility: 0.1260
Next Token :  rec, Posbility: 0.8203
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0076
Next Token :  len, Posbility: 0.0086
Next Token :  count, Posbility: 0.0126
Next Token :  find, Posbility: 0.0183
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0009
Next Token : longest, Posbility: 0.0024
Next Token : smallest, Posbility: 0.0027
Next Token : min, Posbility: 0.0120
Next Token : length, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0001
Next Token : s, Posbility: 0.0010
Next Token :  , Posbility: 0.0015
Next Token :  =, Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0003
Next Token : iter, Posbility: 0.0007
Next Token : list, Posbility: 0.0015
Next Token : rec, Posbility: 0.0015
Next Token : of, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  =, Posbility: 0.0004
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : first, Posbility: 0.0018
Next Token : all, Posbility: 0.0023
Next Token : smallest, Posbility: 0.0038
Next Token : lists, Posbility: 0.0134
Next Token : list, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0040
Next Token : ', Posbility: 0.0040
Next Token : 2, Posbility: 0.0058
Next Token :  , Posbility: 0.0084
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0337
Next Token : opt, Posbility: 0.0381
Next Token : fold, Posbility: 0.0432
Next Token : rec, Posbility: 0.0554
Next Token : iter, Posbility: 0.5273
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0160
Next Token : ', Posbility: 0.0205
Next Token :  , Posbility: 0.0635
Next Token : 2, Posbility: 0.3223
Next Token : _, Posbility: 0.5312
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0238
Next Token : aux, Posbility: 0.0347
Next Token : tail, Posbility: 0.0732
Next Token : rec, Posbility: 0.1367
Next Token : opt, Posbility: 0.1992
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0043
Next Token : 1, Posbility: 0.0048
Next Token :  =, Posbility: 0.0131
Next Token : _, Posbility: 0.0278
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0004
Next Token : lst, Posbility: 0.0005
Next Token : f, Posbility: 0.0006
Next Token : (, Posbility: 0.0010
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0002
Next Token :  i, Posbility: 0.0003
Next Token :  , Posbility: 0.0123
Next Token : s, Posbility: 0.0123
Next Token :  =, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0036
Next Token :  match, Posbility: 0.0041
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0002
Next Token : let, Posbility: 0.0006
Next Token :    , Posbility: 0.0007
Next Token :     , Posbility: 0.0025
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0010
Next Token : if, Posbility: 0.0063
Next Token : try, Posbility: 0.0219
Next Token : let, Posbility: 0.0361
Next Token : match, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Optional, Posbility: 0.0001
Next Token :  ?, Posbility: 0.0001
Next Token :  !, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0002
Next Token : (, Posbility: 0.0005
Next Token : Option, Posbility: 0.0010
Next Token : List, Posbility: 0.0017
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token :  WITH, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  null, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  [], Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0024
Next Token :  [, Posbility: 0.0065
Next Token :  None, Posbility: 0.0065
Next Token :  , Posbility: 0.0177
Next Token :  [], Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  when, Posbility: 0.0003
Next Token :   , Posbility: 0.0003
Next Token :  |, Posbility: 0.0059
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0023
Next Token :  Some, Posbility: 0.0064
Next Token :  , Posbility: 0.0173
Next Token :  None, Posbility: 0.0173
Next Token :  0, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :  as, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token :  |, Posbility: 0.0022
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0064
Next Token :  None, Posbility: 0.0064
Next Token :  [], Posbility: 0.0106
Next Token :  Some, Posbility: 0.0175
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0002
Next Token : Nil, Posbility: 0.0007
Next Token : (, Posbility: 0.0019
Next Token : _, Posbility: 0.0140
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  |, Posbility: 0.0006
Next Token : s, Posbility: 0.0013
Next Token : ::, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : :, Posbility: 0.0006
Next Token : ->, Posbility: 0.0013
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0004
Next Token :  nil, Posbility: 0.0006
Next Token :  None, Posbility: 0.0008
Next Token :  [], Posbility: 0.0036
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Nil, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0004
Next Token : _, Posbility: 0.0179
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ', Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  |, Posbility: 0.0008
Next Token :  when, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : if, Posbility: 0.0003
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0064
Next Token :  Some, Posbility: 0.0064
Next Token : 
, Posbility: 0.0173
Next Token :  , Posbility: 0.0173
Next Token :  1, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token : L, Posbility: 0.0001
Next Token :  |, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 0.0010
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0022
Next Token :  match, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0005
Next Token : if, Posbility: 0.0006
Next Token : List, Posbility: 0.0007
Next Token : (, Posbility: 0.0017
Next Token : length, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_
 score:False
Error type: noerr
---------------------------
Next Token : opt, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  iter, Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_
 score:False
Error type: noerr
---------------------------
Next Token : it, Posbility: 0.0000
Next Token : inter, Posbility: 0.0001
Next Token : opt, Posbility: 0.0002
Next Token : rec, Posbility: 0.0041
Next Token : iter, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0125
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_
 score:False
Error type: noerr
---------------------------
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : iter, Posbility: 0.0001
Next Token : rec, Posbility: 0.0006
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0004
Next Token : , Posbility: 0.0008
Next Token :  , Posbility: 0.0026
Next Token : 

, Posbility: 0.2656
Next Token : 
, Posbility: 0.7227
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0073
Next Token : ```, Posbility: 0.0083
Next Token : module, Posbility: 0.0083
Next Token : (, Posbility: 0.0308
Next Token : let, Posbility: 0.8438
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0018
Next Token :  main, Posbility: 0.0021
Next Token :  list, Posbility: 0.0027
Next Token :  , Posbility: 0.0415
Next Token :  rec, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0027
Next Token :  len, Posbility: 0.0030
Next Token :  count, Posbility: 0.0050
Next Token :  find, Posbility: 0.0064
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0005
Next Token : smallest, Posbility: 0.0005
Next Token : longest, Posbility: 0.0010
Next Token : min, Posbility: 0.0040
Next Token : length, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Of, Posbility: 0.0000
Next Token : s, Posbility: 0.0003
Next Token :  =, Posbility: 0.0004
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0002
Next Token : iter, Posbility: 0.0003
Next Token : rec, Posbility: 0.0007
Next Token : list, Posbility: 0.0008
Next Token : of, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : first, Posbility: 0.0005
Next Token : all, Posbility: 0.0007
Next Token : opt, Posbility: 0.0007
Next Token : lists, Posbility: 0.0040
Next Token : list, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0005
Next Token : ', Posbility: 0.0010
Next Token : 2, Posbility: 0.0017
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0204
Next Token : fold, Posbility: 0.0337
Next Token : rec, Posbility: 0.0491
Next Token : opt, Posbility: 0.2490
Next Token : iter, Posbility: 0.4102
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0026
Next Token : i, Posbility: 0.0033
Next Token :  , Posbility: 0.0131
Next Token : 2, Posbility: 0.0518
Next Token : _, Posbility: 0.9141
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0171
Next Token : ex, Posbility: 0.0171
Next Token : tail, Posbility: 0.0194
Next Token : rec, Posbility: 0.0598
Next Token : opt, Posbility: 0.4414
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0166
Next Token : ', Posbility: 0.0449
Next Token :  , Posbility: 0.0654
Next Token : 2, Posbility: 0.2930
Next Token : _, Posbility: 0.5469
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rev, Posbility: 0.0258
Next Token : tail, Posbility: 0.0481
Next Token : ex, Posbility: 0.0547
Next Token : rec, Posbility: 0.0898
Next Token : opt, Posbility: 0.0898
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0032
Next Token : 2, Posbility: 0.0037
Next Token : _, Posbility: 0.0186
Next Token :  =, Posbility: 0.0347
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : f, Posbility: 0.0003
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token : s, Posbility: 0.0032
Next Token :  , Posbility: 0.0036
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  match, Posbility: 0.0012
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0009
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : if, Posbility: 0.0007
Next Token : try, Posbility: 0.0031
Next Token : let, Posbility: 0.0067
Next Token : match, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Option, Posbility: 0.0001
Next Token : length, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0002
Next Token :  None, Posbility: 0.0003
Next Token :  [, Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  [], Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  |, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  1, Posbility: 0.0009
Next Token :  , Posbility: 0.0024
Next Token :  None, Posbility: 0.0067
Next Token :  0, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token :  |, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0003
Next Token :  [, Posbility: 0.0007
Next Token :  Some, Posbility: 0.0007
Next Token :  [], Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0001
Next Token : Nil, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : _, Posbility: 0.0022
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : ::, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token : ->, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  nil, Posbility: 0.0001
Next Token :  None, Posbility: 0.0001
Next Token :  [], Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  when, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0003
Next Token :  match, Posbility: 0.0009
Next Token : 
, Posbility: 0.0025
Next Token :  , Posbility: 0.0041
Next Token :  1, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : L, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  match, Posbility: 0.0002
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_
 score:False
Error type: noerr
---------------------------
Next Token : for, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_
 score:False
Error type: noerr
---------------------------
Next Token : iterate, Posbility: 0.0000
Next Token : inter, Posbility: 0.0000
Next Token : opt, Posbility: 0.0001
Next Token : rec, Posbility: 0.0007
Next Token : iter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : iter, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0067
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : rec, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : , Posbility: 0.0011
Next Token :  , Posbility: 0.0014
Next Token : 

, Posbility: 0.2676
Next Token : 
, Posbility: 0.7266
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0085
Next Token : [, Posbility: 0.0090
Next Token : module, Posbility: 0.0090
Next Token : (, Posbility: 0.0356
Next Token : let, Posbility: 0.8672
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  main, Posbility: 0.0013
Next Token :  iter, Posbility: 0.0016
Next Token :  list, Posbility: 0.0023
Next Token :  , Posbility: 0.0415
Next Token :  rec, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0021
Next Token :  len, Posbility: 0.0027
Next Token :  count, Posbility: 0.0035
Next Token :  find, Posbility: 0.0045
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0004
Next Token : append, Posbility: 0.0004
Next Token : longest, Posbility: 0.0009
Next Token : min, Posbility: 0.0019
Next Token : length, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Of, Posbility: 0.0001
Next Token : s, Posbility: 0.0003
Next Token :  =, Posbility: 0.0004
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0002
Next Token : iter, Posbility: 0.0002
Next Token : rec, Posbility: 0.0004
Next Token : list, Posbility: 0.0006
Next Token : of, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : first, Posbility: 0.0005
Next Token : all, Posbility: 0.0007
Next Token : opt, Posbility: 0.0008
Next Token : lists, Posbility: 0.0051
Next Token : list, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0005
Next Token : ', Posbility: 0.0005
Next Token : 2, Posbility: 0.0013
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0093
Next Token : fold, Posbility: 0.0120
Next Token : rec, Posbility: 0.0420
Next Token : opt, Posbility: 0.1289
Next Token : iter, Posbility: 0.6562
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0010
Next Token : i, Posbility: 0.0011
Next Token :  , Posbility: 0.0051
Next Token : 2, Posbility: 0.0139
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0099
Next Token : list, Posbility: 0.0112
Next Token : iter, Posbility: 0.0186
Next Token : rec, Posbility: 0.0503
Next Token : opt, Posbility: 0.6953
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0010
Next Token : 3, Posbility: 0.0011
Next Token :  , Posbility: 0.0121
Next Token : 2, Posbility: 0.0199
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0125
Next Token : none, Posbility: 0.0125
Next Token : iter, Posbility: 0.0205
Next Token : rec, Posbility: 0.1338
Next Token : opt, Posbility: 0.6016
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0033
Next Token : 1, Posbility: 0.0080
Next Token :  , Posbility: 0.0315
Next Token : 2, Posbility: 0.1250
Next Token : _, Posbility: 0.8164
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0127
Next Token : aux, Posbility: 0.0144
Next Token : tail, Posbility: 0.0164
Next Token : rec, Posbility: 0.1206
Next Token : opt, Posbility: 0.4766
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0008
Next Token : 
, Posbility: 0.0013
Next Token : _, Posbility: 0.0074
Next Token :  =, Posbility: 0.0200
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : (), Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : s, Posbility: 0.0022
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  match, Posbility: 0.0005
Next Token :  , Posbility: 0.0008
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0007
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : try, Posbility: 0.0002
Next Token : let, Posbility: 0.0010
Next Token : match, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  1, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  nil, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 0.0008
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  when, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (1, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 0.0009
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token : L, Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0013
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_
 score:False
Error type: noerr
---------------------------
Next Token : lst, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_
 score:False
Error type: noerr
---------------------------
Next Token : iterate, Posbility: 0.0000
Next Token : inter, Posbility: 0.0000
Next Token : opt, Posbility: 0.0001
Next Token : rec, Posbility: 0.0004
Next Token : iter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_
 score:False
Error type: noerr
---------------------------
Next Token : rec, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : iter, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0011
Next Token : , Posbility: 0.0018
Next Token : 

, Posbility: 0.2676
Next Token : 
, Posbility: 0.7266
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs

 score:False
Error type: noerr
---------------------------
Next Token : module, Posbility: 0.0067
Next Token : [, Posbility: 0.0081
Next Token : ```, Posbility: 0.0092
Next Token : (, Posbility: 0.0388
Next Token : let, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  main, Posbility: 0.0010
Next Token :  iter, Posbility: 0.0013
Next Token :  list, Posbility: 0.0018
Next Token :  , Posbility: 0.0415
Next Token :  rec, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0019
Next Token :  len, Posbility: 0.0021
Next Token :  find, Posbility: 0.0031
Next Token :  count, Posbility: 0.0031
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0004
Next Token : append, Posbility: 0.0004
Next Token : longest, Posbility: 0.0008
Next Token : min, Posbility: 0.0013
Next Token : length, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Of, Posbility: 0.0001
Next Token : s, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  =, Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0002
Next Token : all, Posbility: 0.0002
Next Token : rec, Posbility: 0.0003
Next Token : list, Posbility: 0.0006
Next Token : of, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : cons, Posbility: 0.0004
Next Token : opt, Posbility: 0.0005
Next Token : all, Posbility: 0.0006
Next Token : lists, Posbility: 0.0035
Next Token : list, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0003
Next Token :  =, Posbility: 0.0005
Next Token : 2, Posbility: 0.0009
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0063
Next Token : tail, Posbility: 0.0081
Next Token : rec, Posbility: 0.0364
Next Token : opt, Posbility: 0.0986
Next Token : iter, Posbility: 0.7305
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0006
Next Token : 3, Posbility: 0.0009
Next Token :  , Posbility: 0.0031
Next Token : 2, Posbility: 0.0066
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : seq, Posbility: 0.0033
Next Token : list, Posbility: 0.0054
Next Token : iter, Posbility: 0.0243
Next Token : rec, Posbility: 0.0513
Next Token : opt, Posbility: 0.8008
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token : 3, Posbility: 0.0003
Next Token : 2, Posbility: 0.0025
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0014
Next Token : none, Posbility: 0.0023
Next Token : iter, Posbility: 0.0061
Next Token : rec, Posbility: 0.0454
Next Token : opt, Posbility: 0.9141
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token : 2, Posbility: 0.0012
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0009
Next Token : none, Posbility: 0.0021
Next Token : iter, Posbility: 0.0021
Next Token : rec, Posbility: 0.0176
Next Token : opt, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0010
Next Token :  =, Posbility: 0.0021
Next Token : 2, Posbility: 0.0095
Next Token :  , Posbility: 0.0177
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0015
Next Token : none, Posbility: 0.0022
Next Token : iter, Posbility: 0.0048
Next Token : rec, Posbility: 0.0310
Next Token : opt, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token : 
, Posbility: 0.0007
Next Token : _, Posbility: 0.0084
Next Token :  =, Posbility: 0.0178
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : s, Posbility: 0.0019
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  match, Posbility: 0.0003
Next Token :  , Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0006
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  nil, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_
 score:False
Error type: noerr
---------------------------
Next Token : lst, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_
 score:False
Error type: noerr
---------------------------
Next Token : it, Posbility: 0.0000
Next Token : iterate, Posbility: 0.0000
Next Token : opt, Posbility: 0.0001
Next Token : rec, Posbility: 0.0002
Next Token : iter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0110
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : , Posbility: 0.0011
Next Token :  , Posbility: 0.0011
Next Token : 

, Posbility: 0.2676
Next Token : 
, Posbility: 0.7305
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs

 score:False
Error type: noerr
---------------------------
Next Token : module, Posbility: 0.0048
Next Token : [, Posbility: 0.0062
Next Token : ```, Posbility: 0.0066
Next Token : (, Posbility: 0.0294
Next Token : let, Posbility: 0.9141
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  main, Posbility: 0.0009
Next Token :  iter, Posbility: 0.0011
Next Token :  list, Posbility: 0.0014
Next Token :  , Posbility: 0.0369
Next Token :  rec, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0015
Next Token :  len, Posbility: 0.0019
Next Token :  count, Posbility: 0.0021
Next Token :  find, Posbility: 0.0024
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0004
Next Token : tail, Posbility: 0.0004
Next Token : longest, Posbility: 0.0006
Next Token : min, Posbility: 0.0008
Next Token : length, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Of, Posbility: 0.0000
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  =, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0001
Next Token : all, Posbility: 0.0001
Next Token : rec, Posbility: 0.0002
Next Token : list, Posbility: 0.0004
Next Token : of, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : some, Posbility: 0.0004
Next Token : all, Posbility: 0.0005
Next Token : opt, Posbility: 0.0005
Next Token : lists, Posbility: 0.0024
Next Token : list, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0002
Next Token : 2, Posbility: 0.0004
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0037
Next Token : tail, Posbility: 0.0047
Next Token : rec, Posbility: 0.0272
Next Token : opt, Posbility: 0.0952
Next Token : iter, Posbility: 0.7969
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token : 3, Posbility: 0.0005
Next Token :  , Posbility: 0.0025
Next Token : 2, Posbility: 0.0036
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0024
Next Token : list, Posbility: 0.0035
Next Token : iter, Posbility: 0.0179
Next Token : rec, Posbility: 0.0378
Next Token : opt, Posbility: 0.8633
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0006
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : none, Posbility: 0.0009
Next Token : optional, Posbility: 0.0009
Next Token : iter, Posbility: 0.0024
Next Token : rec, Posbility: 0.0138
Next Token : opt, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : none, Posbility: 0.0003
Next Token : iter, Posbility: 0.0003
Next Token : optional, Posbility: 0.0005
Next Token : rec, Posbility: 0.0028
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0004
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : none, Posbility: 0.0003
Next Token : iter, Posbility: 0.0004
Next Token : optional, Posbility: 0.0004
Next Token : rec, Posbility: 0.0019
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : 2, Posbility: 0.0011
Next Token :  =, Posbility: 0.0011
Next Token :  , Posbility: 0.0203
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : optional, Posbility: 0.0003
Next Token : none, Posbility: 0.0005
Next Token : iter, Posbility: 0.0007
Next Token : rec, Posbility: 0.0024
Next Token : opt, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token : _, Posbility: 0.0109
Next Token :  =, Posbility: 0.0123
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 0.0010
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  match, Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : length, Posbility: 0.0001
Next Token : let, Posbility: 0.0003
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  nil, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0013
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_
 score:False
Error type: noerr
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_
 score:False
Error type: noerr
---------------------------
Next Token : it, Posbility: 0.0000
Next Token : iterate, Posbility: 0.0000
Next Token : opt, Posbility: 0.0002
Next Token : rec, Posbility: 0.0002
Next Token : iter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0159
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : , Posbility: 0.0011
Next Token : 

, Posbility: 0.2676
Next Token : 
, Posbility: 0.7305
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0026
Next Token : module, Posbility: 0.0044
Next Token : ```, Posbility: 0.0049
Next Token : (, Posbility: 0.0209
Next Token : let, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let
 score:False
Error type: noerr
---------------------------
Next Token :  main, Posbility: 0.0006
Next Token :  iter, Posbility: 0.0008
Next Token :  list, Posbility: 0.0011
Next Token :  , Posbility: 0.0327
Next Token :  rec, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  list, Posbility: 0.0010
Next Token :  find, Posbility: 0.0010
Next Token :  len, Posbility: 0.0012
Next Token :  count, Posbility: 0.0012
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : min, Posbility: 0.0004
Next Token : longest, Posbility: 0.0004
Next Token : tail, Posbility: 0.0004
Next Token : length, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length
 score:False
Error type: noerr
---------------------------
Next Token : Of, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_
 score:False
Error type: noerr
---------------------------
Next Token : all, Posbility: 0.0001
Next Token : iter, Posbility: 0.0001
Next Token : rec, Posbility: 0.0001
Next Token : list, Posbility: 0.0003
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of
 score:False
Error type: noerr
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_
 score:False
Error type: noerr
---------------------------
Next Token : empty, Posbility: 0.0002
Next Token : opt, Posbility: 0.0002
Next Token : all, Posbility: 0.0003
Next Token : lists, Posbility: 0.0010
Next Token : list, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token :  =, Posbility: 0.0006
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0024
Next Token : tail, Posbility: 0.0027
Next Token : rec, Posbility: 0.0227
Next Token : opt, Posbility: 0.0703
Next Token : iter, Posbility: 0.8555
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : 3, Posbility: 0.0002
Next Token : 2, Posbility: 0.0012
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0020
Next Token : all, Posbility: 0.0020
Next Token : iter, Posbility: 0.0101
Next Token : rec, Posbility: 0.0352
Next Token : opt, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : optional, Posbility: 0.0006
Next Token : none, Posbility: 0.0007
Next Token : iter, Posbility: 0.0010
Next Token : rec, Posbility: 0.0109
Next Token : opt, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0001
Next Token : iter, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : rec, Posbility: 0.0009
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : ____, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : rec, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : iter, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : rec, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0124
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : iter, Posbility: 0.0002
Next Token : op, Posbility: 0.0003
Next Token : optional, Posbility: 0.0003
Next Token : rec, Posbility: 0.0003
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  =, Posbility: 0.0066
Next Token : _, Posbility: 0.0157
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token : =, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 0.0006
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =

 score:False
Error type: noerr
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with

 score:False
Error type: noerr
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  |
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | []
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] 
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] ->
 score:False
Error type: noerr
---------------------------
Next Token :  0;, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  |
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x ::
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: 
 score:False
Error type: noerr
---------------------------
Next Token : xl, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: noerr
---------------------------
Next Token :  (1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :  1, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 +
 score:False
Error type: noerr
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + 
 score:False
Error type: noerr
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_
 score:False
Error type: noerr
---------------------------
Next Token : opt, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_
 score:False
Error type: noerr
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_
 score:False
Error type: noerr
---------------------------
Next Token : it, Posbility: 0.0000
Next Token : iterate, Posbility: 0.0000
Next Token : opt, Posbility: 0.0001
Next Token : rec, Posbility: 0.0002
Next Token : iter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0229
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ott, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : _, Posbility: 0.0004
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : , Posbility: 0.0009
Next Token : 

, Posbility: 0.2676
Next Token : 
, Posbility: 0.7305
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0023
Next Token : ```, Posbility: 0.0046
Next Token : module, Posbility: 0.0052
Next Token : (, Posbility: 0.0195
Next Token : let, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let
 score:False
Error type: noerr
---------------------------
Next Token :  main, Posbility: 0.0005
Next Token :  iter, Posbility: 0.0008
Next Token :  list, Posbility: 0.0011
Next Token :  , Posbility: 0.0291
Next Token :  rec, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  find, Posbility: 0.0006
Next Token :  list, Posbility: 0.0007
Next Token :  count, Posbility: 0.0008
Next Token :  len, Posbility: 0.0010
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : append, Posbility: 0.0003
Next Token : tail, Posbility: 0.0003
Next Token : longest, Posbility: 0.0003
Next Token : min, Posbility: 0.0003
Next Token : length, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length
 score:False
Error type: noerr
---------------------------
Next Token : Of, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_
 score:False
Error type: noerr
---------------------------
Next Token : all, Posbility: 0.0001
Next Token : iter, Posbility: 0.0001
Next Token : rec, Posbility: 0.0001
Next Token : list, Posbility: 0.0003
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of
 score:False
Error type: noerr
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_
 score:False
Error type: noerr
---------------------------
Next Token : empty, Posbility: 0.0001
Next Token : opt, Posbility: 0.0001
Next Token : all, Posbility: 0.0002
Next Token : lists, Posbility: 0.0009
Next Token : list, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  =, Posbility: 0.0005
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0013
Next Token : tail, Posbility: 0.0015
Next Token : rec, Posbility: 0.0186
Next Token : opt, Posbility: 0.0571
Next Token : iter, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : 2, Posbility: 0.0008
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0011
Next Token : all, Posbility: 0.0014
Next Token : iter, Posbility: 0.0027
Next Token : rec, Posbility: 0.0136
Next Token : opt, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : none, Posbility: 0.0003
Next Token : optional, Posbility: 0.0003
Next Token : iter, Posbility: 0.0004
Next Token : rec, Posbility: 0.0046
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : ____, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : none, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : rec, Posbility: 0.0004
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : rec, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : rec, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : iter, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : iter, Posbility: 0.0001
Next Token : rec, Posbility: 0.0002
Next Token : optional, Posbility: 0.0002
Next Token : op, Posbility: 0.0003
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0007
Next Token : _, Posbility: 0.0096
Next Token :  =, Posbility: 0.0096
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token : =, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 0.0006
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  match
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  match 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  match x
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  match x with
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  match x with

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  match x with
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  match x with
  |
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  match x with
  | []
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] 
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] ->
 score:False
Error type: noerr
---------------------------
Next Token :  0;, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  |
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to find the length of the smallest list in a list of lists. *)
let rec length_of_list x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list xs
let rec length_of_list_rec x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_rec xs
let rec length_of_list_iter x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter xs
let rec length_of_list_iter_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt xs
let rec length_of_list_iter_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt xs
let rec length_of_list_iter_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x :: xs -> 1 + length_of_list_iter_opt_opt_opt_opt_opt_opt xs
let rec length_of_list_iter_opt_opt_opt_opt_opt_opt_opt x =
  match x with
  | [] -> 0
  | x
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>