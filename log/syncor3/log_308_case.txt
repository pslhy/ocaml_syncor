code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  less, Posbility: 0.0101
Next Token :  is, Posbility: 0.0167
Next Token :  get, Posbility: 0.1582
Next Token :  , Posbility: 0.2617
Next Token :  rec, Posbility: 0.4316
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0184
Next Token :  find, Posbility: 0.0237
Next Token :  loop, Posbility: 0.0825
Next Token :  get, Posbility: 0.1543
Next Token :  , Posbility: 0.4746
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fi, Posbility: 0.0181
Next Token : helper, Posbility: 0.0298
Next Token : f, Posbility: 0.0435
Next Token : gen, Posbility: 0.0557
Next Token : luc, Posbility: 0.5273
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec luc
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0044
Next Token : is, Posbility: 0.0057
Next Token : as, Posbility: 0.0420
Next Token : ids, Posbility: 0.0889
Next Token : id, Posbility: 0.8438
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0167
Next Token : s, Posbility: 0.0354
Next Token :  =, Posbility: 0.0454
Next Token :  , Posbility: 0.1235
Next Token : _, Posbility: 0.7109
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : number, Posbility: 0.0306
Next Token : list, Posbility: 0.0347
Next Token : below, Posbility: 0.0444
Next Token : nums, Posbility: 0.0505
Next Token : numbers, Posbility: 0.5430
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0261
Next Token :  l, Posbility: 0.0430
Next Token :  =, Posbility: 0.1504
Next Token : _, Posbility: 0.2480
Next Token :  , Posbility: 0.4082
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0183
Next Token : :, Posbility: 0.0388
Next Token : x, Posbility: 0.0640
Next Token : (, Posbility: 0.1055
Next Token : n, Posbility: 0.6875
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0048
Next Token :  acc, Posbility: 0.0190
Next Token :  i, Posbility: 0.0190
Next Token :  , Posbility: 0.0962
Next Token :  =, Posbility: 0.8086
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0049
Next Token :  function, Posbility: 0.0091
Next Token :  match, Posbility: 0.0674
Next Token :  , Posbility: 0.0864
Next Token : 
, Posbility: 0.8203
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0066
Next Token : match, Posbility: 0.0066
Next Token : 	, Posbility: 0.0074
Next Token :     , Posbility: 0.1030
Next Token :   , Posbility: 0.8633
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0050
Next Token : List, Posbility: 0.0050
Next Token : let, Posbility: 0.1143
Next Token : match, Posbility: 0.3984
Next Token : if, Posbility: 0.4512
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0008
Next Token :  !, Posbility: 0.0009
Next Token :  N, Posbility: 0.0010
Next Token :  not, Posbility: 0.0017
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Compare, Posbility: 0.0007
Next Token : Luc, Posbility: 0.0013
Next Token : Int, Posbility: 0.0057
Next Token : (, Posbility: 0.0255
Next Token : n, Posbility: 0.9570
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ==, Posbility: 0.0405
Next Token :  >=, Posbility: 0.0405
Next Token :  , Posbility: 0.3008
Next Token :  =, Posbility: 0.3008
Next Token :  <=, Posbility: 0.3008
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <=
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0021
Next Token :  10, Posbility: 0.0021
Next Token :  , Posbility: 0.0415
Next Token :  1, Posbility: 0.1128
Next Token :  0, Posbility: 0.8320
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0006
Next Token :  , Posbility: 0.0031
Next Token : 
, Posbility: 0.0074
Next Token :  ||, Posbility: 0.0108
Next Token :  then, Posbility: 0.9766
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0078
Next Token :  0, Posbility: 0.0129
Next Token : 
, Posbility: 0.0947
Next Token :  , Posbility: 0.1562
Next Token :  [], Posbility: 0.7031
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0008
Next Token :   , Posbility: 0.0022
Next Token :  , Posbility: 0.0112
Next Token :  else, Posbility: 0.1982
Next Token : 
, Posbility: 0.7812
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :       , Posbility: 0.0003
Next Token :     , Posbility: 0.0019
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  
 score:False
Error type: noerr
---------------------------
Next Token : |, Posbility: 0.0001
Next Token : then, Posbility: 0.0002
Next Token : elif, Posbility: 0.0003
Next Token : let, Posbility: 0.0009
Next Token : else, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0171
Next Token :  [, Posbility: 0.0282
Next Token :  {, Posbility: 0.0320
Next Token : 
, Posbility: 0.3438
Next Token :  , Posbility: 0.5664
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0747
Next Token : n, Posbility: 0.0747
Next Token : List, Posbility: 0.1396
Next Token : let, Posbility: 0.1396
Next Token : if, Posbility: 0.4297
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  O, Posbility: 0.0019
Next Token :  String, Posbility: 0.0021
Next Token :  is, Posbility: 0.0024
Next Token :  not, Posbility: 0.0074
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0070
Next Token : luc, Posbility: 0.0090
Next Token : Luc, Posbility: 0.0101
Next Token : (, Posbility: 0.0312
Next Token : n, Posbility: 0.9141
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  %, Posbility: 0.0393
Next Token :  <=, Posbility: 0.0835
Next Token :  ==, Posbility: 0.1069
Next Token :  , Posbility: 0.2266
Next Token :  =, Posbility: 0.4805
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token : ~, Posbility: 0.0013
Next Token :  0, Posbility: 0.0270
Next Token :  , Posbility: 0.0732
Next Token :  1, Posbility: 0.8906
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0007
Next Token : 
, Posbility: 0.0010
Next Token :  ||, Posbility: 0.0036
Next Token :  then, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0291
Next Token : 
, Posbility: 0.0791
Next Token :  [, Posbility: 0.1299
Next Token :  [], Posbility: 0.1299
Next Token :  , Posbility: 0.5820
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0161
Next Token : [2], Posbility: 0.0161
Next Token : [1];, Posbility: 0.0300
Next Token : [0], Posbility: 0.1187
Next Token : [1], Posbility: 0.7734
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0012
Next Token :  *, Posbility: 0.0018
Next Token :  , Posbility: 0.0117
Next Token :  else, Posbility: 0.0464
Next Token : 
, Posbility: 0.9336
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]

 score:False
Error type: noerr
---------------------------
Next Token :          , Posbility: 0.0004
Next Token :       , Posbility: 0.0010
Next Token :           , Posbility: 0.0017
Next Token :     , Posbility: 0.0028
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  
 score:False
Error type: noerr
---------------------------
Next Token : then, Posbility: 0.0000
Next Token : |, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : let, Posbility: 0.0013
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0068
Next Token :  [, Posbility: 0.0128
Next Token :  {, Posbility: 0.0347
Next Token : 
, Posbility: 0.2266
Next Token :  , Posbility: 0.6953
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0322
Next Token : n, Posbility: 0.0532
Next Token : let, Posbility: 0.1641
Next Token : if, Posbility: 0.2695
Next Token : luc, Posbility: 0.3926
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else luc
 score:False
Error type: noerr
---------------------------
Next Token : is, Posbility: 0.0000
Next Token : hd, Posbility: 0.0000
Next Token : ident, Posbility: 0.0001
Next Token : ids, Posbility: 0.0002
Next Token : id, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else lucid
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token :  *, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else lucid_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : nums, Posbility: 0.0001
Next Token : add, Posbility: 0.0001
Next Token : number, Posbility: 0.0025
Next Token : numbers, Posbility: 0.9961
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else lucid_numbers
 score:False
Error type: noerr
---------------------------
Next Token :  ~, Posbility: 0.0049
Next Token :  (1, Posbility: 0.0056
Next Token :  ((, Posbility: 0.0104
Next Token : (, Posbility: 0.0364
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else lucid_numbers 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : (`, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : n, Posbility: 0.0293
Next Token : (, Posbility: 0.9688
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else lucid_numbers (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : -, Posbility: 0.0006
Next Token : pred, Posbility: 0.0006
Next Token :  , Posbility: 0.0017
Next Token : 2, Posbility: 0.0075
Next Token : n, Posbility: 0.9844
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else lucid_numbers (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0027
Next Token : -1, Posbility: 0.0027
Next Token :  +, Posbility: 0.0095
Next Token : -1), Posbility: 0.1157
Next Token :  , Posbility: 0.8555
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else lucid_numbers (n 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : //, Posbility: 0.0001
Next Token : ^, Posbility: 0.0002
Next Token : −, Posbility: 0.0010
Next Token : /, Posbility: 0.0052
Next Token : -, Posbility: 0.9922
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else lucid_numbers (n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0024
Next Token :  , Posbility: 0.0065
Next Token :  1);, Posbility: 0.0065
Next Token :  2), Posbility: 0.0176
Next Token :  1), Posbility: 0.9609
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else lucid_numbers (n - 1)
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0096
Next Token :  +, Posbility: 0.0260
Next Token :  @, Posbility: 0.0260
Next Token :  , Posbility: 0.2471
Next Token :  ++, Posbility: 0.6719
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else lucid_numbers (n - 1) ++
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0005
Next Token :   , Posbility: 0.0009
Next Token : 
, Posbility: 0.0018
Next Token :  , Posbility: 0.2676
Next Token :  [, Posbility: 0.7266
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else lucid_numbers (n - 1) ++ [
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Luc, Posbility: 0.0010
Next Token : 2, Posbility: 0.0032
Next Token : (, Posbility: 0.0059
Next Token :  , Posbility: 0.1050
Next Token : n, Posbility: 0.8789
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else lucid_numbers (n - 1) ++ [n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0048
Next Token : ]., Posbility: 0.0131
Next Token :  , Posbility: 0.0215
Next Token : ];, Posbility: 0.0354
Next Token : ], Posbility: 0.9141
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else lucid_numbers (n - 1) ++ [n]
 score:False
Error type: noerr
---------------------------
Next Token :  ++, Posbility: 0.0068
Next Token :  , Posbility: 0.0087
Next Token :  in, Posbility: 0.0210
Next Token : 
, Posbility: 0.2559
Next Token : 

, Posbility: 0.6953
---------------------------
code:
 (* Write a function to get all lucid numbers smaller than or equal to a given integer. *)
let rec lucid_numbers n =
  if n <= 0 then []
  else if n = 1 then [1]
  else lucid_numbers (n - 1) ++ [n]


 score:True
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END and No Syntax Error--------

processing time : :22.183839797973633

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>