code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  all, Posbility: 0.0113
Next Token :  possible, Posbility: 0.0113
Next Token :  find, Posbility: 0.0239
Next Token :  , Posbility: 0.0947
Next Token :  rec, Posbility: 0.7930
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  enumerate, Posbility: 0.0282
Next Token :  all, Posbility: 0.0320
Next Token :  list, Posbility: 0.0361
Next Token :  find, Posbility: 0.1836
Next Token :  , Posbility: 0.4414
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0496
Next Token : combine, Posbility: 0.0496
Next Token : combo, Posbility: 0.0562
Next Token : com, Posbility: 0.1348
Next Token : combination, Posbility: 0.1729
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combination
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0075
Next Token :  =, Posbility: 0.0123
Next Token : _, Posbility: 0.0430
Next Token :  , Posbility: 0.0552
Next Token : s, Posbility: 0.8633
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0237
Next Token :  l, Posbility: 0.0391
Next Token : _, Posbility: 0.1206
Next Token :  =, Posbility: 0.2256
Next Token :  , Posbility: 0.4766
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0747
Next Token : lst, Posbility: 0.0845
Next Token : n, Posbility: 0.0845
Next Token : (, Posbility: 0.1787
Next Token : x, Posbility: 0.2021
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0090
Next Token :  i, Posbility: 0.0315
Next Token :  , Posbility: 0.1592
Next Token :  =, Posbility: 0.2988
Next Token : s, Posbility: 0.4336
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0088
Next Token :  acc, Posbility: 0.0112
Next Token :  i, Posbility: 0.0128
Next Token :  , Posbility: 0.1211
Next Token :  =, Posbility: 0.7891
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0050
Next Token :  function, Posbility: 0.0176
Next Token :  match, Posbility: 0.0479
Next Token :  , Posbility: 0.0698
Next Token : 
, Posbility: 0.8477
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0050
Next Token :    , Posbility: 0.0094
Next Token : 	, Posbility: 0.0094
Next Token :     , Posbility: 0.1147
Next Token :   , Posbility: 0.8477
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0061
Next Token : List, Posbility: 0.0240
Next Token : let, Posbility: 0.1572
Next Token : if, Posbility: 0.2285
Next Token : match, Posbility: 0.5469
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  [, Posbility: 0.0009
Next Token :  !, Posbility: 0.0009
Next Token :  String, Posbility: 0.0028
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0014
Next Token : Seq, Posbility: 0.0020
Next Token : (, Posbility: 0.0089
Next Token : List, Posbility: 0.0742
Next Token : x, Posbility: 0.9023
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  with, Posbility: 0.0009
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0005
Next Token :  @, Posbility: 0.0005
Next Token : 
, Posbility: 0.0005
Next Token :  =, Posbility: 0.0005
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0027
Next Token :  , Posbility: 0.0039
Next Token :  [, Posbility: 0.0050
Next Token :  [], Posbility: 0.0366
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0005
Next Token :       , Posbility: 0.0014
Next Token :    , Posbility: 0.0018
Next Token :     , Posbility: 0.0674
Next Token :   , Posbility: 0.9297
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : [, Posbility: 0.0152
Next Token : [], Posbility: 0.0413
Next Token : |, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  null, Posbility: 0.0009
Next Token :  nil, Posbility: 0.0064
Next Token :  , Posbility: 0.0173
Next Token :  [, Posbility: 0.0223
Next Token :  [], Posbility: 0.9492
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0034
Next Token :    , Posbility: 0.0044
Next Token :  |, Posbility: 0.0064
Next Token :  =>, Posbility: 0.0083
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : â†’, Posbility: 0.0004
Next Token : ::, Posbility: 0.0010
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0059
Next Token :  [, Posbility: 0.0098
Next Token :  [[, Posbility: 0.0265
Next Token :  , Posbility: 0.0723
Next Token :  [], Posbility: 0.8789
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0019
Next Token :   , Posbility: 0.0039
Next Token :  |, Posbility: 0.0107
Next Token :  , Posbility: 0.0137
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0042
Next Token :  a, Posbility: 0.0146
Next Token :  [], Posbility: 0.0146
Next Token :  [, Posbility: 0.1387
Next Token :  , Posbility: 0.8008
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0176
Next Token : hd, Posbility: 0.0256
Next Token : h, Posbility: 0.0374
Next Token : _, Posbility: 0.1011
Next Token : x, Posbility: 0.7500
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0044
Next Token : :, Posbility: 0.0092
Next Token : s, Posbility: 0.0195
Next Token : ::, Posbility: 0.3066
Next Token :  , Posbility: 0.6484
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : :, Posbility: 0.0009
Next Token : ->, Posbility: 0.0067
Next Token : ::, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  list, Posbility: 0.0008
Next Token :  acc, Posbility: 0.0013
Next Token :  [], Posbility: 0.0067
Next Token :  rest, Posbility: 0.1050
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0177
Next Token : y, Posbility: 0.0201
Next Token : t, Posbility: 0.0258
Next Token : _, Posbility: 0.0547
Next Token : x, Posbility: 0.8555
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token : x, Posbility: 0.0005
Next Token : ', Posbility: 0.0041
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0273
Next Token : _, Posbility: 0.0398
Next Token : 1, Posbility: 0.0452
Next Token : ', Posbility: 0.1226
Next Token :  , Posbility: 0.7031
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : -, Posbility: 0.0003
Next Token : if, Posbility: 0.0009
Next Token : ::, Posbility: 0.0046
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0022
Next Token :   , Posbility: 0.0037
Next Token :  [, Posbility: 0.1226
Next Token :  , Posbility: 0.4277
Next Token : 
, Posbility: 0.4277
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0077
Next Token :   , Posbility: 0.0111
Next Token :      , Posbility: 0.0143
Next Token :     , Posbility: 0.4180
Next Token :       , Posbility: 0.5352
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0398
Next Token : x, Posbility: 0.0654
Next Token : [, Posbility: 0.1226
Next Token : List, Posbility: 0.1226
Next Token : let, Posbility: 0.5508
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  new, Posbility: 0.0114
Next Token :  l, Posbility: 0.0129
Next Token :  open, Posbility: 0.0165
Next Token :  rec, Posbility: 0.3770
Next Token :  , Posbility: 0.4258
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0266
Next Token : r, Posbility: 0.0388
Next Token : n, Posbility: 0.0439
Next Token : y, Posbility: 0.2520
Next Token : x, Posbility: 0.2520
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0337
Next Token : _, Posbility: 0.0557
Next Token : ', Posbility: 0.0630
Next Token :  =, Posbility: 0.0811
Next Token : s, Posbility: 0.5977
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0796
Next Token : _, Posbility: 0.1309
Next Token : 2, Posbility: 0.1309
Next Token :  =, Posbility: 0.2158
Next Token : ', Posbility: 0.3555
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  , Posbility: 0.0005
Next Token : ', Posbility: 0.0010
Next Token : =, Posbility: 0.0012
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  remove, Posbility: 0.0048
Next Token :  filter, Posbility: 0.0048
Next Token :  [, Posbility: 0.0167
Next Token : 
, Posbility: 0.0354
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0069
Next Token : Array, Posbility: 0.0114
Next Token : combination, Posbility: 0.0309
Next Token : List, Posbility: 0.2012
Next Token : x, Posbility: 0.7031
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0003
Next Token :  |, Posbility: 0.0005
Next Token : ::, Posbility: 0.0005
Next Token :  , Posbility: 0.0229
Next Token : s, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  >>, Posbility: 0.0073
Next Token : 
, Posbility: 0.0198
Next Token :  |, Posbility: 0.0254
Next Token :  , Posbility: 0.0889
Next Token :  in, Posbility: 0.8398
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0005
Next Token : 

, Posbility: 0.0005
Next Token :   , Posbility: 0.0006
Next Token :  , Posbility: 0.0159
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0008
Next Token :     , Posbility: 0.0015
Next Token :         , Posbility: 0.0051
Next Token :      , Posbility: 0.0123
Next Token :       , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0630
Next Token : [, Posbility: 0.0913
Next Token : x, Posbility: 0.1172
Next Token : List, Posbility: 0.1172
Next Token : let, Posbility: 0.4102
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  result, Posbility: 0.0089
Next Token :  new, Posbility: 0.0114
Next Token :  res, Posbility: 0.0129
Next Token :  rec, Posbility: 0.2285
Next Token :  , Posbility: 0.6211
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : combination, Posbility: 0.0208
Next Token : com, Posbility: 0.0234
Next Token : f, Posbility: 0.0302
Next Token : y, Posbility: 0.1533
Next Token : x, Posbility: 0.5352
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0265
Next Token : _, Posbility: 0.0339
Next Token : ', Posbility: 0.1953
Next Token :  =, Posbility: 0.2520
Next Token : s, Posbility: 0.4141
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0361
Next Token : _, Posbility: 0.0408
Next Token : 2, Posbility: 0.0464
Next Token :  =, Posbility: 0.1836
Next Token : ', Posbility: 0.6406
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0070
Next Token : ',, Posbility: 0.0070
Next Token : _, Posbility: 0.0354
Next Token :  =, Posbility: 0.2969
Next Token : ', Posbility: 0.6289
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token :   , Posbility: 0.0005
Next Token : ', Posbility: 0.0017
Next Token :  , Posbility: 0.0025
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0057
Next Token :  filter, Posbility: 0.0120
Next Token :  [, Posbility: 0.0198
Next Token : 
, Posbility: 0.0889
Next Token :  , Posbility: 0.8438
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0118
Next Token : Array, Posbility: 0.0194
Next Token : combination, Posbility: 0.0874
Next Token : List, Posbility: 0.3457
Next Token : x, Posbility: 0.4434
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0012
Next Token : ::, Posbility: 0.0020
Next Token :  |, Posbility: 0.0034
Next Token :  , Posbility: 0.0527
Next Token : s, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0094
Next Token :  , Posbility: 0.0121
Next Token :  |, Posbility: 0.0176
Next Token :  in, Posbility: 0.4004
Next Token : ', Posbility: 0.5117
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0090
Next Token : 
, Posbility: 0.0101
Next Token :  , Posbility: 0.0312
Next Token :  |, Posbility: 0.1094
Next Token :  in, Posbility: 0.8086
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0003
Next Token :  [, Posbility: 0.0004
Next Token : 

, Posbility: 0.0024
Next Token :  , Posbility: 0.0124
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0006
Next Token :     , Posbility: 0.0007
Next Token :         , Posbility: 0.0012
Next Token :      , Posbility: 0.0067
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0559
Next Token : List, Posbility: 0.0718
Next Token : x, Posbility: 0.1187
Next Token : [, Posbility: 0.1338
Next Token : let, Posbility: 0.4688
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  new, Posbility: 0.0066
Next Token :  result, Posbility: 0.0066
Next Token :  res, Posbility: 0.0124
Next Token :  rec, Posbility: 0.2812
Next Token :  , Posbility: 0.5977
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0131
Next Token : com, Posbility: 0.0131
Next Token : f, Posbility: 0.0168
Next Token : y, Posbility: 0.0854
Next Token : x, Posbility: 0.7148
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0117
Next Token : 1, Posbility: 0.0150
Next Token : ', Posbility: 0.1104
Next Token :  =, Posbility: 0.1816
Next Token : s, Posbility: 0.6367
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0147
Next Token : 1, Posbility: 0.0147
Next Token : 2, Posbility: 0.0354
Next Token :  =, Posbility: 0.0850
Next Token : ', Posbility: 0.8047
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0031
Next Token :  , Posbility: 0.0045
Next Token : ',, Posbility: 0.0045
Next Token :  =, Posbility: 0.1157
Next Token : ', Posbility: 0.8555
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0025
Next Token : ',, Posbility: 0.0042
Next Token :  , Posbility: 0.0054
Next Token :  =, Posbility: 0.1777
Next Token : ', Posbility: 0.7969
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs'''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0014
Next Token : s, Posbility: 0.0014
Next Token : 1, Posbility: 0.0039
Next Token : ', Posbility: 0.0256
Next Token :  =, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0005
Next Token : 
, Posbility: 0.0065
Next Token :  [, Posbility: 0.0065
Next Token :  [], Posbility: 0.0138
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0008
Next Token : (, Posbility: 0.0027
Next Token : combination, Posbility: 0.0044
Next Token : List, Posbility: 0.0225
Next Token : x, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0003
Next Token : ', Posbility: 0.0006
Next Token :  , Posbility: 0.0012
Next Token :  in, Posbility: 0.0036
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ',, Posbility: 0.0012
Next Token :  '', Posbility: 0.0023
Next Token :  in, Posbility: 0.0151
Next Token : ''', Posbility: 0.0410
Next Token : ', Posbility: 0.9336
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0013
Next Token :  |, Posbility: 0.0015
Next Token : ''', Posbility: 0.0051
Next Token :  in, Posbility: 0.3164
Next Token : ', Posbility: 0.6719
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 0.0006
Next Token :  |, Posbility: 0.0006
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token : 

, Posbility: 0.0041
Next Token :  , Posbility: 0.0041
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0010
Next Token :   , Posbility: 0.0010
Next Token :         , Posbility: 0.0013
Next Token :      , Posbility: 0.0124
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0537
Next Token : combination, Posbility: 0.0537
Next Token : x, Posbility: 0.0688
Next Token : [, Posbility: 0.1875
Next Token : let, Posbility: 0.5078
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0041
Next Token :  result, Posbility: 0.0077
Next Token :  res, Posbility: 0.0112
Next Token :  rec, Posbility: 0.1206
Next Token :  , Posbility: 0.7891
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0052
Next Token : f, Posbility: 0.0086
Next Token : combination, Posbility: 0.0086
Next Token : y, Posbility: 0.0339
Next Token : x, Posbility: 0.8750
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0034
Next Token : x, Posbility: 0.0043
Next Token : ', Posbility: 0.0413
Next Token :  =, Posbility: 0.0986
Next Token : s, Posbility: 0.8281
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0031
Next Token :  =, Posbility: 0.0065
Next Token : """, Posbility: 0.0201
Next Token : ', Posbility: 0.3555
Next Token : ''', Posbility: 0.5859
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0050
Next Token :  =, Posbility: 0.0120
Next Token : 1, Posbility: 0.0175
Next Token : ''', Posbility: 0.1001
Next Token : ', Posbility: 0.8398
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0005
Next Token : =, Posbility: 0.0007
Next Token :  in, Posbility: 0.0010
Next Token : ', Posbility: 0.0036
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0001
Next Token : 
, Posbility: 0.0010
Next Token :  [, Posbility: 0.0010
Next Token :  [], Posbility: 0.0028
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Com, Posbility: 0.0001
Next Token : combination, Posbility: 0.0004
Next Token : (, Posbility: 0.0012
Next Token : List, Posbility: 0.0019
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  in, Posbility: 0.0004
Next Token : ', Posbility: 0.0007
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token :  '', Posbility: 0.0011
Next Token : â€™, Posbility: 0.0012
Next Token : ''', Posbility: 0.3750
Next Token : ', Posbility: 0.6172
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â€™, Posbility: 0.0011
Next Token :  '', Posbility: 0.0056
Next Token :  in, Posbility: 0.0469
Next Token : ''', Posbility: 0.2100
Next Token : ', Posbility: 0.7344
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token : ', Posbility: 0.0007
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token : 

, Posbility: 0.0059
Next Token :  , Posbility: 0.0059
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0010
Next Token :   , Posbility: 0.0013
Next Token :         , Posbility: 0.0019
Next Token :      , Posbility: 0.0096
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0425
Next Token : combination, Posbility: 0.0481
Next Token : x, Posbility: 0.0544
Next Token : [, Posbility: 0.2158
Next Token : let, Posbility: 0.5156
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0051
Next Token :  result, Posbility: 0.0084
Next Token :  res, Posbility: 0.0138
Next Token :  rec, Posbility: 0.1484
Next Token :  , Posbility: 0.7539
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0060
Next Token : combination, Posbility: 0.0067
Next Token : f, Posbility: 0.0087
Next Token : y, Posbility: 0.0302
Next Token : x, Posbility: 0.8828
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0035
Next Token : 1, Posbility: 0.0045
Next Token : ', Posbility: 0.0330
Next Token :  =, Posbility: 0.0894
Next Token : s, Posbility: 0.8477
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0069
Next Token : """, Posbility: 0.0089
Next Token :  =, Posbility: 0.0165
Next Token : ''', Posbility: 0.3750
Next Token : ', Posbility: 0.5469
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0009
Next Token : ", Posbility: 0.0010
Next Token : """, Posbility: 0.0039
Next Token : ', Posbility: 0.4023
Next Token : ''', Posbility: 0.5859
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0052
Next Token : 1, Posbility: 0.0143
Next Token : ''', Posbility: 0.0640
Next Token :  =, Posbility: 0.1055
Next Token : ', Posbility: 0.7812
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0011
Next Token : 1, Posbility: 0.0016
Next Token :  in, Posbility: 0.0021
Next Token : ', Posbility: 0.0369
Next Token :  =, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  [, Posbility: 0.0012
Next Token :  [], Posbility: 0.0032
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0001
Next Token : combination, Posbility: 0.0002
Next Token : (, Posbility: 0.0010
Next Token : List, Posbility: 0.0010
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : ', Posbility: 0.0003
Next Token :  in, Posbility: 0.0008
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â€™, Posbility: 0.0003
Next Token :  '', Posbility: 0.0003
Next Token : 1, Posbility: 0.0021
Next Token : ''', Posbility: 0.0203
Next Token : ', Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â€™, Posbility: 0.0004
Next Token :  '', Posbility: 0.0024
Next Token :  in, Posbility: 0.0107
Next Token : ''', Posbility: 0.0177
Next Token : ', Posbility: 0.9688
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0005
Next Token :  '', Posbility: 0.0034
Next Token : ''', Posbility: 0.0082
Next Token : ', Posbility: 0.0415
Next Token :  in, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0002
Next Token :  [, Posbility: 0.0004
Next Token : 

, Posbility: 0.0045
Next Token :  , Posbility: 0.0096
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0008
Next Token :         , Posbility: 0.0013
Next Token :   , Posbility: 0.0017
Next Token :      , Posbility: 0.0096
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0320
Next Token : combination, Posbility: 0.0320
Next Token : x, Posbility: 0.0413
Next Token : [, Posbility: 0.1631
Next Token : let, Posbility: 0.6445
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0028
Next Token :  result, Posbility: 0.0046
Next Token :  res, Posbility: 0.0076
Next Token :  rec, Posbility: 0.0718
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0030
Next Token : f, Posbility: 0.0030
Next Token : combination, Posbility: 0.0030
Next Token : y, Posbility: 0.0135
Next Token : x, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0011
Next Token : 1, Posbility: 0.0016
Next Token : ', Posbility: 0.0118
Next Token :  =, Posbility: 0.0413
Next Token : s, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0028
Next Token :  =, Posbility: 0.0097
Next Token : 1, Posbility: 0.0233
Next Token : ''', Posbility: 0.0635
Next Token : ', Posbility: 0.8750
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0004
Next Token : """, Posbility: 0.0006
Next Token : ", Posbility: 0.0010
Next Token : ''', Posbility: 0.1318
Next Token : ', Posbility: 0.8594
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ~~~, Posbility: 0.0002
Next Token :  '', Posbility: 0.0003
Next Token : """, Posbility: 0.0005
Next Token : ', Posbility: 0.1475
Next Token : ''', Posbility: 0.8516
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0034
Next Token : x, Posbility: 0.0034
Next Token : ''', Posbility: 0.0154
Next Token : ', Posbility: 0.3086
Next Token :  =, Posbility: 0.6562
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  [, Posbility: 0.0012
Next Token :  [], Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0001
Next Token : combination, Posbility: 0.0001
Next Token : List, Posbility: 0.0007
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token :  in, Posbility: 0.0022
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ''', Posbility: 0.0017
Next Token : 1, Posbility: 0.0028
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0002
Next Token :  '', Posbility: 0.0007
Next Token : ''', Posbility: 0.0010
Next Token :  in, Posbility: 0.0259
Next Token : ', Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  and, Posbility: 0.0003
Next Token : ', Posbility: 0.0004
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token : 

, Posbility: 0.0025
Next Token :  , Posbility: 0.0067
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0004
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 0.0010
Next Token :      , Posbility: 0.0041
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0183
Next Token : combination, Posbility: 0.0208
Next Token : x, Posbility: 0.0267
Next Token : [, Posbility: 0.0933
Next Token : let, Posbility: 0.7812
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0008
Next Token :  result, Posbility: 0.0014
Next Token :  res, Posbility: 0.0027
Next Token :  rec, Posbility: 0.0255
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0009
Next Token : combination, Posbility: 0.0010
Next Token : (, Posbility: 0.0013
Next Token : y, Posbility: 0.0045
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : 1, Posbility: 0.0005
Next Token : ', Posbility: 0.0040
Next Token :  =, Posbility: 0.0140
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0011
Next Token :  =, Posbility: 0.0064
Next Token : ''', Posbility: 0.0120
Next Token : 1, Posbility: 0.0198
Next Token : ', Posbility: 0.9492
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0001
Next Token : ", Posbility: 0.0003
Next Token :  =, Posbility: 0.0008
Next Token : ''', Posbility: 0.0179
Next Token : ', Posbility: 0.9805
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token : ```, Posbility: 0.0002
Next Token :  '', Posbility: 0.0007
Next Token : ', Posbility: 0.0532
Next Token : ''', Posbility: 0.9453
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0004
Next Token : x, Posbility: 0.0004
Next Token : ''', Posbility: 0.0027
Next Token : ', Posbility: 0.0159
Next Token :  =, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  [, Posbility: 0.0004
Next Token :  [], Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : head, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  in, Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  '', Posbility: 0.0001
Next Token : ''', Posbility: 0.0002
Next Token : 1, Posbility: 0.0022
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0001
Next Token : ''', Posbility: 0.0002
Next Token :  '', Posbility: 0.0004
Next Token :  in, Posbility: 0.0374
Next Token : ', Posbility: 0.9609
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token : 

, Posbility: 0.0015
Next Token :  , Posbility: 0.0032
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 0.0007
Next Token :      , Posbility: 0.0025
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0109
Next Token : x, Posbility: 0.0159
Next Token : combination, Posbility: 0.0159
Next Token : [, Posbility: 0.0554
Next Token : let, Posbility: 0.8672
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0004
Next Token :  result, Posbility: 0.0008
Next Token :  res, Posbility: 0.0015
Next Token :  rec, Posbility: 0.0123
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0005
Next Token : c, Posbility: 0.0005
Next Token : (, Posbility: 0.0009
Next Token : y, Posbility: 0.0022
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token : ', Posbility: 0.0022
Next Token :  =, Posbility: 0.0085
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0004
Next Token :  =, Posbility: 0.0035
Next Token : ''', Posbility: 0.0035
Next Token : 1, Posbility: 0.0096
Next Token : ', Posbility: 0.9805
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0001
Next Token : ", Posbility: 0.0001
Next Token :  =, Posbility: 0.0007
Next Token : ''', Posbility: 0.0046
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ``, Posbility: 0.0002
Next Token : $$, Posbility: 0.0002
Next Token :  '', Posbility: 0.0005
Next Token : ', Posbility: 0.0124
Next Token : ''', Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token : ''', Posbility: 0.0004
Next Token : ', Posbility: 0.0012
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token :  [], Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0001
Next Token : 1, Posbility: 0.0010
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0001
Next Token : ", Posbility: 0.0001
Next Token :  '', Posbility: 0.0003
Next Token :  in, Posbility: 0.0374
Next Token : ', Posbility: 0.9609
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token : 

, Posbility: 0.0013
Next Token :  , Posbility: 0.0022
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 0.0006
Next Token :      , Posbility: 0.0017
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0089
Next Token : x, Posbility: 0.0114
Next Token : combination, Posbility: 0.0114
Next Token : [, Posbility: 0.0398
Next Token : let, Posbility: 0.9023
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0003
Next Token :  result, Posbility: 0.0005
Next Token :  res, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0067
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0004
Next Token : c, Posbility: 0.0004
Next Token : (, Posbility: 0.0007
Next Token : y, Posbility: 0.0017
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token : ', Posbility: 0.0013
Next Token :  =, Posbility: 0.0059
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : ''', Posbility: 0.0017
Next Token :  =, Posbility: 0.0024
Next Token : 1, Posbility: 0.0059
Next Token : ', Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token :  =, Posbility: 0.0004
Next Token : ''', Posbility: 0.0019
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ``, Posbility: 0.0002
Next Token : $$, Posbility: 0.0002
Next Token :  '', Posbility: 0.0005
Next Token : ', Posbility: 0.0059
Next Token : ''', Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : ''', Posbility: 0.0002
Next Token : ', Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0007
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token :  '', Posbility: 0.0002
Next Token :  in, Posbility: 0.0374
Next Token : ', Posbility: 0.9609
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token : 

, Posbility: 0.0012
Next Token :  , Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 0.0004
Next Token :      , Posbility: 0.0015
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0080
Next Token : x, Posbility: 0.0090
Next Token : combination, Posbility: 0.0090
Next Token : [, Posbility: 0.0315
Next Token : let, Posbility: 0.9219
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0002
Next Token :  result, Posbility: 0.0004
Next Token :  res, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0046
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : c, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token : ', Posbility: 0.0009
Next Token :  =, Posbility: 0.0041
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : ''', Posbility: 0.0010
Next Token :  =, Posbility: 0.0022
Next Token : 1, Posbility: 0.0041
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token :  =, Posbility: 0.0004
Next Token : ''', Posbility: 0.0013
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0001
Next Token : ``, Posbility: 0.0002
Next Token :  '', Posbility: 0.0005
Next Token : ', Posbility: 0.0041
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ''', Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0004
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token :  '', Posbility: 0.0001
Next Token :  in, Posbility: 0.0330
Next Token : ', Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token : 

, Posbility: 0.0012
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 0.0004
Next Token :      , Posbility: 0.0017
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0063
Next Token : combination, Posbility: 0.0063
Next Token : x, Posbility: 0.0072
Next Token : [, Posbility: 0.0250
Next Token : let, Posbility: 0.9375
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0001
Next Token :  result, Posbility: 0.0002
Next Token :  res, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0028
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : c, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 0.0009
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0006
Next Token :  =, Posbility: 0.0032
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : ''', Posbility: 0.0006
Next Token :  =, Posbility: 0.0017
Next Token : 1, Posbility: 0.0028
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  =, Posbility: 0.0003
Next Token : ''', Posbility: 0.0008
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0001
Next Token : ``, Posbility: 0.0002
Next Token :  '', Posbility: 0.0004
Next Token : ', Posbility: 0.0025
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ''', Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0003
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token :  '', Posbility: 0.0001
Next Token :  in, Posbility: 0.0260
Next Token : ', Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :      , Posbility: 0.0013
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0063
Next Token : combination, Posbility: 0.0063
Next Token : x, Posbility: 0.0072
Next Token : [, Posbility: 0.0221
Next Token : let, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  result, Posbility: 0.0002
Next Token :  res, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0028
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0007
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0006
Next Token :  =, Posbility: 0.0025
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : ''', Posbility: 0.0006
Next Token :  =, Posbility: 0.0019
Next Token : 1, Posbility: 0.0036
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : ''', Posbility: 0.0007
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0001
Next Token : ``, Posbility: 0.0002
Next Token :  '', Posbility: 0.0005
Next Token : ', Posbility: 0.0022
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0002
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token :  '', Posbility: 0.0001
Next Token :  in, Posbility: 0.0293
Next Token : ', Posbility: 0.9688
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :      , Posbility: 0.0017
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : combination, Posbility: 0.0056
Next Token : x, Posbility: 0.0064
Next Token : (, Posbility: 0.0072
Next Token : [, Posbility: 0.0197
Next Token : let, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0001
Next Token :  result, Posbility: 0.0002
Next Token :  res, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : c, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0006
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0005
Next Token :  =, Posbility: 0.0022
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : ''', Posbility: 0.0004
Next Token :  =, Posbility: 0.0015
Next Token : 1, Posbility: 0.0022
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : ''', Posbility: 0.0006
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0001
Next Token : ``, Posbility: 0.0002
Next Token :  '', Posbility: 0.0005
Next Token : ', Posbility: 0.0019
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token :  '', Posbility: 0.0001
Next Token :  in, Posbility: 0.0260
Next Token : ', Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :      , Posbility: 0.0015
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : combination, Posbility: 0.0050
Next Token : (, Posbility: 0.0064
Next Token : x, Posbility: 0.0072
Next Token : [, Posbility: 0.0197
Next Token : let, Posbility: 0.9492
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : c, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0005
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0006
Next Token :  =, Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : ''', Posbility: 0.0004
Next Token :  =, Posbility: 0.0013
Next Token : 1, Posbility: 0.0019
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : ''', Posbility: 0.0006
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0001
Next Token : ``, Posbility: 0.0002
Next Token :  '', Posbility: 0.0006
Next Token : ', Posbility: 0.0022
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  '', Posbility: 0.0001
Next Token :  in, Posbility: 0.0140
Next Token : ', Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :      , Posbility: 0.0015
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : combination, Posbility: 0.0044
Next Token : (, Posbility: 0.0057
Next Token : x, Posbility: 0.0057
Next Token : [, Posbility: 0.0154
Next Token : let, Posbility: 0.9570
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : c, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0005
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0004
Next Token :  =, Posbility: 0.0015
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : ''', Posbility: 0.0003
Next Token :  =, Posbility: 0.0012
Next Token : 1, Posbility: 0.0019
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : ''', Posbility: 0.0005
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0001
Next Token : ``, Posbility: 0.0003
Next Token :  '', Posbility: 0.0005
Next Token : ', Posbility: 0.0019
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  '', Posbility: 0.0001
Next Token : ", Posbility: 0.0001
Next Token :  in, Posbility: 0.0204
Next Token : ', Posbility: 0.9805
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :      , Posbility: 0.0015
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : combination, Posbility: 0.0039
Next Token : (, Posbility: 0.0057
Next Token : x, Posbility: 0.0057
Next Token : [, Posbility: 0.0137
Next Token : let, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : c, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0005
Next Token :  =, Posbility: 0.0015
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : ''', Posbility: 0.0003
Next Token :  =, Posbility: 0.0010
Next Token : 1, Posbility: 0.0019
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : ''', Posbility: 0.0006
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0001
Next Token : ``, Posbility: 0.0002
Next Token :  '', Posbility: 0.0006
Next Token : ', Posbility: 0.0017
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  '', Posbility: 0.0001
Next Token : ", Posbility: 0.0001
Next Token :  in, Posbility: 0.0140
Next Token : ', Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :      , Posbility: 0.0015
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : combination, Posbility: 0.0035
Next Token : (, Posbility: 0.0057
Next Token : x, Posbility: 0.0057
Next Token : [, Posbility: 0.0137
Next Token : let, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : c, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0004
Next Token :  =, Posbility: 0.0015
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : ''', Posbility: 0.0003
Next Token :  =, Posbility: 0.0010
Next Token : 1, Posbility: 0.0017
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : ''', Posbility: 0.0004
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0001
Next Token : ``, Posbility: 0.0003
Next Token :  '', Posbility: 0.0004
Next Token : ', Posbility: 0.0015
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token :  '', Posbility: 0.0001
Next Token :  in, Posbility: 0.0204
Next Token : ', Posbility: 0.9805
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  int, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :      , Posbility: 0.0015
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : combination, Posbility: 0.0031
Next Token : (, Posbility: 0.0051
Next Token : x, Posbility: 0.0057
Next Token : [, Posbility: 0.0121
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : c, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0004
Next Token :  =, Posbility: 0.0010
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : ''', Posbility: 0.0003
Next Token :  =, Posbility: 0.0010
Next Token : 1, Posbility: 0.0015
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : ''', Posbility: 0.0005
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0001
Next Token : ``, Posbility: 0.0003
Next Token :  '', Posbility: 0.0005
Next Token : ', Posbility: 0.0015
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token :  in, Posbility: 0.0076
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0008
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :      , Posbility: 0.0015
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : combination, Posbility: 0.0031
Next Token : (, Posbility: 0.0051
Next Token : x, Posbility: 0.0051
Next Token : [, Posbility: 0.0121
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : c, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0004
Next Token :  =, Posbility: 0.0012
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : ''', Posbility: 0.0003
Next Token :  =, Posbility: 0.0008
Next Token : 1, Posbility: 0.0019
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : ''', Posbility: 0.0004
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : ``, Posbility: 0.0003
Next Token :  '', Posbility: 0.0006
Next Token : ', Posbility: 0.0017
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token :  in, Posbility: 0.0159
Next Token : ', Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :      , Posbility: 0.0015
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : combination, Posbility: 0.0031
Next Token : x, Posbility: 0.0045
Next Token : (, Posbility: 0.0051
Next Token : [, Posbility: 0.0095
Next Token : let, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : c, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0004
Next Token :  =, Posbility: 0.0010
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : ''', Posbility: 0.0003
Next Token :  =, Posbility: 0.0007
Next Token : 1, Posbility: 0.0013
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : ''', Posbility: 0.0004
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : ``, Posbility: 0.0003
Next Token :  '', Posbility: 0.0005
Next Token : ', Posbility: 0.0022
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : `, Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  in, Posbility: 0.0140
Next Token : ', Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :      , Posbility: 0.0017
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : combination, Posbility: 0.0024
Next Token : x, Posbility: 0.0040
Next Token : (, Posbility: 0.0045
Next Token : [, Posbility: 0.0084
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : c, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0003
Next Token :  =, Posbility: 0.0009
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : ''', Posbility: 0.0002
Next Token :  =, Posbility: 0.0007
Next Token : 1, Posbility: 0.0017
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : ''', Posbility: 0.0005
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : ``, Posbility: 0.0003
Next Token :  '', Posbility: 0.0004
Next Token : ', Posbility: 0.0015
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : `, Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  in, Posbility: 0.0097
Next Token : ', Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :      , Posbility: 0.0015
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : combination, Posbility: 0.0024
Next Token : x, Posbility: 0.0045
Next Token : (, Posbility: 0.0051
Next Token : [, Posbility: 0.0095
Next Token : let, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : c, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0003
Next Token :  =, Posbility: 0.0008
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ''', Posbility: 0.0002
Next Token :  =, Posbility: 0.0006
Next Token : 1, Posbility: 0.0013
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : ''', Posbility: 0.0004
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0001
Next Token : ``, Posbility: 0.0003
Next Token :  '', Posbility: 0.0006
Next Token : ', Posbility: 0.0015
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : `, Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token :  in, Posbility: 0.0110
Next Token : ', Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :      , Posbility: 0.0019
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0017
Next Token : x, Posbility: 0.0035
Next Token : (, Posbility: 0.0045
Next Token : [, Posbility: 0.0084
Next Token : let, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  res, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : c, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0003
Next Token :  =, Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : ''', Posbility: 0.0002
Next Token :  =, Posbility: 0.0006
Next Token : 1, Posbility: 0.0017
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : ''', Posbility: 0.0004
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0001
Next Token : ``, Posbility: 0.0002
Next Token :  '', Posbility: 0.0005
Next Token : ', Posbility: 0.0015
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : `, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  in, Posbility: 0.0067
Next Token : ', Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :      , Posbility: 0.0015
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0019
Next Token : x, Posbility: 0.0045
Next Token : (, Posbility: 0.0051
Next Token : [, Posbility: 0.0084
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0000
Next Token :  l, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : c, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0002
Next Token :  =, Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ''', Posbility: 0.0002
Next Token :  =, Posbility: 0.0006
Next Token : 1, Posbility: 0.0015
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : ''', Posbility: 0.0004
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0001
Next Token : ``, Posbility: 0.0002
Next Token :  '', Posbility: 0.0005
Next Token : ', Posbility: 0.0013
Next Token : ''', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : ''', Posbility: 0.0013
Next Token :  , Posbility: 0.0015
Next Token :  in, Posbility: 0.0109
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  ', Posbility: 0.0001
Next Token :  [, Posbility: 0.0005
Next Token :  [], Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0003
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token : ', Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0007
Next Token : ", Posbility: 0.0008
Next Token : ``, Posbility: 0.0009
Next Token : ''', Posbility: 0.0596
Next Token : ', Posbility: 0.9336
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0014
Next Token :  '', Posbility: 0.0037
Next Token : ''', Posbility: 0.0275
Next Token :  in, Posbility: 0.0513
Next Token : ', Posbility: 0.9102
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0006
Next Token :  and, Posbility: 0.0009
Next Token : ''', Posbility: 0.0015
Next Token : ', Posbility: 0.0109
Next Token :  in, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0012
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0027
Next Token : (, Posbility: 0.0045
Next Token : x, Posbility: 0.0045
Next Token : [, Posbility: 0.0066
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  result, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token :  =, Posbility: 0.0008
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0019
Next Token : ``, Posbility: 0.0019
Next Token : """, Posbility: 0.0031
Next Token : ', Posbility: 0.2188
Next Token : ''', Posbility: 0.7656
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0009
Next Token : 2, Posbility: 0.0027
Next Token :  =, Posbility: 0.0057
Next Token : ''', Posbility: 0.0227
Next Token : ', Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0003
Next Token :   , Posbility: 0.0011
Next Token : ''', Posbility: 0.0062
Next Token : ', Posbility: 0.4336
Next Token :  =, Posbility: 0.5547
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0003
Next Token : 1, Posbility: 0.0009
Next Token : ``, Posbility: 0.0009
Next Token : ''', Posbility: 0.0228
Next Token : ', Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0003
Next Token :  '', Posbility: 0.0018
Next Token : ''', Posbility: 0.0030
Next Token :  in, Posbility: 0.1631
Next Token : ', Posbility: 0.8281
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0005
Next Token :  and, Posbility: 0.0005
Next Token : ''', Posbility: 0.0019
Next Token : ', Posbility: 0.0123
Next Token :  in, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0010
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0015
Next Token : x, Posbility: 0.0028
Next Token : (, Posbility: 0.0031
Next Token : [, Posbility: 0.0031
Next Token : let, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token :  =, Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0015
Next Token : """, Posbility: 0.0019
Next Token : ``, Posbility: 0.0025
Next Token : ', Posbility: 0.3711
Next Token : ''', Posbility: 0.6094
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs'''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0024
Next Token : 2, Posbility: 0.0051
Next Token : ''', Posbility: 0.0058
Next Token : ', Posbility: 0.4590
Next Token :  =, Posbility: 0.5195
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  ', Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : combination, Posbility: 0.0000
Next Token : f, Posbility: 0.0001
Next Token : List, Posbility: 0.0003
Next Token : (, Posbility: 0.0022
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : """, Posbility: 0.0006
Next Token : ", Posbility: 0.0014
Next Token : ``, Posbility: 0.0016
Next Token : ''', Posbility: 0.0752
Next Token : ', Posbility: 0.9180
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0006
Next Token :  '', Posbility: 0.0054
Next Token : ''', Posbility: 0.0079
Next Token :  in, Posbility: 0.0747
Next Token : ', Posbility: 0.9102
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0004
Next Token : ", Posbility: 0.0009
Next Token : ''', Posbility: 0.0010
Next Token : ', Posbility: 0.0028
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :      , Posbility: 0.0028
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : combination, Posbility: 0.0064
Next Token : (, Posbility: 0.0072
Next Token : x, Posbility: 0.0105
Next Token : [, Posbility: 0.0119
Next Token : let, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0002
Next Token :  v, Posbility: 0.0003
Next Token :  result, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : f, Posbility: 0.0002
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0012
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : ''', Posbility: 0.0002
Next Token : ', Posbility: 0.0015
Next Token :  =, Posbility: 0.0067
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : $$, Posbility: 0.0017
Next Token : ``, Posbility: 0.0046
Next Token :  =, Posbility: 0.0234
Next Token : ''', Posbility: 0.1738
Next Token : ', Posbility: 0.7773
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0016
Next Token :  '', Posbility: 0.0020
Next Token : ''', Posbility: 0.0659
Next Token :  =, Posbility: 0.4316
Next Token : ', Posbility: 0.4883
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0022
Next Token :  '', Posbility: 0.0053
Next Token : ''', Posbility: 0.1768
Next Token : ', Posbility: 0.2578
Next Token :  =, Posbility: 0.5430
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0001
Next Token :  ', Posbility: 0.0003
Next Token :  [, Posbility: 0.0015
Next Token :  [], Posbility: 0.0032
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0007
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ', Posbility: 0.0058
Next Token :  in, Posbility: 0.0201
Next Token : s, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0011
Next Token : 1, Posbility: 0.0014
Next Token :  in, Posbility: 0.0031
Next Token : ''', Posbility: 0.0227
Next Token : ', Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0012
Next Token :  '', Posbility: 0.0016
Next Token : ''', Posbility: 0.0034
Next Token :  in, Posbility: 0.3457
Next Token : ', Posbility: 0.6445
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs''
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0003
Next Token : ''', Posbility: 0.0003
Next Token :  and, Posbility: 0.0004
Next Token : ', Posbility: 0.0032
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 

, Posbility: 0.0009
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0003
Next Token :         , Posbility: 0.0003
Next Token :   , Posbility: 0.0004
Next Token :      , Posbility: 0.0076
Next Token :       , Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0142
Next Token : combination, Posbility: 0.0182
Next Token : x, Posbility: 0.0234
Next Token : [, Posbility: 0.0300
Next Token : let, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0004
Next Token :  v, Posbility: 0.0005
Next Token :  result, Posbility: 0.0008
Next Token :  rec, Posbility: 0.0059
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0005
Next Token : (, Posbility: 0.0006
Next Token : s, Posbility: 0.0013
Next Token : y, Posbility: 0.0019
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0004
Next Token :  , Posbility: 0.0007
Next Token : ', Posbility: 0.0064
Next Token :  =, Posbility: 0.0369
Next Token : s, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0017
Next Token : ''', Posbility: 0.0054
Next Token : 1, Posbility: 0.0952
Next Token :  =, Posbility: 0.3340
Next Token : ', Posbility: 0.5508
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0007
Next Token :  in, Posbility: 0.0027
Next Token : ''', Posbility: 0.0157
Next Token : ', Posbility: 0.2168
Next Token :  =, Posbility: 0.7578
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  ', Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0003
Next Token :  in, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0001
Next Token :  '', Posbility: 0.0001
Next Token : ''', Posbility: 0.0028
Next Token : 1, Posbility: 0.0075
Next Token : ', Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0002
Next Token : ", Posbility: 0.0003
Next Token :  and, Posbility: 0.0004
Next Token : ', Posbility: 0.4688
Next Token :  in, Posbility: 0.5312
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0002
Next Token :    , Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :      , Posbility: 0.0019
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0072
Next Token : x, Posbility: 0.0082
Next Token : combination, Posbility: 0.0118
Next Token : [, Posbility: 0.0134
Next Token : let, Posbility: 0.9414
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0002
Next Token :  result, Posbility: 0.0002
Next Token :  v, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : f, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0007
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0017
Next Token :  =, Posbility: 0.0110
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0018
Next Token : ''', Posbility: 0.0167
Next Token : 1, Posbility: 0.0454
Next Token :  =, Posbility: 0.2969
Next Token : ', Posbility: 0.6289
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0004
Next Token :  in, Posbility: 0.0011
Next Token : ''', Posbility: 0.0062
Next Token : ', Posbility: 0.0752
Next Token :  =, Posbility: 0.9141
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  ', Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0001
Next Token : ''', Posbility: 0.0004
Next Token :  in, Posbility: 0.0006
Next Token : 1, Posbility: 0.0017
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token :  and, Posbility: 0.0003
Next Token : ', Posbility: 0.0022
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :      , Posbility: 0.0009
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0039
Next Token : [, Posbility: 0.0057
Next Token : x, Posbility: 0.0065
Next Token : combination, Posbility: 0.0084
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ''', Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ', Posbility: 0.0006
Next Token :  =, Posbility: 0.0067
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0006
Next Token : ''', Posbility: 0.0129
Next Token : 1, Posbility: 0.0166
Next Token :  =, Posbility: 0.0579
Next Token : ', Posbility: 0.9062
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token :  in, Posbility: 0.0002
Next Token : ''', Posbility: 0.0021
Next Token : ', Posbility: 0.0228
Next Token :  =, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  ', Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0001
Next Token :  in, Posbility: 0.0009
Next Token : 1, Posbility: 0.0010
Next Token : ', Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : ', Posbility: 0.0004
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :      , Posbility: 0.0015
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0045
Next Token : combination, Posbility: 0.0045
Next Token : x, Posbility: 0.0065
Next Token : [, Posbility: 0.0084
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : ''', Posbility: 0.0001
Next Token : ', Posbility: 0.0012
Next Token :  =, Posbility: 0.0052
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =', Posbility: 0.0004
Next Token : ''', Posbility: 0.0063
Next Token : 1, Posbility: 0.0105
Next Token :  =, Posbility: 0.0366
Next Token : ', Posbility: 0.9414
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : ''', Posbility: 0.0015
Next Token : ', Posbility: 0.0124
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  ', Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token :  in, Posbility: 0.0004
Next Token : 1, Posbility: 0.0009
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :      , Posbility: 0.0015
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : combination, Posbility: 0.0035
Next Token : (, Posbility: 0.0040
Next Token : x, Posbility: 0.0058
Next Token : [, Posbility: 0.0058
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0007
Next Token :  =, Posbility: 0.0036
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =', Posbility: 0.0003
Next Token : ''', Posbility: 0.0050
Next Token : 1, Posbility: 0.0106
Next Token :  =, Posbility: 0.0288
Next Token : ', Posbility: 0.9531
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : ''', Posbility: 0.0017
Next Token : ', Posbility: 0.0159
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  ', Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : 1, Posbility: 0.0002
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs'
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :      , Posbility: 0.0013
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      
 score:False
Error type: noerr
---------------------------
Next Token : combination, Posbility: 0.0031
Next Token : (, Posbility: 0.0040
Next Token : x, Posbility: 0.0045
Next Token : [, Posbility: 0.0074
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0010
Next Token :  =, Posbility: 0.0036
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : =', Posbility: 0.0002
Next Token : ''', Posbility: 0.0040
Next Token : 1, Posbility: 0.0058
Next Token :  =, Posbility: 0.0157
Next Token : ', Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs'
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : â€™, Posbility: 0.0001
Next Token : ''', Posbility: 0.0013
Next Token : ', Posbility: 0.0124
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  ', Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = x
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs
 score:False
Error type: noerr
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : 1, Posbility: 0.0002
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs'
 score:False
Error type: noerr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :      , Posbility: 0.0019
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      
 score:False
Error type: noerr
---------------------------
Next Token : combination, Posbility: 0.0027
Next Token : (, Posbility: 0.0051
Next Token : [, Posbility: 0.0065
Next Token : x, Posbility: 0.0074
Next Token : let, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let x
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 0.0013
Next Token :  =, Posbility: 0.0032
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : =', Posbility: 0.0002
Next Token : ''', Posbility: 0.0035
Next Token : 1, Posbility: 0.0057
Next Token :  =, Posbility: 0.0227
Next Token : ', Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs'
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : â€™, Posbility: 0.0001
Next Token : ''', Posbility: 0.0012
Next Token : ', Posbility: 0.0097
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  ', Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs
 score:False
Error type: noerr
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs'
 score:False
Error type: noerr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :      , Posbility: 0.0019
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      
 score:False
Error type: noerr
---------------------------
Next Token : combination, Posbility: 0.0027
Next Token : (, Posbility: 0.0051
Next Token : x, Posbility: 0.0058
Next Token : [, Posbility: 0.0084
Next Token : let, Posbility: 0.9688
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ', Posbility: 0.0006
Next Token :  =, Posbility: 0.0028
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : =', Posbility: 0.0002
Next Token : ''', Posbility: 0.0031
Next Token : 1, Posbility: 0.0057
Next Token :  =, Posbility: 0.0227
Next Token : ', Posbility: 0.9648
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs'
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : â€™, Posbility: 0.0001
Next Token : ''', Posbility: 0.0012
Next Token : ', Posbility: 0.0140
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  ', Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  '', Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0003
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs'
 score:False
Error type: noerr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :      , Posbility: 0.0028
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      
 score:False
Error type: noerr
---------------------------
Next Token : combination, Posbility: 0.0027
Next Token : (, Posbility: 0.0045
Next Token : [, Posbility: 0.0051
Next Token : x, Posbility: 0.0066
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ', Posbility: 0.0006
Next Token :  =, Posbility: 0.0019
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : =', Posbility: 0.0002
Next Token : ''', Posbility: 0.0031
Next Token : 1, Posbility: 0.0051
Next Token :  =, Posbility: 0.0201
Next Token : ', Posbility: 0.9688
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs'
 score:False
Error type: noerr
---------------------------
Next Token : =, Posbility: 0.0000
Next Token : â€™, Posbility: 0.0001
Next Token : ''', Posbility: 0.0013
Next Token : ', Posbility: 0.0124
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  ', Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs
 score:False
Error type: noerr
---------------------------
Next Token :  '', Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs'
 score:False
Error type: noerr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :      , Posbility: 0.0028
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0021
Next Token : (, Posbility: 0.0045
Next Token : x, Posbility: 0.0058
Next Token : [, Posbility: 0.0058
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let
 score:False
Error type: noerr
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0001
Next Token :  result, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let x
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0009
Next Token :  =, Posbility: 0.0025
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs
 score:False
Error type: noerr
---------------------------
Next Token : =', Posbility: 0.0002
Next Token : ''', Posbility: 0.0027
Next Token : 1, Posbility: 0.0066
Next Token :  =, Posbility: 0.0139
Next Token : ', Posbility: 0.9766
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs'
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : â€™, Posbility: 0.0001
Next Token : ''', Posbility: 0.0012
Next Token : ', Posbility: 0.0110
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' =
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  ', Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs
 score:False
Error type: noerr
---------------------------
Next Token : `, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : ''', Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : ', Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs'
 score:False
Error type: noerr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find all possible combinations of the elements of a given list. *)
let rec combinations xs =
  match xs with
  | [] -> []
  | x :: xs ->
      let xs' = xs in
      let xs'' = xs' in
      let xs''' = xs'' in
      let xs'''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs''''' = xs'' in
      let xs'''' = xs'' in
      let xs''' = xs'' in
      let xs'' = xs'' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in
      let xs' = xs' in

 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>