code:
 (* Write a function to check if all values are same in a dictionary. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  all, Posbility: 0.0425
Next Token :  is, Posbility: 0.1484
Next Token :  , Posbility: 0.1484
Next Token :  check, Posbility: 0.1484
Next Token :  rec, Posbility: 0.3145
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  all, Posbility: 0.0398
Next Token :  same, Posbility: 0.0747
Next Token :  , Posbility: 0.2021
Next Token :  check, Posbility: 0.2021
Next Token :  is, Posbility: 0.2598
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0033
Next Token : -, Posbility: 0.0043
Next Token : All, Posbility: 0.0117
Next Token : Same, Posbility: 0.0247
Next Token : _, Posbility: 0.9258
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ident, Posbility: 0.0266
Next Token : dict, Posbility: 0.0342
Next Token : equal, Posbility: 0.0388
Next Token : all, Posbility: 0.3242
Next Token : same, Posbility: 0.4160
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0076
Next Token : (, Posbility: 0.0125
Next Token :  , Posbility: 0.2520
Next Token :  =, Posbility: 0.2520
Next Token : _, Posbility: 0.4141
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0308
Next Token : key, Posbility: 0.0396
Next Token : value, Posbility: 0.0947
Next Token : values, Posbility: 0.1377
Next Token : dict, Posbility: 0.2910
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0295
Next Token :  v, Posbility: 0.0295
Next Token : _, Posbility: 0.1328
Next Token :  =, Posbility: 0.2188
Next Token :  , Posbility: 0.4629
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : dic, Posbility: 0.0317
Next Token : x, Posbility: 0.0593
Next Token : (, Posbility: 0.1260
Next Token : dict, Posbility: 0.2070
Next Token : d, Posbility: 0.3867
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0242
Next Token :  a, Posbility: 0.0242
Next Token :  , Posbility: 0.0742
Next Token :  =, Posbility: 0.2598
Next Token : 1, Posbility: 0.5508
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0014
Next Token : d, Posbility: 0.0045
Next Token : _, Posbility: 0.0050
Next Token :  =, Posbility: 0.1299
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0004
Next Token : :, Posbility: 0.0004
Next Token : dict, Posbility: 0.0008
Next Token : (, Posbility: 0.0036
Next Token : d, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2,, Posbility: 0.0002
Next Token :  =, Posbility: 0.0004
Next Token : 0, Posbility: 0.0004
Next Token : 1, Posbility: 0.0006
Next Token : 2, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0117
Next Token :  k, Posbility: 0.0117
Next Token :  acc, Posbility: 0.0220
Next Token :  , Posbility: 0.0869
Next Token :  =, Posbility: 0.8242
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0031
Next Token :  function, Posbility: 0.0160
Next Token :  match, Posbility: 0.0435
Next Token :  , Posbility: 0.0557
Next Token : 
, Posbility: 0.8711
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0049
Next Token :    , Posbility: 0.0103
Next Token : 	, Posbility: 0.0103
Next Token :     , Posbility: 0.1426
Next Token :   , Posbility: 0.8203
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0131
Next Token : (, Posbility: 0.0277
Next Token : if, Posbility: 0.2324
Next Token : let, Posbility: 0.2637
Next Token : match, Posbility: 0.3828
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0039
Next Token : 
, Posbility: 0.0044
Next Token :  Hash, Posbility: 0.0056
Next Token :  String, Posbility: 0.0173
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0315
Next Token : Dict, Posbility: 0.0315
Next Token : Map, Posbility: 0.0518
Next Token : (, Posbility: 0.1807
Next Token : d, Posbility: 0.6328
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2., Posbility: 0.0089
Next Token : 2, Posbility: 0.0242
Next Token : 1., Posbility: 0.1787
Next Token : 1,, Posbility: 0.2949
Next Token : 1, Posbility: 0.4844
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0030
Next Token : [, Posbility: 0.0038
Next Token :  and, Posbility: 0.0151
Next Token :  , Posbility: 0.0249
Next Token :  with, Posbility: 0.9375
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0021
Next Token :  [], Posbility: 0.0023
Next Token :  , Posbility: 0.0093
Next Token :  {, Posbility: 0.0366
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0006
Next Token :       , Posbility: 0.0018
Next Token :    , Posbility: 0.0025
Next Token :     , Posbility: 0.0845
Next Token :   , Posbility: 0.9102
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0011
Next Token : [], Posbility: 0.0019
Next Token : [, Posbility: 0.0040
Next Token : {, Posbility: 0.0096
Next Token : |, Posbility: 0.9766
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0150
Next Token :  None, Posbility: 0.0593
Next Token :  [], Posbility: 0.0977
Next Token :  , Posbility: 0.3867
Next Token :  {, Posbility: 0.3867
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | {
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0156
Next Token : _, Posbility: 0.0228
Next Token : |, Posbility: 0.0376
Next Token :  , Posbility: 0.2451
Next Token : }, Posbility: 0.5898
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | {}
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0060
Next Token :  =>, Posbility: 0.0099
Next Token :  as, Posbility: 0.0210
Next Token :  |, Posbility: 0.0444
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | {} 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | {} |
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | {} as
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | {} =>
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | {} and
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0289
Next Token : d, Posbility: 0.0289
Next Token : Key, Posbility: 0.0327
Next Token : _, Posbility: 0.2139
Next Token : }, Posbility: 0.4004
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { }
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0077
Next Token :  =>, Posbility: 0.0098
Next Token :  as, Posbility: 0.0267
Next Token :  |, Posbility: 0.0442
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { } 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { } |
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { } as
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { } =>
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { }::
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { _
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0199
Next Token : :, Posbility: 0.0255
Next Token : ,, Posbility: 0.0476
Next Token :  |, Posbility: 0.1670
Next Token :  , Posbility: 0.6602
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { _ 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { _ |
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { _,
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { _:
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { _ =
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  :=, Posbility: 0.0293
Next Token : :, Posbility: 0.0703
Next Token : 1, Posbility: 0.1309
Next Token :  , Posbility: 0.1484
Next Token :  =, Posbility: 0.4590
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0093
Next Token :  a, Posbility: 0.0254
Next Token :  , Posbility: 0.1875
Next Token :  key, Posbility: 0.1875
Next Token :  k, Posbility: 0.5078
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key = k
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key = key
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key = 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key = a
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key = {
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0413
Next Token : (, Posbility: 0.0413
Next Token : ->, Posbility: 0.1631
Next Token : ::, Posbility: 0.1855
Next Token : :, Posbility: 0.4453
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key :
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0205
Next Token :  K, Posbility: 0.0205
Next Token :  key, Posbility: 0.0557
Next Token :  , Posbility: 0.4121
Next Token :  k, Posbility: 0.4121
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key : k
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key : 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key : key
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key : K
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key : a
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0140
Next Token :  name, Posbility: 0.0232
Next Token :  key, Posbility: 0.1040
Next Token :  , Posbility: 0.2832
Next Token :  k, Posbility: 0.4648
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key :: k
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key :: 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key :: key
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key :: name
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key :: a
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  value, Posbility: 0.0320
Next Token :  key, Posbility: 0.0320
Next Token :  v, Posbility: 0.0530
Next Token :  k, Posbility: 0.0874
Next Token :  , Posbility: 0.6445
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key -> 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key -> k
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key -> v
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key -> key
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key -> value
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key (
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : a, Posbility: 0.0374
Next Token : key, Posbility: 0.0542
Next Token : _, Posbility: 0.0615
Next Token : x, Posbility: 0.0698
Next Token : k, Posbility: 0.5820
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key (k
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key (x
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key (_
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key (key
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key (a
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key _
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0125
Next Token : ;, Posbility: 0.1182
Next Token :  =, Posbility: 0.1182
Next Token :  |, Posbility: 0.1338
Next Token :  , Posbility: 0.5312
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key _ 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key _ |
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key _ =
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key _;
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key _ as
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0143
Next Token :  :=, Posbility: 0.0304
Next Token : :, Posbility: 0.0569
Next Token :  =, Posbility: 0.4199
Next Token :  , Posbility: 0.4199
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0143
Next Token : <, Posbility: 0.0303
Next Token : ::, Posbility: 0.2539
Next Token : ->, Posbility: 0.2871
Next Token : :, Posbility: 0.3672
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 :
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0140
Next Token :  a, Posbility: 0.0297
Next Token :  value, Posbility: 0.0488
Next Token :  v, Posbility: 0.3613
Next Token :  , Posbility: 0.4629
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 : 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 : v
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 : value
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 : a
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 : {
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0084
Next Token :  a, Posbility: 0.0084
Next Token :  value, Posbility: 0.0625
Next Token :  v, Posbility: 0.1030
Next Token :  , Posbility: 0.7617
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 -> 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 -> v
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 -> value
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 -> a
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 -> {
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  key, Posbility: 0.0270
Next Token :  rest, Posbility: 0.0270
Next Token :  v, Posbility: 0.0942
Next Token :  k, Posbility: 0.0942
Next Token :  , Posbility: 0.6133
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 :: 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 :: k
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 :: v
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 :: rest
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 :: key
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : |, Posbility: 0.0049
Next Token :  , Posbility: 0.0063
Next Token : ->, Posbility: 0.0464
Next Token : >, Posbility: 0.0981
Next Token : -, Posbility: 0.8242
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <-
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0215
Next Token :  k, Posbility: 0.0454
Next Token :  value, Posbility: 0.0583
Next Token :  v, Posbility: 0.3359
Next Token :  , Posbility: 0.4316
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <- 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <- v
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <- value
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <- k
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <- a
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <>
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0049
Next Token :  ?, Posbility: 0.0062
Next Token :  value, Posbility: 0.0080
Next Token :  v, Posbility: 0.0192
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <> 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <> v
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <> value
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <> ?
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <> {
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0060
Next Token :  K, Posbility: 0.0078
Next Token :  value, Posbility: 0.0164
Next Token :  v, Posbility: 0.0347
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <-> 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <-> v
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <-> value
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <-> K
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <-> k
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 < 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <|
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0128
Next Token :  values, Posbility: 0.0165
Next Token :  ..., Posbility: 0.0239
Next Token : >, Posbility: 0.0947
Next Token :  , Posbility: 0.6992
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <| 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <|>
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0068
Next Token :  value, Posbility: 0.0077
Next Token :  v, Posbility: 0.0099
Next Token :  key, Posbility: 0.0112
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <|> 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <|> key
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <|> v
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <|> value
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <|> |
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <| ...
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <| values
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 <| v
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0137
Next Token :  |, Posbility: 0.0693
Next Token : ;, Posbility: 0.1475
Next Token :  , Posbility: 0.2422
Next Token : 1, Posbility: 0.4531
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 x1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0073
Next Token :  =, Posbility: 0.0476
Next Token :  |, Posbility: 0.1011
Next Token : ;, Posbility: 0.3516
Next Token :  , Posbility: 0.4531
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 x1 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 x1;
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 x1 |
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 x1 =
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 x1::
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 x 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 x;
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 x |
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 x =
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0205
Next Token :  a, Posbility: 0.0339
Next Token :  value, Posbility: 0.0559
Next Token :  v, Posbility: 0.4121
Next Token :  , Posbility: 0.4121
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 = 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 = v
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 = value
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 = a
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 = k
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1:
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0219
Next Token : v, Posbility: 0.0317
Next Token :  value, Posbility: 0.0408
Next Token :  , Posbility: 0.3008
Next Token :  v, Posbility: 0.4961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1: v
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1: 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1: value
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1:v
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1: a
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 :=
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0258
Next Token :  k, Posbility: 0.0332
Next Token :  value, Posbility: 0.0425
Next Token :  , Posbility: 0.3145
Next Token :  v, Posbility: 0.5195
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 := v
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 := 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 := value
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 := k
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1 := a
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1=
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : V, Posbility: 0.0287
Next Token : value, Posbility: 0.0369
Next Token : val, Posbility: 0.0537
Next Token : x, Posbility: 0.0688
Next Token : v, Posbility: 0.5078
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1=v
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1=x
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1=val
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1=value
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key1=V
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key:
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0212
Next Token :  v, Posbility: 0.0273
Next Token :  key, Posbility: 0.1226
Next Token :  k, Posbility: 0.3320
Next Token :  , Posbility: 0.3320
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key: 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key: k
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key: key
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key: v
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key: {
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key :=
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0189
Next Token :  v, Posbility: 0.0243
Next Token :  key, Posbility: 0.1396
Next Token :  , Posbility: 0.2314
Next Token :  k, Posbility: 0.4883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key := k
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key := 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key := key
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key := v
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { Key := a
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : iction, Posbility: 0.0189
Next Token :  , Posbility: 0.0312
Next Token :  |, Posbility: 0.0962
Next Token : 2, Posbility: 0.1089
Next Token : 1, Posbility: 0.6289
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0840
Next Token :  , Posbility: 0.1221
Next Token : _, Posbility: 0.1387
Next Token :  |, Posbility: 0.2012
Next Token : ::, Posbility: 0.2930
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0244
Next Token : d, Posbility: 0.0664
Next Token : k, Posbility: 0.0752
Next Token : _, Posbility: 0.2041
Next Token : hd, Posbility: 0.2969
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0476
Next Token :  |, Posbility: 0.1143
Next Token : 1, Posbility: 0.1299
Next Token : ;, Posbility: 0.1475
Next Token :  , Posbility: 0.4004
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0439
Next Token : :, Posbility: 0.1196
Next Token : }, Posbility: 0.1357
Next Token : ->, Posbility: 0.1973
Next Token : ::, Posbility: 0.4727
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd ::
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ?, Posbility: 0.0024
Next Token :  [], Posbility: 0.0024
Next Token :  rest, Posbility: 0.0073
Next Token :  ..., Posbility: 0.0107
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.1270
Next Token : tl, Posbility: 0.1270
Next Token : d, Posbility: 0.1436
Next Token : hd, Posbility: 0.2373
Next Token : t, Posbility: 0.2373
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  as, Posbility: 0.0078
Next Token : ;, Posbility: 0.0089
Next Token : 2, Posbility: 0.0308
Next Token :  , Posbility: 0.1221
Next Token : 1, Posbility: 0.7930
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ::, Posbility: 0.0251
Next Token :  =, Posbility: 0.0366
Next Token : ;, Posbility: 0.0776
Next Token :  |, Posbility: 0.0776
Next Token :  , Posbility: 0.7383
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : },, Posbility: 0.0208
Next Token : ;, Posbility: 0.0342
Next Token : ->, Posbility: 0.0933
Next Token : ::, Posbility: 0.1533
Next Token : }, Posbility: 0.6875
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 }
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0039
Next Token :  =>, Posbility: 0.0064
Next Token : ::, Posbility: 0.0082
Next Token :  |, Posbility: 0.0082
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -, Posbility: 0.0020
Next Token : ,, Posbility: 0.0060
Next Token : if, Posbility: 0.0305
Next Token : ::, Posbility: 0.4785
Next Token : ->, Posbility: 0.4785
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  {, Posbility: 0.0515
Next Token :  , Posbility: 0.0850
Next Token :  is, Posbility: 0.1797
Next Token :  match, Posbility: 0.1797
Next Token : 
, Posbility: 0.4883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :    , Posbility: 0.0396
Next Token :   , Posbility: 0.0508
Next Token :      , Posbility: 0.1216
Next Token :     , Posbility: 0.2930
Next Token :       , Posbility: 0.4824
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : d, Posbility: 0.0220
Next Token : (, Posbility: 0.0410
Next Token : let, Posbility: 0.2080
Next Token : if, Posbility: 0.2354
Next Token : match, Posbility: 0.4395
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  is, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :  {, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : head, Posbility: 0.0003
Next Token : (, Posbility: 0.0023
Next Token : hd, Posbility: 0.0063
Next Token : t, Posbility: 0.0469
Next Token : d, Posbility: 0.9414
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0003
Next Token : 2,, Posbility: 0.0003
Next Token : 2., Posbility: 0.0007
Next Token : 1, Posbility: 0.0293
Next Token : 2, Posbility: 0.9688
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token : ::, Posbility: 0.0008
Next Token :  {, Posbility: 0.0009
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token :  {, Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :        , Posbility: 0.0024
Next Token :           , Posbility: 0.0031
Next Token :         , Posbility: 0.0121
Next Token :      , Posbility: 0.0176
Next Token :       , Posbility: 0.9609
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      |
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  None, Posbility: 0.0004
Next Token :  [, Posbility: 0.0005
Next Token :   , Posbility: 0.0007
Next Token :  , Posbility: 0.0140
Next Token :  {, Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | {
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  {, Posbility: 0.0003
Next Token : }, Posbility: 0.0004
Next Token : hd, Posbility: 0.0007
Next Token : d, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : t, Posbility: 0.0013
Next Token : _, Posbility: 0.0050
Next Token : hd, Posbility: 0.0371
Next Token : d, Posbility: 0.9531
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : 3, Posbility: 0.0002
Next Token : ::, Posbility: 0.0002
Next Token : 1, Posbility: 0.0110
Next Token : 2, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : h, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : hd, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : ::, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : ;, Posbility: 0.0001
Next Token : }, Posbility: 0.0001
Next Token : :, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd ::
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token : t, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  {, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : d, Posbility: 0.0001
Next Token : u, Posbility: 0.0001
Next Token : hd, Posbility: 0.0002
Next Token : _, Posbility: 0.0012
Next Token : t, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 0, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 1, Posbility: 0.0036
Next Token : 2, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  |, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token : ;, Posbility: 0.0006
Next Token : }, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : };, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : },, Posbility: 0.0005
Next Token : ->, Posbility: 0.0017
Next Token : }, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 }
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  =>, Posbility: 0.0006
Next Token : 
, Posbility: 0.0009
Next Token :  when, Posbility: 0.0076
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : →, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : if, Posbility: 0.0015
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  true, Posbility: 0.0024
Next Token :  match, Posbility: 0.0031
Next Token :  , Posbility: 0.1021
Next Token :  is, Posbility: 0.2158
Next Token : 
, Posbility: 0.6641
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :            , Posbility: 0.0055
Next Token :        , Posbility: 0.0170
Next Token :         , Posbility: 0.0170
Next Token :          , Posbility: 0.3008
Next Token :           , Posbility: 0.6367
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0659
Next Token : match, Posbility: 0.1396
Next Token : let, Posbility: 0.1592
Next Token : hd, Posbility: 0.1797
Next Token : if, Posbility: 0.3809
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  is, Posbility: 0.0160
Next Token :  !, Posbility: 0.0160
Next Token :  String, Posbility: 0.0264
Next Token :  not, Posbility: 0.0435
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : let, Posbility: 0.0048
Next Token : d, Posbility: 0.0101
Next Token : (, Posbility: 0.0214
Next Token : t, Posbility: 0.0352
Next Token : hd, Posbility: 0.9062
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  !=, Posbility: 0.0035
Next Token :  ==, Posbility: 0.0074
Next Token :  ~, Posbility: 0.0259
Next Token :  , Posbility: 0.0903
Next Token :  =, Posbility: 0.8594
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  `, Posbility: 0.0011
Next Token :  key, Posbility: 0.0018
Next Token : :, Posbility: 0.0219
Next Token :  ", Posbility: 0.0359
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : head, Posbility: 0.0008
Next Token : h, Posbility: 0.0014
Next Token : t, Posbility: 0.0356
Next Token : d, Posbility: 0.0403
Next Token : hd, Posbility: 0.9180
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0201
Next Token :  and, Posbility: 0.0332
Next Token : ', Posbility: 0.0903
Next Token :  &&, Posbility: 0.3574
Next Token :  then, Posbility: 0.4590
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  {, Posbility: 0.0012
Next Token :  true, Posbility: 0.0019
Next Token :  , Posbility: 0.0557
Next Token :  is, Posbility: 0.4668
Next Token : 
, Posbility: 0.4668
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :          , Posbility: 0.0256
Next Token :             , Posbility: 0.0693
Next Token :               , Posbility: 0.1895
Next Token :            , Posbility: 0.1895
Next Token :              , Posbility: 0.5156
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
             
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0019
Next Token : let, Posbility: 0.0024
Next Token : t, Posbility: 0.0031
Next Token :  true, Posbility: 0.0040
Next Token :  is, Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  same, Posbility: 0.0000
Next Token : Same, Posbility: 0.0000
Next Token : same, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : all, Posbility: 0.0000
Next Token : sam, Posbility: 0.0000
Next Token : eq, Posbility: 0.0000
Next Token : equal, Posbility: 0.0001
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : rec, Posbility: 0.0001
Next Token : tree, Posbility: 0.0002
Next Token : value, Posbility: 0.0002
Next Token : list, Posbility: 0.0012
Next Token : dict, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  {, Posbility: 0.0009
Next Token :  ~, Posbility: 0.0012
Next Token : 
, Posbility: 0.0019
Next Token : (, Posbility: 0.0085
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : h, Posbility: 0.0003
Next Token : (, Posbility: 0.0168
Next Token : hd, Posbility: 0.0168
Next Token : d, Posbility: 0.0457
Next Token : t, Posbility: 0.9180
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1., Posbility: 0.0001
Next Token : 1,, Posbility: 0.0003
Next Token : 2, Posbility: 0.0052
Next Token : 1, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  is, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  ~, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : hd, Posbility: 0.0004
Next Token : (, Posbility: 0.0009
Next Token : d, Posbility: 0.0032
Next Token : t, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2), Posbility: 0.0001
Next Token : 2., Posbility: 0.0001
Next Token : 2,, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0041
Next Token :  &&, Posbility: 0.0060
Next Token : ;, Posbility: 0.0087
Next Token :  else, Posbility: 0.0732
Next Token : 
, Posbility: 0.8906
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :         , Posbility: 0.0010
Next Token :          , Posbility: 0.0015
Next Token :             , Posbility: 0.0031
Next Token :               , Posbility: 0.0085
Next Token :           , Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0002
Next Token : |, Posbility: 0.0003
Next Token : elif, Posbility: 0.0003
Next Token : @, Posbility: 0.0004
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  {, Posbility: 0.0025
Next Token :  true, Posbility: 0.0125
Next Token :  , Posbility: 0.0383
Next Token :  false, Posbility: 0.2500
Next Token : 
, Posbility: 0.6797
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :          , Posbility: 0.0049
Next Token :             , Posbility: 0.0056
Next Token :            , Posbility: 0.0153
Next Token :               , Posbility: 0.2383
Next Token :              , Posbility: 0.7344
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
             
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  {, Posbility: 0.0007
Next Token :  is, Posbility: 0.0007
Next Token :  not, Posbility: 0.0051
Next Token :  true, Posbility: 0.0140
Next Token :  false, Posbility: 0.9766
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  else, Posbility: 0.0015
Next Token : ;, Posbility: 0.0028
Next Token :  , Posbility: 0.0040
Next Token : 

, Posbility: 0.0045
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :     , Posbility: 0.0110
Next Token :         , Posbility: 0.0493
Next Token :   , Posbility: 0.0635
Next Token :           , Posbility: 0.3223
Next Token :       , Posbility: 0.5312
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0016
Next Token : elif, Posbility: 0.0021
Next Token : (, Posbility: 0.0027
Next Token : |, Posbility: 0.2422
Next Token : else, Posbility: 0.7461
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  {, Posbility: 0.0009
Next Token :  true, Posbility: 0.0069
Next Token :  , Posbility: 0.0145
Next Token :  false, Posbility: 0.0737
Next Token : 
, Posbility: 0.8984
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :              , Posbility: 0.0025
Next Token :        , Posbility: 0.0036
Next Token :      , Posbility: 0.0442
Next Token :           , Posbility: 0.0566
Next Token :          , Posbility: 0.8867
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
         
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  not, Posbility: 0.0002
Next Token :  {, Posbility: 0.0007
Next Token :  is, Posbility: 0.0009
Next Token :  true, Posbility: 0.0374
Next Token :  false, Posbility: 0.9609
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0021
Next Token :  in, Posbility: 0.0027
Next Token :  , Posbility: 0.0051
Next Token : 

, Posbility: 0.0074
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0022
Next Token :    , Posbility: 0.0099
Next Token :       , Posbility: 0.0305
Next Token :     , Posbility: 0.0645
Next Token :   , Posbility: 0.8906
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : in, Posbility: 0.0003
Next Token : with, Posbility: 0.0011
Next Token : when, Posbility: 0.0018
Next Token : else, Posbility: 0.2676
Next Token : |, Posbility: 0.7266
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  |
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  empty, Posbility: 0.0011
Next Token :  [, Posbility: 0.0021
Next Token :  [], Posbility: 0.0256
Next Token :  {, Posbility: 0.1147
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (), Posbility: 0.0023
Next Token : t, Posbility: 0.0132
Next Token : hd, Posbility: 0.0170
Next Token : d, Posbility: 0.0217
Next Token : _, Posbility: 0.9258
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ::, Posbility: 0.0035
Next Token :  |, Posbility: 0.0035
Next Token : ,, Posbility: 0.0073
Next Token :  as, Posbility: 0.0176
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : →, Posbility: 0.0001
Next Token : :, Posbility: 0.0002
Next Token : if, Posbility: 0.0040
Next Token : ::, Posbility: 0.0159
Next Token : ->, Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  match, Posbility: 0.0115
Next Token :  , Posbility: 0.0315
Next Token :  true, Posbility: 0.0854
Next Token :  false, Posbility: 0.2324
Next Token : 
, Posbility: 0.6328
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0031
Next Token :        , Posbility: 0.0137
Next Token :       , Posbility: 0.0613
Next Token :          , Posbility: 0.0693
Next Token :      , Posbility: 0.8438
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
     
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  for, Posbility: 0.0020
Next Token :  is, Posbility: 0.0026
Next Token :  not, Posbility: 0.0070
Next Token :  true, Posbility: 0.1797
Next Token :  false, Posbility: 0.8047
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0025
Next Token : ), Posbility: 0.0025
Next Token : ;, Posbility: 0.0025
Next Token : 
, Posbility: 0.3691
Next Token : 

, Posbility: 0.6094
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false


 score:True
Error type: Syntaxerr.Unclosed_continue
---------------------------
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0420
Next Token : ;, Posbility: 0.0835
Next Token :   , Posbility: 0.1074
Next Token : let, Posbility: 0.2002
Next Token : in, Posbility: 0.2910
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : duction, Posbility: 0.0061
Next Token : 

, Posbility: 0.0188
Next Token :  , Posbility: 0.0212
Next Token :  is, Posbility: 0.0212
Next Token : 
, Posbility: 0.9062
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : check, Posbility: 0.0193
Next Token :   , Posbility: 0.0248
Next Token : (, Posbility: 0.0596
Next Token : is, Posbility: 0.2080
Next Token : let, Posbility: 0.4980
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  main, Posbility: 0.0131
Next Token :  check, Posbility: 0.0356
Next Token :  , Posbility: 0.0967
Next Token :  is, Posbility: 0.1406
Next Token :  rec, Posbility: 0.6328
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  same, Posbility: 0.0222
Next Token :  rec, Posbility: 0.0366
Next Token :  check, Posbility: 0.0776
Next Token :  , Posbility: 0.1641
Next Token :  is, Posbility: 0.4473
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : same, Posbility: 0.0004
Next Token : Same, Posbility: 0.0005
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ident, Posbility: 0.0068
Next Token : dict, Posbility: 0.0184
Next Token : equal, Posbility: 0.0184
Next Token : all, Posbility: 0.0825
Next Token : same, Posbility: 0.7812
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  a, Posbility: 0.0022
Next Token :  k, Posbility: 0.0022
Next Token :  =, Posbility: 0.0099
Next Token :  , Posbility: 0.0737
Next Token : _, Posbility: 0.8984
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : d, Posbility: 0.0130
Next Token : tree, Posbility: 0.0243
Next Token : rec, Posbility: 0.0400
Next Token : list, Posbility: 0.1089
Next Token : dict, Posbility: 0.6250
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0505
Next Token : ', Posbility: 0.0649
Next Token : 2, Posbility: 0.0830
Next Token :  , Posbility: 0.1069
Next Token : _, Posbility: 0.6133
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : opt, Posbility: 0.0457
Next Token : aux, Posbility: 0.0457
Next Token : list, Posbility: 0.0588
Next Token : iter, Posbility: 0.0757
Next Token : rec, Posbility: 0.1602
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0101
Next Token :  {, Posbility: 0.0101
Next Token :  =, Posbility: 0.0312
Next Token : urse, Posbility: 0.1089
Next Token :  , Posbility: 0.8047
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0061
Next Token : dict, Posbility: 0.0101
Next Token : (, Posbility: 0.0130
Next Token : t, Posbility: 0.0215
Next Token : d, Posbility: 0.9102
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0, Posbility: 0.0014
Next Token : 2, Posbility: 0.0039
Next Token :  , Posbility: 0.0107
Next Token :  =, Posbility: 0.0176
Next Token : 1, Posbility: 0.9609
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  a, Posbility: 0.0006
Next Token :  ~, Posbility: 0.0006
Next Token : _, Posbility: 0.0008
Next Token :  =, Posbility: 0.0752
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : dict, Posbility: 0.0004
Next Token : (, Posbility: 0.0007
Next Token : _, Posbility: 0.0009
Next Token : t, Posbility: 0.0025
Next Token : d, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token : 3, Posbility: 0.0002
Next Token : 1, Posbility: 0.0002
Next Token : 2,, Posbility: 0.0007
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  i, Posbility: 0.0042
Next Token :  k, Posbility: 0.0042
Next Token :  acc, Posbility: 0.0089
Next Token :  , Posbility: 0.0581
Next Token :  =, Posbility: 0.9102
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  {, Posbility: 0.0011
Next Token :  match, Posbility: 0.0105
Next Token :  , Posbility: 0.0135
Next Token :  is, Posbility: 0.0251
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :      , Posbility: 0.0016
Next Token :       , Posbility: 0.0056
Next Token :    , Posbility: 0.0082
Next Token :     , Posbility: 0.0287
Next Token :   , Posbility: 0.9492
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0160
Next Token : is, Posbility: 0.0557
Next Token : let, Posbility: 0.0918
Next Token : if, Posbility: 0.1177
Next Token : match, Posbility: 0.6797
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token : (, Posbility: 0.0007
Next Token :  {, Posbility: 0.0007
Next Token :  is, Posbility: 0.0097
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Map, Posbility: 0.0003
Next Token : Dict, Posbility: 0.0003
Next Token : List, Posbility: 0.0009
Next Token : (, Posbility: 0.0179
Next Token : d, Posbility: 0.9766
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2,, Posbility: 0.0002
Next Token : 1., Posbility: 0.0019
Next Token : 1,, Posbility: 0.0108
Next Token : 2, Posbility: 0.0139
Next Token : 1, Posbility: 0.9727
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  and, Posbility: 0.0006
Next Token : ::, Posbility: 0.0015
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  {, Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :       , Posbility: 0.0005
Next Token :     , Posbility: 0.0022
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0004
Next Token : {, Posbility: 0.0010
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  |
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  None, Posbility: 0.0048
Next Token :  [, Posbility: 0.0061
Next Token :  [], Posbility: 0.0129
Next Token :  , Posbility: 0.0581
Next Token :  {, Posbility: 0.9102
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | {
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  key, Posbility: 0.0014
Next Token :  k, Posbility: 0.0027
Next Token : d, Posbility: 0.0057
Next Token : }, Posbility: 0.0177
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0021
Next Token : }, Posbility: 0.0027
Next Token : hd, Posbility: 0.0195
Next Token : _, Posbility: 0.0222
Next Token : d, Posbility: 0.9453
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : 1,, Posbility: 0.0002
Next Token : 2, Posbility: 0.0003
Next Token : ::, Posbility: 0.0007
Next Token : 1, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token : :, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 0.0007
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : head, Posbility: 0.0007
Next Token : [, Posbility: 0.0008
Next Token : _, Posbility: 0.0028
Next Token : hd, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0009
Next Token : :, Posbility: 0.0010
Next Token : ,, Posbility: 0.0012
Next Token : 1, Posbility: 0.0012
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ->, Posbility: 0.0003
Next Token : ;, Posbility: 0.0006
Next Token : :, Posbility: 0.0022
Next Token : }, Posbility: 0.0028
Next Token : ::, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd ::
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  !, Posbility: 0.0002
Next Token :  {, Posbility: 0.0002
Next Token :  [, Posbility: 0.0003
Next Token :  rest, Posbility: 0.0004
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : h, Posbility: 0.0007
Next Token : hd, Posbility: 0.0015
Next Token : d, Posbility: 0.0035
Next Token : _, Posbility: 0.0157
Next Token : t, Posbility: 0.9727
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : 2, Posbility: 0.0006
Next Token : 1,, Posbility: 0.0009
Next Token :  , Posbility: 0.0019
Next Token : 1, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0005
Next Token :  |, Posbility: 0.0005
Next Token : ;, Posbility: 0.0013
Next Token : }, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0003
Next Token : ::, Posbility: 0.0007
Next Token : ->, Posbility: 0.0010
Next Token : },, Posbility: 0.0025
Next Token : }, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 }
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  and, Posbility: 0.0009
Next Token :  as, Posbility: 0.0013
Next Token : 
, Posbility: 0.0017
Next Token :  when, Posbility: 0.0059
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : -, Posbility: 0.0001
Next Token : if, Posbility: 0.0013
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  {, Posbility: 0.0012
Next Token :  is, Posbility: 0.0019
Next Token :  , Posbility: 0.0028
Next Token :  match, Posbility: 0.0085
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0008
Next Token :         , Posbility: 0.0010
Next Token :     , Posbility: 0.0018
Next Token :      , Posbility: 0.0371
Next Token :       , Posbility: 0.9570
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : try, Posbility: 0.0013
Next Token : (, Posbility: 0.0034
Next Token : let, Posbility: 0.0415
Next Token : if, Posbility: 0.1128
Next Token : match, Posbility: 0.8359
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  rec, Posbility: 0.0001
Next Token :  {, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  is, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : dict, Posbility: 0.0001
Next Token : hd, Posbility: 0.0003
Next Token : (, Posbility: 0.0006
Next Token : t, Posbility: 0.0006
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  with, Posbility: 0.0000
Next Token : 2., Posbility: 0.0001
Next Token : 2,, Posbility: 0.0001
Next Token : 1, Posbility: 0.0012
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0006
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      |
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  obj, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token :  {, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | {
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : }, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : d, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : t, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0009
Next Token : hd, Posbility: 0.0013
Next Token : d, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : 3, Posbility: 0.0001
Next Token : 1, Posbility: 0.0017
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : head, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : hd, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : }, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd ::
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  {, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : d, Posbility: 0.0001
Next Token : hd, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0013
Next Token : t, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 2,, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : ;, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token : }, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0001
Next Token : },, Posbility: 0.0001
Next Token : }, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 }
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =>, Posbility: 0.0002
Next Token :  |, Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  when, Posbility: 0.0036
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token :  match, Posbility: 0.0001
Next Token :  is, Posbility: 0.0010
Next Token :  , Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :               , Posbility: 0.0005
Next Token :        , Posbility: 0.0005
Next Token :         , Posbility: 0.0008
Next Token :          , Posbility: 0.1328
Next Token :           , Posbility: 0.8633
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : hd, Posbility: 0.0037
Next Token : (, Posbility: 0.0101
Next Token : match, Posbility: 0.0273
Next Token : let, Posbility: 0.0452
Next Token : if, Posbility: 0.9062
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  String, Posbility: 0.0007
Next Token :  !, Posbility: 0.0039
Next Token :  not, Posbility: 0.0082
Next Token :  is, Posbility: 0.0366
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : t, Posbility: 0.0012
Next Token : head, Posbility: 0.0012
Next Token : d, Posbility: 0.0015
Next Token : (, Posbility: 0.0031
Next Token : hd, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ==, Posbility: 0.0005
Next Token :  ~, Posbility: 0.0007
Next Token :  !=, Posbility: 0.0040
Next Token :  , Posbility: 0.0140
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  None, Posbility: 0.0000
Next Token :  "", Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : t, Posbility: 0.0001
Next Token : h, Posbility: 0.0001
Next Token : d, Posbility: 0.0001
Next Token : head, Posbility: 0.0002
Next Token : hd, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0005
Next Token :  and, Posbility: 0.0012
Next Token : 
, Posbility: 0.0040
Next Token :  &&, Posbility: 0.0085
Next Token :  then, Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  true, Posbility: 0.0002
Next Token :  {, Posbility: 0.0003
Next Token :  , Posbility: 0.0025
Next Token :  is, Posbility: 0.0075
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :          , Posbility: 0.0001
Next Token :             , Posbility: 0.0009
Next Token :            , Posbility: 0.0023
Next Token :               , Posbility: 0.0474
Next Token :              , Posbility: 0.9492
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
             
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0003
Next Token :  false, Posbility: 0.0003
Next Token :  {, Posbility: 0.0006
Next Token :  true, Posbility: 0.0028
Next Token :  is, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : Same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ident, Posbility: 0.0000
Next Token : eq, Posbility: 0.0000
Next Token : sam, Posbility: 0.0000
Next Token : equal, Posbility: 0.0001
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : tree, Posbility: 0.0000
Next Token : value, Posbility: 0.0001
Next Token : list, Posbility: 0.0001
Next Token : rec, Posbility: 0.0001
Next Token : dict, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0005
Next Token :  , Posbility: 0.0757
Next Token : _, Posbility: 0.9219
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : dict, Posbility: 0.0000
Next Token : re, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : recursive, Posbility: 0.0001
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : 
, Posbility: 0.0007
Next Token : (, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : h, Posbility: 0.0001
Next Token : hd, Posbility: 0.0013
Next Token : d, Posbility: 0.0022
Next Token : (, Posbility: 0.0059
Next Token : t, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1., Posbility: 0.0001
Next Token : 1,, Posbility: 0.0001
Next Token : 2, Posbility: 0.0025
Next Token : 1, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : hd, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : d, Posbility: 0.0003
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2), Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 2,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  &&, Posbility: 0.0002
Next Token :  |, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token :  else, Posbility: 0.0009
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :            , Posbility: 0.0000
Next Token :             , Posbility: 0.0002
Next Token :               , Posbility: 0.0019
Next Token :           , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Else, Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token : elif, Posbility: 0.0006
Next Token : els, Posbility: 0.0007
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  true, Posbility: 0.0007
Next Token :  {, Posbility: 0.0009
Next Token :  false, Posbility: 0.0017
Next Token :  , Posbility: 0.0203
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :          , Posbility: 0.0003
Next Token :             , Posbility: 0.0007
Next Token :            , Posbility: 0.0014
Next Token :               , Posbility: 0.0674
Next Token :              , Posbility: 0.9297
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
             
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  not, Posbility: 0.0008
Next Token :  {, Posbility: 0.0014
Next Token :  true, Posbility: 0.0278
Next Token :  is, Posbility: 0.0459
Next Token :  false, Posbility: 0.9219
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  else, Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token :  &&, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :      , Posbility: 0.0003
Next Token :         , Posbility: 0.0007
Next Token :   , Posbility: 0.0015
Next Token :           , Posbility: 0.0159
Next Token :       , Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Else, Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token : els, Posbility: 0.0001
Next Token : elif, Posbility: 0.0001
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  {, Posbility: 0.0007
Next Token :  false, Posbility: 0.0008
Next Token :  true, Posbility: 0.0010
Next Token :  , Posbility: 0.0067
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :         , Posbility: 0.0011
Next Token :      , Posbility: 0.0034
Next Token :              , Posbility: 0.0050
Next Token :           , Posbility: 0.0369
Next Token :          , Posbility: 0.9531
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
         
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  not, Posbility: 0.0002
Next Token :  {, Posbility: 0.0010
Next Token :  is, Posbility: 0.0250
Next Token :  true, Posbility: 0.1445
Next Token :  false, Posbility: 0.8281
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0008
Next Token :  in, Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :      , Posbility: 0.0016
Next Token :     , Posbility: 0.0044
Next Token :       , Posbility: 0.0106
Next Token : in, Posbility: 0.0254
Next Token :   , Posbility: 0.9531
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : case, Posbility: 0.0001
Next Token : when, Posbility: 0.0003
Next Token : in, Posbility: 0.0005
Next Token : else, Posbility: 0.0025
Next Token : |, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  |
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  k, Posbility: 0.0023
Next Token :  [, Posbility: 0.0038
Next Token :  [], Posbility: 0.0168
Next Token :  {, Posbility: 0.0459
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : t, Posbility: 0.0034
Next Token : (, Posbility: 0.0050
Next Token : d, Posbility: 0.0106
Next Token : hd, Posbility: 0.0120
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  |, Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token :  when, Posbility: 0.0028
Next Token :  as, Posbility: 0.0085
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : if, Posbility: 0.0017
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  is, Posbility: 0.0010
Next Token :  , Posbility: 0.0028
Next Token :  false, Posbility: 0.0045
Next Token :  true, Posbility: 0.0075
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :        , Posbility: 0.0002
Next Token :    , Posbility: 0.0004
Next Token :          , Posbility: 0.0007
Next Token :       , Posbility: 0.0374
Next Token :      , Posbility: 0.9609
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
     
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  not, Posbility: 0.0007
Next Token :  {, Posbility: 0.0012
Next Token :  is, Posbility: 0.0391
Next Token :  true, Posbility: 0.1748
Next Token :  false, Posbility: 0.7852
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0008
Next Token :  , Posbility: 0.0013
Next Token :  in, Posbility: 0.0066
Next Token : 

, Posbility: 0.1177
Next Token : 
, Posbility: 0.8672
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0117
Next Token : ;, Posbility: 0.0262
Next Token : (, Posbility: 0.0337
Next Token : let, Posbility: 0.0337
Next Token : in, Posbility: 0.8164
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  is, Posbility: 0.0003
Next Token : fix, Posbility: 0.0003
Next Token :  , Posbility: 0.0027
Next Token : 

, Posbility: 0.0330
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : val, Posbility: 0.0053
Next Token : module, Posbility: 0.0053
Next Token : (, Posbility: 0.0776
Next Token : is, Posbility: 0.0879
Next Token : let, Posbility: 0.7383
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  same, Posbility: 0.0168
Next Token :  check, Posbility: 0.0520
Next Token :  , Posbility: 0.0757
Next Token :  rec, Posbility: 0.3848
Next Token :  is, Posbility: 0.3848
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : same, Posbility: 0.0003
Next Token : Same, Posbility: 0.0012
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ident, Posbility: 0.0023
Next Token : dict, Posbility: 0.0062
Next Token : equal, Posbility: 0.0062
Next Token : all, Posbility: 0.0459
Next Token : same, Posbility: 0.9219
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0005
Next Token :  a, Posbility: 0.0005
Next Token :  =, Posbility: 0.0104
Next Token :  , Posbility: 0.0466
Next Token : _, Posbility: 0.9375
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : d, Posbility: 0.0024
Next Token : dic, Posbility: 0.0024
Next Token : list, Posbility: 0.0065
Next Token : rec, Posbility: 0.0065
Next Token : dict, Posbility: 0.9648
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0119
Next Token :  ?, Posbility: 0.0251
Next Token :  =, Posbility: 0.0532
Next Token : _, Posbility: 0.1855
Next Token :  , Posbility: 0.6484
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : t, Posbility: 0.0027
Next Token : (, Posbility: 0.0073
Next Token : x, Posbility: 0.0073
Next Token : dict, Posbility: 0.0175
Next Token : d, Posbility: 0.9531
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0, Posbility: 0.0009
Next Token : 2, Posbility: 0.0014
Next Token :  , Posbility: 0.0063
Next Token :  =, Posbility: 0.0469
Next Token : 1, Posbility: 0.9414
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : =, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token :  a, Posbility: 0.0002
Next Token :  =, Posbility: 0.0952
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : t, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : dict, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 2,, Posbility: 0.0002
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 0.0028
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  match, Posbility: 0.0020
Next Token :  !, Posbility: 0.0042
Next Token :  , Posbility: 0.0146
Next Token :  is, Posbility: 0.4863
Next Token : 
, Posbility: 0.4863
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :       , Posbility: 0.0013
Next Token :      , Posbility: 0.0039
Next Token :     , Posbility: 0.0106
Next Token :    , Posbility: 0.0225
Next Token :   , Posbility: 0.9570
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0281
Next Token : match, Posbility: 0.0762
Next Token : let, Posbility: 0.1426
Next Token : if, Posbility: 0.2070
Next Token : is, Posbility: 0.4980
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : same, Posbility: 0.0000
Next Token : Same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ident, Posbility: 0.0000
Next Token : empty, Posbility: 0.0000
Next Token : eq, Posbility: 0.0000
Next Token : equal, Posbility: 0.0002
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token : tree, Posbility: 0.0000
Next Token : dic, Posbility: 0.0000
Next Token : dict, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0007
Next Token :  is, Posbility: 0.0011
Next Token :  , Posbility: 0.0179
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ref, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : recursive, Posbility: 0.0002
Next Token : iter, Posbility: 0.0003
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  {, Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token : (, Posbility: 0.0012
Next Token :  ~, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Map, Posbility: 0.0002
Next Token : Dict, Posbility: 0.0002
Next Token : dict, Posbility: 0.0003
Next Token : (, Posbility: 0.0293
Next Token : d, Posbility: 0.9688
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1\, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0004
Next Token : 2, Posbility: 0.0019
Next Token : 1., Posbility: 0.0019
Next Token : 1, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  ~, Posbility: 0.0003
Next Token :  {, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ref, Posbility: 0.0000
Next Token : @@, Posbility: 0.0000
Next Token : dict, Posbility: 0.0001
Next Token : (, Posbility: 0.0076
Next Token : d, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2,, Posbility: 0.0001
Next Token : 2., Posbility: 0.0005
Next Token : 2), Posbility: 0.0005
Next Token : 1, Posbility: 0.0022
Next Token : 2, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  &&, Posbility: 0.0123
Next Token :  =, Posbility: 0.0260
Next Token :  ||, Posbility: 0.0334
Next Token : 

, Posbility: 0.1318
Next Token : 
, Posbility: 0.7578
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : let, Posbility: 0.0248
Next Token : end, Posbility: 0.0264
Next Token : ```, Posbility: 0.0349
Next Token : (, Posbility: 0.0596
Next Token : in, Posbility: 0.1719
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : fix, Posbility: 0.0001
Next Token : , Posbility: 0.0002
Next Token :  , Posbility: 0.0035
Next Token : 

, Posbility: 0.1475
Next Token : 
, Posbility: 0.8477
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0221
Next Token : printf, Posbility: 0.0266
Next Token : *, Posbility: 0.0302
Next Token : (, Posbility: 0.1533
Next Token : let, Posbility: 0.6445
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  check, Posbility: 0.0255
Next Token :  main, Posbility: 0.0476
Next Token :  , Posbility: 0.1299
Next Token :  is, Posbility: 0.1660
Next Token :  rec, Posbility: 0.5117
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  make, Posbility: 0.0265
Next Token :  find, Posbility: 0.0265
Next Token :  check, Posbility: 0.0437
Next Token :  , Posbility: 0.1963
Next Token :  is, Posbility: 0.4141
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ect, Posbility: 0.0001
Next Token : Same, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : same, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : dict, Posbility: 0.0098
Next Token : subset, Posbility: 0.0142
Next Token : equal, Posbility: 0.0234
Next Token : all, Posbility: 0.0388
Next Token : same, Posbility: 0.7773
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  a, Posbility: 0.0010
Next Token :  k, Posbility: 0.0014
Next Token :  =, Posbility: 0.0030
Next Token :  , Posbility: 0.0369
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : set, Posbility: 0.0101
Next Token : tree, Posbility: 0.0243
Next Token : rec, Posbility: 0.0276
Next Token : list, Posbility: 0.1396
Next Token : dict, Posbility: 0.6289
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0125
Next Token : ', Posbility: 0.0142
Next Token : s, Posbility: 0.0206
Next Token : 2, Posbility: 0.0559
Next Token : _, Posbility: 0.8750
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : map, Posbility: 0.0221
Next Token : opt, Posbility: 0.0283
Next Token : list, Posbility: 0.0530
Next Token : iter, Posbility: 0.1846
Next Token : rec, Posbility: 0.2676
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0182
Next Token : ', Posbility: 0.0723
Next Token :  , Posbility: 0.2520
Next Token : _, Posbility: 0.2852
Next Token : 2, Posbility: 0.3242
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  a, Posbility: 0.0024
Next Token :  k, Posbility: 0.0039
Next Token :  {, Posbility: 0.0045
Next Token :  =, Posbility: 0.0074
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0039
Next Token : dict, Posbility: 0.0050
Next Token : (, Posbility: 0.0082
Next Token : t, Posbility: 0.0153
Next Token : d, Posbility: 0.9453
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0005
Next Token :  , Posbility: 0.0031
Next Token :  =, Posbility: 0.0031
Next Token : 2, Posbility: 0.0040
Next Token : 1, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  a, Posbility: 0.0006
Next Token :  =, Posbility: 0.0179
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : dict, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : t, Posbility: 0.0009
Next Token : d, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token : 3, Posbility: 0.0002
Next Token : 2,, Posbility: 0.0004
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  a, Posbility: 0.0083
Next Token :  k, Posbility: 0.0121
Next Token :  acc, Posbility: 0.0137
Next Token :  , Posbility: 0.0894
Next Token :  =, Posbility: 0.8477
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  function, Posbility: 0.0005
Next Token :  match, Posbility: 0.0019
Next Token :  , Posbility: 0.0028
Next Token :  is, Posbility: 0.0032
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :       , Posbility: 0.0005
Next Token : let, Posbility: 0.0005
Next Token :    , Posbility: 0.0017
Next Token :     , Posbility: 0.0059
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0047
Next Token : is, Posbility: 0.0165
Next Token : if, Posbility: 0.0211
Next Token : let, Posbility: 0.0396
Next Token : match, Posbility: 0.8984
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  {, Posbility: 0.0004
Next Token :  is, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Dict, Posbility: 0.0001
Next Token : Map, Posbility: 0.0002
Next Token : List, Posbility: 0.0003
Next Token : (, Posbility: 0.0041
Next Token : d, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  with, Posbility: 0.0000
Next Token : 1., Posbility: 0.0012
Next Token : 1,, Posbility: 0.0015
Next Token : 2, Posbility: 0.0140
Next Token : 1, Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  and, Posbility: 0.0002
Next Token : ::, Posbility: 0.0003
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  {, Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0003
Next Token :     , Posbility: 0.0012
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : case, Posbility: 0.0005
Next Token : {, Posbility: 0.0006
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  |
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  None, Posbility: 0.0018
Next Token :  [], Posbility: 0.0064
Next Token :  [, Posbility: 0.0082
Next Token :  , Posbility: 0.0287
Next Token :  {, Posbility: 0.9492
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | {
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0008
Next Token :  k, Posbility: 0.0017
Next Token : }, Posbility: 0.0031
Next Token : d, Posbility: 0.0031
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : h, Posbility: 0.0005
Next Token : (, Posbility: 0.0011
Next Token : _, Posbility: 0.0066
Next Token : hd, Posbility: 0.0085
Next Token : d, Posbility: 0.9766
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0001
Next Token : ::, Posbility: 0.0002
Next Token : 2, Posbility: 0.0004
Next Token : 1, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : :, Posbility: 0.0004
Next Token :  , Posbility: 0.0005
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : k, Posbility: 0.0007
Next Token : (, Posbility: 0.0009
Next Token : [, Posbility: 0.0012
Next Token : _, Posbility: 0.0017
Next Token : hd, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0006
Next Token :  =, Posbility: 0.0009
Next Token : ,, Posbility: 0.0010
Next Token : 1, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0003
Next Token : ->, Posbility: 0.0004
Next Token : :, Posbility: 0.0012
Next Token : }, Posbility: 0.0013
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd ::
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0004
Next Token :  k, Posbility: 0.0005
Next Token :  {, Posbility: 0.0006
Next Token :  [, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0015
Next Token : hd, Posbility: 0.0019
Next Token : d, Posbility: 0.0024
Next Token : _, Posbility: 0.0178
Next Token : t, Posbility: 0.9727
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : 2, Posbility: 0.0005
Next Token : 1,, Posbility: 0.0007
Next Token :  , Posbility: 0.0013
Next Token : 1, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0005
Next Token :  |, Posbility: 0.0008
Next Token : }, Posbility: 0.0012
Next Token : ;, Posbility: 0.0019
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0004
Next Token : ->, Posbility: 0.0005
Next Token : ::, Posbility: 0.0006
Next Token : },, Posbility: 0.0017
Next Token : }, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 }
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0008
Next Token :  |, Posbility: 0.0012
Next Token :  as, Posbility: 0.0022
Next Token :  when, Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : -, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  is, Posbility: 0.0002
Next Token :  {, Posbility: 0.0005
Next Token :  , Posbility: 0.0010
Next Token :  match, Posbility: 0.0041
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :     , Posbility: 0.0006
Next Token :      , Posbility: 0.0085
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : d, Posbility: 0.0005
Next Token : (, Posbility: 0.0016
Next Token : let, Posbility: 0.0084
Next Token : if, Posbility: 0.0227
Next Token : match, Posbility: 0.9648
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  {, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : dict, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : hd, Posbility: 0.0006
Next Token : t, Posbility: 0.0008
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  with, Posbility: 0.0000
Next Token : 2,, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 1, Posbility: 0.0012
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0002
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      |
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  obj, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token :  {, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | {
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : d, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : t, Posbility: 0.0001
Next Token : _, Posbility: 0.0004
Next Token : hd, Posbility: 0.0012
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 21, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : 1, Posbility: 0.0008
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : hd, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd ::
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  {, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : d, Posbility: 0.0001
Next Token : hd, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0008
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 2,, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 1, Posbility: 0.0004
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ;, Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token : }, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : },, Posbility: 0.0001
Next Token : }, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 }
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  as, Posbility: 0.0001
Next Token :  |, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  when, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  match, Posbility: 0.0001
Next Token :  true, Posbility: 0.0001
Next Token :  is, Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 	, Posbility: 0.0002
Next Token :              , Posbility: 0.0003
Next Token :               , Posbility: 0.0004
Next Token :          , Posbility: 0.0474
Next Token :           , Posbility: 0.9492
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0063
Next Token : hd, Posbility: 0.0063
Next Token : match, Posbility: 0.0171
Next Token : let, Posbility: 0.0282
Next Token : if, Posbility: 0.9336
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  String, Posbility: 0.0005
Next Token :  !, Posbility: 0.0039
Next Token :  not, Posbility: 0.0082
Next Token :  is, Posbility: 0.0366
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : d, Posbility: 0.0012
Next Token : head, Posbility: 0.0015
Next Token : (, Posbility: 0.0052
Next Token : t, Posbility: 0.0066
Next Token : hd, Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  in, Posbility: 0.0005
Next Token :  ~, Posbility: 0.0009
Next Token :  !=, Posbility: 0.0040
Next Token :  , Posbility: 0.0109
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  None, Posbility: 0.0001
Next Token :  "", Posbility: 0.0001
Next Token :  ', Posbility: 0.0001
Next Token :  ", Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : h, Posbility: 0.0001
Next Token : head, Posbility: 0.0002
Next Token : t, Posbility: 0.0003
Next Token : hd, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ', Posbility: 0.0009
Next Token :  and, Posbility: 0.0015
Next Token : 
, Posbility: 0.0019
Next Token :  &&, Posbility: 0.0178
Next Token :  then, Posbility: 0.9766
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  {, Posbility: 0.0002
Next Token :  true, Posbility: 0.0003
Next Token :  , Posbility: 0.0017
Next Token :  is, Posbility: 0.0032
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :          , Posbility: 0.0001
Next Token :             , Posbility: 0.0003
Next Token :            , Posbility: 0.0005
Next Token :               , Posbility: 0.0293
Next Token :              , Posbility: 0.9688
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
             
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token :  {, Posbility: 0.0003
Next Token :  false, Posbility: 0.0005
Next Token :  true, Posbility: 0.0041
Next Token :  is, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : Same, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ident, Posbility: 0.0000
Next Token : sam, Posbility: 0.0000
Next Token : eq, Posbility: 0.0000
Next Token : equal, Posbility: 0.0002
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : same, Posbility: 0.0000
Next Token : value, Posbility: 0.0000
Next Token : rec, Posbility: 0.0001
Next Token : list, Posbility: 0.0001
Next Token : dict, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0007
Next Token : 2, Posbility: 0.0084
Next Token :  , Posbility: 0.0227
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : dict, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : res, Posbility: 0.0000
Next Token : recursive, Posbility: 0.0002
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : 3, Posbility: 0.0001
Next Token : _, Posbility: 0.0009
Next Token :  , Posbility: 0.0474
Next Token : 2, Posbility: 0.9492
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : h, Posbility: 0.0001
Next Token : d, Posbility: 0.0008
Next Token : hd, Posbility: 0.0028
Next Token : (, Posbility: 0.0036
Next Token : t, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : 1., Posbility: 0.0001
Next Token : 1,, Posbility: 0.0002
Next Token : 2, Posbility: 0.0052
Next Token : 1, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : d, Posbility: 0.0001
Next Token : hd, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : t, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 2,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  |, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token :  &&, Posbility: 0.0004
Next Token :  else, Posbility: 0.0007
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :              , Posbility: 0.0000
Next Token :            , Posbility: 0.0000
Next Token :             , Posbility: 0.0001
Next Token :               , Posbility: 0.0006
Next Token :           , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Else, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token : elif, Posbility: 0.0007
Next Token : els, Posbility: 0.0008
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  true, Posbility: 0.0004
Next Token :  {, Posbility: 0.0006
Next Token :  false, Posbility: 0.0008
Next Token :  , Posbility: 0.0124
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :          , Posbility: 0.0002
Next Token :             , Posbility: 0.0004
Next Token :            , Posbility: 0.0006
Next Token :               , Posbility: 0.0674
Next Token :              , Posbility: 0.9297
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
             
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  not, Posbility: 0.0008
Next Token :  {, Posbility: 0.0022
Next Token :  is, Posbility: 0.0452
Next Token :  true, Posbility: 0.0452
Next Token :  false, Posbility: 0.9062
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token :  &&, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :           , Posbility: 0.0022
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : |, Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token : els, Posbility: 0.0000
Next Token : elif, Posbility: 0.0000
Next Token : else, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  {, Posbility: 0.0002
Next Token :  true, Posbility: 0.0003
Next Token :  false, Posbility: 0.0004
Next Token :  , Posbility: 0.0022
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0003
Next Token :              , Posbility: 0.0015
Next Token :           , Posbility: 0.0076
Next Token :          , Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
         
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  not, Posbility: 0.0000
Next Token :  {, Posbility: 0.0001
Next Token :  is, Posbility: 0.0019
Next Token :  true, Posbility: 0.0330
Next Token :  false, Posbility: 0.9648
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token :  in, Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :      , Posbility: 0.0002
Next Token :     , Posbility: 0.0005
Next Token :       , Posbility: 0.0007
Next Token : in, Posbility: 0.0008
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : when, Posbility: 0.0000
Next Token : in, Posbility: 0.0001
Next Token : else, Posbility: 0.0005
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  |
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  None, Posbility: 0.0003
Next Token :  [, Posbility: 0.0006
Next Token :  [], Posbility: 0.0031
Next Token :  {, Posbility: 0.0085
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : t, Posbility: 0.0009
Next Token : d, Posbility: 0.0012
Next Token : hd, Posbility: 0.0013
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ||, Posbility: 0.0001
Next Token :  then, Posbility: 0.0001
Next Token :  |, Posbility: 0.0003
Next Token :  as, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  false, Posbility: 0.0013
Next Token :  true, Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :        , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :          , Posbility: 0.0006
Next Token :       , Posbility: 0.0015
Next Token :      , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
     
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  not, Posbility: 0.0001
Next Token :  {, Posbility: 0.0001
Next Token :  is, Posbility: 0.0018
Next Token :  true, Posbility: 0.0474
Next Token :  false, Posbility: 0.9492
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  in, Posbility: 0.0010
Next Token : 

, Posbility: 0.0203
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0005
Next Token : (, Posbility: 0.0008
Next Token :   , Posbility: 0.0012
Next Token : let, Posbility: 0.0046
Next Token : in, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0046
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : //, Posbility: 0.0004
Next Token : module, Posbility: 0.0007
Next Token : is, Posbility: 0.0019
Next Token : (, Posbility: 0.0096
Next Token : let, Posbility: 0.9805
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  compare, Posbility: 0.0003
Next Token :  check, Posbility: 0.0004
Next Token :  , Posbility: 0.0031
Next Token :  rec, Posbility: 0.0075
Next Token :  is, Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : Same, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : subset, Posbility: 0.0000
Next Token : similar, Posbility: 0.0001
Next Token : all, Posbility: 0.0002
Next Token : equal, Posbility: 0.0002
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : tree, Posbility: 0.0001
Next Token : dic, Posbility: 0.0001
Next Token : list, Posbility: 0.0002
Next Token : rec, Posbility: 0.0002
Next Token : dict, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0009
Next Token : ', Posbility: 0.0040
Next Token :  , Posbility: 0.0298
Next Token : _, Posbility: 0.3633
Next Token : 2, Posbility: 0.5977
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token :  =, Posbility: 0.0046
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : dict, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : 1,, Posbility: 0.0002
Next Token : 1, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  =, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : 2,, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  !, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token :  is, Posbility: 0.0757
Next Token : 
, Posbility: 0.9219
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : is, Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :      , Posbility: 0.0006
Next Token :    , Posbility: 0.0022
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  is, Posbility: 0.0004
Next Token : match, Posbility: 0.0005
Next Token : if, Posbility: 0.0012
Next Token : let, Posbility: 0.0025
Next Token : is, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token : same, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : similar, Posbility: 0.0000
Next Token : safe, Posbility: 0.0000
Next Token : equal, Posbility: 0.0000
Next Token : sam, Posbility: 0.0000
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Dict, Posbility: 0.0000
Next Token : dir, Posbility: 0.0000
Next Token : same, Posbility: 0.0000
Next Token : dic, Posbility: 0.0000
Next Token : dict, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : 2, Posbility: 0.0474
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ret, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : recursion, Posbility: 0.0000
Next Token : recursive, Posbility: 0.0000
Next Token : rec, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : _, Posbility: 0.0005
Next Token :  , Posbility: 0.0032
Next Token : 2, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : t, Posbility: 0.0000
Next Token : hd, Posbility: 0.0000
Next Token : dict, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1,, Posbility: 0.0000
Next Token : 2, Posbility: 0.0004
Next Token : 1, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : d, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : hd, Posbility: 0.0000
Next Token : t, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 2), Posbility: 0.0003
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : , Posbility: 0.0006
Next Token :  =, Posbility: 0.0006
Next Token :  in, Posbility: 0.0027
Next Token : 

, Posbility: 0.0371
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : In, Posbility: 0.0119
Next Token : *, Posbility: 0.0197
Next Token : let, Posbility: 0.0325
Next Token : (, Posbility: 0.0503
Next Token : in, Posbility: 0.7383
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0601
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : module, Posbility: 0.0117
Next Token : *, Posbility: 0.0249
Next Token : open, Posbility: 0.0386
Next Token : (, Posbility: 0.1523
Next Token : let, Posbility: 0.6836
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  test, Posbility: 0.0131
Next Token :  check, Posbility: 0.0216
Next Token :  , Posbility: 0.1245
Next Token :  is, Posbility: 0.1245
Next Token :  rec, Posbility: 0.6328
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  find, Posbility: 0.0142
Next Token :  count, Posbility: 0.0142
Next Token :  check, Posbility: 0.0234
Next Token :  , Posbility: 0.1348
Next Token :  is, Posbility: 0.6055
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ect, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : same, Posbility: 0.0001
Next Token : Same, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : sub, Posbility: 0.0029
Next Token : subset, Posbility: 0.0061
Next Token : all, Posbility: 0.0129
Next Token : equal, Posbility: 0.0129
Next Token : same, Posbility: 0.9023
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : 2, Posbility: 0.0008
Next Token :  =, Posbility: 0.0013
Next Token :  , Posbility: 0.0124
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : set, Posbility: 0.0055
Next Token : tree, Posbility: 0.0091
Next Token : rec, Posbility: 0.0193
Next Token : list, Posbility: 0.0522
Next Token : dict, Posbility: 0.8203
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0067
Next Token :  , Posbility: 0.0143
Next Token : 2, Posbility: 0.0820
Next Token : 3, Posbility: 0.1055
Next Token : _, Posbility: 0.7773
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : map, Posbility: 0.0075
Next Token : opt, Posbility: 0.0085
Next Token : list, Posbility: 0.0125
Next Token : iter, Posbility: 0.0635
Next Token : rec, Posbility: 0.7695
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 4, Posbility: 0.0049
Next Token : 2, Posbility: 0.0081
Next Token :  , Posbility: 0.0134
Next Token : _, Posbility: 0.0283
Next Token : 3, Posbility: 0.9414
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  a, Posbility: 0.0003
Next Token :  {, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token :  =, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0008
Next Token : dict, Posbility: 0.0009
Next Token : (, Posbility: 0.0022
Next Token : t, Posbility: 0.0028
Next Token : d, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2, Posbility: 0.0003
Next Token : 1,, Posbility: 0.0003
Next Token :  =, Posbility: 0.0009
Next Token :  , Posbility: 0.0015
Next Token : 1, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  =, Posbility: 0.0041
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : dict, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : t, Posbility: 0.0002
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : 3, Posbility: 0.0003
Next Token : 2,, Posbility: 0.0004
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  i, Posbility: 0.0024
Next Token :  a, Posbility: 0.0030
Next Token :  k, Posbility: 0.0064
Next Token :  , Posbility: 0.0254
Next Token :  =, Posbility: 0.9531
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  function, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token :  match, Posbility: 0.0008
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : let, Posbility: 0.0002
Next Token :       , Posbility: 0.0003
Next Token :    , Posbility: 0.0004
Next Token :     , Posbility: 0.0028
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : try, Posbility: 0.0005
Next Token : (, Posbility: 0.0007
Next Token : if, Posbility: 0.0019
Next Token : let, Posbility: 0.0085
Next Token : match, Posbility: 0.9844
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : dict, Posbility: 0.0000
Next Token : hd, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : 1,, Posbility: 0.0001
Next Token : 1., Posbility: 0.0004
Next Token : 2, Posbility: 0.0013
Next Token : 1, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  and, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : |[, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {, Posbility: 0.0001
Next Token : case, Posbility: 0.0002
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  |
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  None, Posbility: 0.0002
Next Token :  [], Posbility: 0.0003
Next Token :  [, Posbility: 0.0013
Next Token :  , Posbility: 0.0067
Next Token :  {, Posbility: 0.9883
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | {
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : }, Posbility: 0.0002
Next Token : 
, Posbility: 0.0004
Next Token : d, Posbility: 0.0005
Next Token :  k, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : h, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : hd, Posbility: 0.0007
Next Token : _, Posbility: 0.0015
Next Token : d, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1,, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token : [, Posbility: 0.0004
Next Token : hd, Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::hd
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token : ::, Posbility: 0.0003
Next Token : 1, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::hd 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token : hd, Posbility: 0.0001
Next Token : }, Posbility: 0.0002
Next Token : :, Posbility: 0.0003
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::hd ::
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  v, Posbility: 0.0001
Next Token :  k, Posbility: 0.0001
Next Token :  [, Posbility: 0.0004
Next Token :  {, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::hd :: 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : d, Posbility: 0.0003
Next Token : hd, Posbility: 0.0004
Next Token : (, Posbility: 0.0010
Next Token : _, Posbility: 0.0036
Next Token : t, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::hd :: t
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : 1,, Posbility: 0.0004
Next Token :  , Posbility: 0.0007
Next Token : 1, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::hd :: t1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token : }, Posbility: 0.0005
Next Token :  |, Posbility: 0.0006
Next Token : ;, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::hd :: t1 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ->, Posbility: 0.0002
Next Token : ;, Posbility: 0.0002
Next Token : },, Posbility: 0.0003
Next Token : ::, Posbility: 0.0005
Next Token : }, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::hd :: t1 }
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  when, Posbility: 0.0005
Next Token :  |, Posbility: 0.0006
Next Token :  as, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  {, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  match, Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->

 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :           , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :      , Posbility: 0.0017
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : try, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : let, Posbility: 0.0019
Next Token : if, Posbility: 0.0046
Next Token : match, Posbility: 0.9922
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : dict, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : hd, Posbility: 0.0002
Next Token : t, Posbility: 0.0003
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2,, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : 1, Posbility: 0.0004
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a function to check if all values are same in a dictionary. *)
let rec is_same_dict d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let rec is_same_dict_rec d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict d1 d2 =
  is_same_dict_rec d1 d2
in
let rec is_same_dict_rec2 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2 with
      | { d2::hd :: t2 } ->
          if hd = hd then
              is_same_dict_rec2 t1 t2
          else
              false
      else
          false
  | _ ->
      false
in
let is_same_dict2 d1 d2 =
  is_same_dict_rec2 d1 d2
in
let rec is_same_dict_rec3 d1 d2 =
  match d1 with
  | { d1::hd :: t1 } ->
      match d2
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>