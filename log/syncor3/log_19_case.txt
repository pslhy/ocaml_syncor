code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0084
Next Token :  sum, Posbility: 0.0201
Next Token :  , Posbility: 0.1914
Next Token :  count, Posbility: 0.2168
Next Token :  rec, Posbility: 0.4590
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0176
Next Token :  loop, Posbility: 0.0226
Next Token :  sum, Posbility: 0.0374
Next Token :  , Posbility: 0.2754
Next Token :  count, Posbility: 0.5156
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Sub, Posbility: 0.0043
Next Token : (, Posbility: 0.0063
Next Token :  , Posbility: 0.0466
Next Token :  =, Posbility: 0.1846
Next Token : _, Posbility: 0.7266
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0459
Next Token : sub, Posbility: 0.0757
Next Token : equal, Posbility: 0.0757
Next Token : sum, Posbility: 0.0854
Next Token : substring, Posbility: 0.4355
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substring
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0057
Next Token :  , Posbility: 0.0155
Next Token :  =, Posbility: 0.0155
Next Token : _, Posbility: 0.1143
Next Token : s, Posbility: 0.8438
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0154
Next Token : (, Posbility: 0.0198
Next Token : _, Posbility: 0.2412
Next Token :  =, Posbility: 0.2412
Next Token :  , Posbility: 0.3965
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0410
Next Token : length, Posbility: 0.0410
Next Token : (, Posbility: 0.1270
Next Token : n, Posbility: 0.1436
Next Token : s, Posbility: 0.4414
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0437
Next Token :  sum, Posbility: 0.1187
Next Token :  len, Posbility: 0.1348
Next Token :  , Posbility: 0.1953
Next Token :  =, Posbility: 0.3652
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0043
Next Token :  function, Posbility: 0.0280
Next Token :  match, Posbility: 0.0522
Next Token :  , Posbility: 0.0859
Next Token : 
, Posbility: 0.8164
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0071
Next Token :    , Posbility: 0.0104
Next Token : 	, Posbility: 0.0118
Next Token :     , Posbility: 0.1270
Next Token :   , Posbility: 0.8242
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0104
Next Token : List, Posbility: 0.0171
Next Token : if, Posbility: 0.2676
Next Token : let, Posbility: 0.2676
Next Token : match, Posbility: 0.3906
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  S, Posbility: 0.0019
Next Token :  [, Posbility: 0.0025
Next Token :  !, Posbility: 0.0032
Next Token :  String, Posbility: 0.3672
Next Token :  , Posbility: 0.6055
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0187
Next Token : Char, Posbility: 0.0187
Next Token : Seq, Posbility: 0.0239
Next Token : List, Posbility: 0.0835
Next Token : s, Posbility: 0.7930
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  of, Posbility: 0.0009
Next Token :  , Posbility: 0.0015
Next Token : ., Posbility: 0.0052
Next Token :  with, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0031
Next Token :  , Posbility: 0.0035
Next Token :  {, Posbility: 0.0051
Next Token :  [], Posbility: 0.0074
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0006
Next Token :       , Posbility: 0.0020
Next Token :    , Posbility: 0.0025
Next Token :     , Posbility: 0.0947
Next Token :   , Posbility: 0.8984
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : ", Posbility: 0.0021
Next Token : [, Posbility: 0.0066
Next Token : [], Posbility: 0.0157
Next Token : |, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0200
Next Token :  ", Posbility: 0.0330
Next Token :  , Posbility: 0.0898
Next Token :  "", Posbility: 0.1475
Next Token :  [], Posbility: 0.6641
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0054
Next Token :  when, Posbility: 0.0054
Next Token :  =>, Posbility: 0.0167
Next Token :  |, Posbility: 0.0276
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0002
Next Token :  =>, Posbility: 0.0004
Next Token : â†’, Posbility: 0.0004
Next Token : ::, Posbility: 0.0019
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0122
Next Token :  , Posbility: 0.0332
Next Token :  [], Posbility: 0.0332
Next Token :  1, Posbility: 0.2451
Next Token :  0, Posbility: 0.6680
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0020
Next Token :   , Posbility: 0.0049
Next Token :  , Posbility: 0.0118
Next Token :  |, Posbility: 0.0250
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0133
Next Token :  a, Posbility: 0.0220
Next Token :  [], Posbility: 0.0220
Next Token :  [, Posbility: 0.1621
Next Token :  , Posbility: 0.7266
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : hd, Posbility: 0.0383
Next Token : s, Posbility: 0.1338
Next Token : c, Posbility: 0.1338
Next Token : x, Posbility: 0.2197
Next Token : _, Posbility: 0.3203
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0053
Next Token :   , Posbility: 0.0112
Next Token :  when, Posbility: 0.0347
Next Token : ::, Posbility: 0.1367
Next Token :  , Posbility: 0.7891
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0005
Next Token : â†’, Posbility: 0.0006
Next Token : if, Posbility: 0.0469
Next Token : ::, Posbility: 0.4453
Next Token : ->, Posbility: 0.5039
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0171
Next Token :  , Posbility: 0.1260
Next Token :  count, Posbility: 0.1260
Next Token :  1, Posbility: 0.3418
Next Token : 
, Posbility: 0.3418
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0081
Next Token :   , Posbility: 0.0134
Next Token :      , Posbility: 0.0151
Next Token :       , Posbility: 0.3906
Next Token :     , Posbility: 0.5664
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0287
Next Token : s, Posbility: 0.0325
Next Token : if, Posbility: 0.0537
Next Token : match, Posbility: 0.0608
Next Token : let, Posbility: 0.7383
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0479
Next Token :  sum, Posbility: 0.0479
Next Token :  len, Posbility: 0.0791
Next Token :  rec, Posbility: 0.1299
Next Token :  , Posbility: 0.4551
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0278
Next Token : x, Posbility: 0.0405
Next Token : length, Posbility: 0.0459
Next Token : n, Posbility: 0.1416
Next Token : s, Posbility: 0.2988
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0776
Next Token : 0, Posbility: 0.0776
Next Token : 1, Posbility: 0.1641
Next Token : ', Posbility: 0.1855
Next Token :  =, Posbility: 0.3066
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0052
Next Token :  match, Posbility: 0.0052
Next Token :  [, Posbility: 0.0085
Next Token :  String, Posbility: 0.4648
Next Token :  , Posbility: 0.4648
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Seq, Posbility: 0.0183
Next Token : Int, Posbility: 0.0208
Next Token : Char, Posbility: 0.0820
Next Token : List, Posbility: 0.2871
Next Token : s, Posbility: 0.4180
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0087
Next Token : 
, Posbility: 0.0098
Next Token :  , Posbility: 0.0098
Next Token : ., Posbility: 0.0498
Next Token :  in, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0013
Next Token : 

, Posbility: 0.0019
Next Token :  count, Posbility: 0.0021
Next Token :  , Posbility: 0.0123
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :   , Posbility: 0.0013
Next Token :       , Posbility: 0.0066
Next Token :    , Posbility: 0.0109
Next Token :     , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0359
Next Token : if, Posbility: 0.0762
Next Token : match, Posbility: 0.0762
Next Token : count, Posbility: 0.0977
Next Token : let, Posbility: 0.6367
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0491
Next Token :  count, Posbility: 0.0630
Next Token :  sum, Posbility: 0.0630
Next Token :  rec, Posbility: 0.1328
Next Token :  , Posbility: 0.4648
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0281
Next Token : x, Posbility: 0.0464
Next Token : length, Posbility: 0.0525
Next Token : n, Posbility: 0.1426
Next Token : s, Posbility: 0.3027
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0532
Next Token : ', Posbility: 0.0532
Next Token : _, Posbility: 0.0879
Next Token : 1, Posbility: 0.0996
Next Token :  =, Posbility: 0.5742
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0204
Next Token :  remove, Posbility: 0.0204
Next Token : 
, Posbility: 0.0432
Next Token :  String, Posbility: 0.2490
Next Token :  , Posbility: 0.5273
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0226
Next Token : Int, Posbility: 0.0330
Next Token : Char, Posbility: 0.0422
Next Token : s, Posbility: 0.2754
Next Token : List, Posbility: 0.3535
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : remove, Posbility: 0.0259
Next Token : fold, Posbility: 0.0547
Next Token : map, Posbility: 0.1309
Next Token : filter, Posbility: 0.1689
Next Token : rev, Posbility: 0.4590
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0010
Next Token : (, Posbility: 0.0011
Next Token :  ~, Posbility: 0.0027
Next Token : _, Posbility: 0.0123
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : List, Posbility: 0.0007
Next Token : (, Posbility: 0.0140
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0013
Next Token : ;, Posbility: 0.0015
Next Token : 
, Posbility: 0.0031
Next Token : ,, Posbility: 0.0031
Next Token :  in, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 0.0022
Next Token : 

, Posbility: 0.0045
Next Token :  , Posbility: 0.0075
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0002
Next Token :   , Posbility: 0.0010
Next Token :       , Posbility: 0.0012
Next Token :    , Posbility: 0.0085
Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : count, Posbility: 0.0262
Next Token : (, Posbility: 0.0297
Next Token : List, Posbility: 0.0432
Next Token : match, Posbility: 0.0554
Next Token : let, Posbility: 0.7656
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0378
Next Token :  acc, Posbility: 0.0378
Next Token :  sum, Posbility: 0.0483
Next Token :  rec, Posbility: 0.1318
Next Token :  , Posbility: 0.5898
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0284
Next Token : length, Posbility: 0.0284
Next Token : f, Posbility: 0.0322
Next Token : n, Posbility: 0.0771
Next Token : s, Posbility: 0.5703
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0080
Next Token : 0, Posbility: 0.0103
Next Token : _, Posbility: 0.0116
Next Token : 1, Posbility: 0.0132
Next Token :  =, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0054
Next Token :  [, Posbility: 0.0146
Next Token : 
, Posbility: 0.0398
Next Token :  String, Posbility: 0.1084
Next Token :  , Posbility: 0.8008
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0063
Next Token : fold, Posbility: 0.0063
Next Token : (, Posbility: 0.0081
Next Token : s, Posbility: 0.0986
Next Token : List, Posbility: 0.8242
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0203
Next Token : fold, Posbility: 0.1318
Next Token : filter, Posbility: 0.1924
Next Token : rev, Posbility: 0.1924
Next Token : map, Posbility: 0.2793
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0258
Next Token : _, Posbility: 0.0292
Next Token :  string, Posbility: 0.0481
Next Token : i, Posbility: 0.0791
Next Token :  , Posbility: 0.6641
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0103
Next Token : f, Posbility: 0.0132
Next Token : length, Posbility: 0.0150
Next Token : s, Posbility: 0.0669
Next Token : (, Posbility: 0.8164
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Fun, Posbility: 0.0178
Next Token : function, Posbility: 0.0294
Next Token : +, Posbility: 0.0334
Next Token : String, Posbility: 0.1924
Next Token : fun, Posbility: 0.5898
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0156
Next Token :  v, Posbility: 0.0156
Next Token :  l, Posbility: 0.0156
Next Token :  i, Posbility: 0.0698
Next Token :  , Posbility: 0.8516
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0244
Next Token : d, Posbility: 0.0244
Next Token : s, Posbility: 0.0664
Next Token : c, Posbility: 0.2988
Next Token : x, Posbility: 0.4922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0003
Next Token :  i, Posbility: 0.0003
Next Token : ->, Posbility: 0.0004
Next Token : s, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : -, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0143
Next Token :  int, Posbility: 0.0143
Next Token :  string, Posbility: 0.0143
Next Token :  String, Posbility: 0.1055
Next Token :  , Posbility: 0.7773
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0659
Next Token : List, Posbility: 0.0752
Next Token : (, Posbility: 0.0962
Next Token : Int, Posbility: 0.1089
Next Token : x, Posbility: 0.4883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0791
Next Token :  *, Posbility: 0.1016
Next Token :  , Posbility: 0.1670
Next Token : ), Posbility: 0.1670
Next Token :  +, Posbility: 0.2754
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0280
Next Token :  "0", Posbility: 0.0461
Next Token :  , Posbility: 0.2061
Next Token :  '0', Posbility: 0.2061
Next Token :  1), Posbility: 0.3398
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :  ~, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0001
Next Token : List, Posbility: 0.0003
Next Token : x, Posbility: 0.0004
Next Token : (, Posbility: 0.0017
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0027
Next Token :  , Posbility: 0.0034
Next Token :  |, Posbility: 0.0135
Next Token : 
, Posbility: 0.0223
Next Token :  in, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 0.0010
Next Token :  , Posbility: 0.0046
Next Token : 

, Posbility: 0.0067
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :       , Posbility: 0.0004
Next Token :   , Posbility: 0.0008
Next Token :    , Posbility: 0.0076
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0258
Next Token : (, Posbility: 0.0292
Next Token : match, Posbility: 0.0425
Next Token : count, Posbility: 0.0698
Next Token : let, Posbility: 0.7500
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0186
Next Token :  len, Posbility: 0.0210
Next Token :  sum, Posbility: 0.0238
Next Token :  rec, Posbility: 0.0645
Next Token :  , Posbility: 0.7852
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0092
Next Token : f, Posbility: 0.0104
Next Token : x, Posbility: 0.0194
Next Token : n, Posbility: 0.0364
Next Token : s, Posbility: 0.8242
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0035
Next Token : s, Posbility: 0.0045
Next Token : _, Posbility: 0.0051
Next Token : 1, Posbility: 0.0058
Next Token :  =, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0023
Next Token : 
, Posbility: 0.0063
Next Token :  ", Posbility: 0.0063
Next Token :  String, Posbility: 0.0461
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0009
Next Token : Map, Posbility: 0.0016
Next Token : (, Posbility: 0.0030
Next Token : s, Posbility: 0.0466
Next Token : List, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : concat, Posbility: 0.0203
Next Token : fold, Posbility: 0.0625
Next Token : filter, Posbility: 0.2178
Next Token : rev, Posbility: 0.2178
Next Token : map, Posbility: 0.2793
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0077
Next Token :  int, Posbility: 0.0077
Next Token :  string, Posbility: 0.0162
Next Token : i, Posbility: 0.0439
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0069
Next Token : s, Posbility: 0.0078
Next Token : length, Posbility: 0.0101
Next Token : Int, Posbility: 0.0240
Next Token : (, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : let, Posbility: 0.0005
Next Token : function, Posbility: 0.0006
Next Token : +, Posbility: 0.0017
Next Token : String, Posbility: 0.0075
Next Token : fun, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0015
Next Token :  len, Posbility: 0.0017
Next Token :  v, Posbility: 0.0017
Next Token :  i, Posbility: 0.0109
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0024
Next Token : c, Posbility: 0.0024
Next Token : _, Posbility: 0.0040
Next Token : s, Posbility: 0.0040
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0001
Next Token :  i, Posbility: 0.0002
Next Token :  =>, Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0056
Next Token :  int, Posbility: 0.0093
Next Token :  1, Posbility: 0.0154
Next Token :  String, Posbility: 0.0688
Next Token :  , Posbility: 0.8398
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0238
Next Token : if, Posbility: 0.0305
Next Token : (, Posbility: 0.0444
Next Token : Int, Posbility: 0.0444
Next Token : x, Posbility: 0.7891
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0225
Next Token :  %, Posbility: 0.0476
Next Token :  +, Posbility: 0.1660
Next Token :  *, Posbility: 0.2734
Next Token :  , Posbility: 0.4512
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : >, Posbility: 0.0049
Next Token : div, Posbility: 0.0055
Next Token : ^, Posbility: 0.0103
Next Token : /, Posbility: 0.0459
Next Token : -, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ', Posbility: 0.0029
Next Token :  '0', Posbility: 0.0061
Next Token :  2), Posbility: 0.0061
Next Token :  , Posbility: 0.0579
Next Token :  1), Posbility: 0.9062
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :   , Posbility: 0.0004
Next Token : 
, Posbility: 0.0032
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0019
Next Token : 

, Posbility: 0.0085
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0006
Next Token :    , Posbility: 0.0059
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0203
Next Token : (, Posbility: 0.0261
Next Token : match, Posbility: 0.0378
Next Token : count, Posbility: 0.0806
Next Token : let, Posbility: 0.7617
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0124
Next Token :  count, Posbility: 0.0124
Next Token :  sum, Posbility: 0.0124
Next Token :  rec, Posbility: 0.0432
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0060
Next Token : length, Posbility: 0.0060
Next Token : x, Posbility: 0.0144
Next Token : n, Posbility: 0.0210
Next Token : s, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0022
Next Token : ', Posbility: 0.0022
Next Token : _, Posbility: 0.0024
Next Token : 1, Posbility: 0.0035
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0023
Next Token : 
, Posbility: 0.0063
Next Token :  ", Posbility: 0.0063
Next Token :  String, Posbility: 0.0464
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0005
Next Token : Map, Posbility: 0.0010
Next Token : (, Posbility: 0.0024
Next Token : s, Posbility: 0.0289
Next Token : List, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0302
Next Token : concat, Posbility: 0.0302
Next Token : rev, Posbility: 0.0820
Next Token : filter, Posbility: 0.1357
Next Token : map, Posbility: 0.6055
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0060
Next Token : _, Posbility: 0.0069
Next Token :  string, Posbility: 0.0078
Next Token : i, Posbility: 0.0574
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0027
Next Token : length, Posbility: 0.0027
Next Token : Char, Posbility: 0.0056
Next Token : Int, Posbility: 0.0222
Next Token : (, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : function, Posbility: 0.0003
Next Token : Int, Posbility: 0.0003
Next Token : +, Posbility: 0.0009
Next Token : String, Posbility: 0.0046
Next Token : fun, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0005
Next Token :  l, Posbility: 0.0008
Next Token :  v, Posbility: 0.0008
Next Token :  i, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0012
Next Token : (, Posbility: 0.0012
Next Token : c, Posbility: 0.0012
Next Token : s, Posbility: 0.0025
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0093
Next Token :  int, Posbility: 0.0154
Next Token :  string, Posbility: 0.0154
Next Token :  String, Posbility: 0.0693
Next Token :  , Posbility: 0.8438
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0398
Next Token : Char, Posbility: 0.0398
Next Token : (, Posbility: 0.0449
Next Token : Int, Posbility: 0.0742
Next Token : x, Posbility: 0.7031
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : *, Posbility: 0.0117
Next Token :  %, Posbility: 0.0248
Next Token :  , Posbility: 0.1426
Next Token :  +, Posbility: 0.1426
Next Token :  *, Posbility: 0.6406
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1), Posbility: 0.0112
Next Token :  10, Posbility: 0.0305
Next Token :  , Posbility: 0.0830
Next Token :  2), Posbility: 0.2256
Next Token :  10), Posbility: 0.6133
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  and, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0013
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0015
Next Token : 

, Posbility: 0.0067
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0005
Next Token :    , Posbility: 0.0052
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0175
Next Token : s, Posbility: 0.0175
Next Token : match, Posbility: 0.0288
Next Token : count, Posbility: 0.0476
Next Token : let, Posbility: 0.8438
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0071
Next Token :  len, Posbility: 0.0080
Next Token :  sum, Posbility: 0.0080
Next Token :  rec, Posbility: 0.0192
Next Token :  , Posbility: 0.9258
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0024
Next Token : r, Posbility: 0.0024
Next Token : x, Posbility: 0.0064
Next Token : n, Posbility: 0.0082
Next Token : s, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0010
Next Token : ', Posbility: 0.0010
Next Token : _, Posbility: 0.0015
Next Token : 1, Posbility: 0.0017
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0014
Next Token :  [, Posbility: 0.0014
Next Token : 
, Posbility: 0.0038
Next Token :  String, Posbility: 0.0469
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0004
Next Token : Int, Posbility: 0.0006
Next Token : (, Posbility: 0.0019
Next Token : s, Posbility: 0.0201
Next Token : List, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Ext, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0157
Next Token : rev, Posbility: 0.0157
Next Token : concat, Posbility: 0.0157
Next Token : filter, Posbility: 0.0427
Next Token : map, Posbility: 0.8594
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0016
Next Token :  string, Posbility: 0.0020
Next Token : _, Posbility: 0.0026
Next Token : i, Posbility: 0.0466
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0009
Next Token : List, Posbility: 0.0017
Next Token : Char, Posbility: 0.0019
Next Token : Int, Posbility: 0.0096
Next Token : (, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : function, Posbility: 0.0002
Next Token : Int, Posbility: 0.0002
Next Token : +, Posbility: 0.0004
Next Token : String, Posbility: 0.0019
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0003
Next Token :  l, Posbility: 0.0003
Next Token :  v, Posbility: 0.0004
Next Token :  i, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : _, Posbility: 0.0006
Next Token : y, Posbility: 0.0006
Next Token : s, Posbility: 0.0007
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0098
Next Token :  10, Posbility: 0.0098
Next Token :  int, Posbility: 0.0161
Next Token :  String, Posbility: 0.0437
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0085
Next Token : if, Posbility: 0.0141
Next Token : Int, Posbility: 0.0298
Next Token : (, Posbility: 0.0435
Next Token : x, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0025
Next Token :  *, Posbility: 0.0304
Next Token :  %, Posbility: 0.0391
Next Token :  +, Posbility: 0.1357
Next Token :  , Posbility: 0.7812
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : //, Posbility: 0.0097
Next Token : div, Posbility: 0.0097
Next Token : ^, Posbility: 0.0097
Next Token : -, Posbility: 0.0923
Next Token : /, Posbility: 0.8750
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  11, Posbility: 0.0024
Next Token :  , Posbility: 0.0064
Next Token :  100), Posbility: 0.0064
Next Token :  10, Posbility: 0.0176
Next Token :  10), Posbility: 0.9570
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0007
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.0124
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0007
Next Token :    , Posbility: 0.0046
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0190
Next Token : (, Posbility: 0.0216
Next Token : match, Posbility: 0.0356
Next Token : count, Posbility: 0.0518
Next Token : let, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0099
Next Token :  sum, Posbility: 0.0099
Next Token :  count, Posbility: 0.0127
Next Token :  rec, Posbility: 0.0344
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0038
Next Token : r, Posbility: 0.0038
Next Token : x, Posbility: 0.0132
Next Token : n, Posbility: 0.0168
Next Token : s, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0019
Next Token : ', Posbility: 0.0019
Next Token : _, Posbility: 0.0022
Next Token : 1, Posbility: 0.0028
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0023
Next Token :  ", Posbility: 0.0039
Next Token : 
, Posbility: 0.0064
Next Token :  String, Posbility: 0.0287
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0005
Next Token : Map, Posbility: 0.0005
Next Token : (, Posbility: 0.0021
Next Token : s, Posbility: 0.0178
Next Token : List, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : concat, Posbility: 0.0140
Next Token : fold, Posbility: 0.0229
Next Token : rev, Posbility: 0.0295
Next Token : filter, Posbility: 0.1030
Next Token : map, Posbility: 0.7617
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0026
Next Token :  string, Posbility: 0.0034
Next Token : _, Posbility: 0.0043
Next Token : i, Posbility: 0.0410
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0011
Next Token : List, Posbility: 0.0024
Next Token : Char, Posbility: 0.0024
Next Token : Int, Posbility: 0.0139
Next Token : (, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Int, Posbility: 0.0002
Next Token : function, Posbility: 0.0003
Next Token : +, Posbility: 0.0005
Next Token : String, Posbility: 0.0025
Next Token : fun, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0003
Next Token :  a, Posbility: 0.0004
Next Token :  v, Posbility: 0.0005
Next Token :  i, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0007
Next Token : c, Posbility: 0.0007
Next Token : _, Posbility: 0.0013
Next Token : s, Posbility: 0.0015
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0092
Next Token :  string, Posbility: 0.0151
Next Token :  int, Posbility: 0.0249
Next Token :  String, Posbility: 0.0679
Next Token :  , Posbility: 0.8242
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0201
Next Token : if, Posbility: 0.0332
Next Token : Int, Posbility: 0.0620
Next Token : (, Posbility: 0.0703
Next Token : x, Posbility: 0.7578
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0099
Next Token :  *, Posbility: 0.0645
Next Token :  +, Posbility: 0.1748
Next Token :  , Posbility: 0.2246
Next Token :  %, Posbility: 0.4766
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  11, Posbility: 0.0024
Next Token :  100), Posbility: 0.0024
Next Token :  , Posbility: 0.0066
Next Token :  10, Posbility: 0.0066
Next Token :  10), Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token :  i, Posbility: 0.0001
Next Token :  in, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token : 
, Posbility: 0.0009
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : 

, Posbility: 0.0110
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0005
Next Token :    , Posbility: 0.0059
Next Token :     , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0216
Next Token : s, Posbility: 0.0216
Next Token : match, Posbility: 0.0356
Next Token : count, Posbility: 0.0586
Next Token : let, Posbility: 0.8086
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0123
Next Token :  sum, Posbility: 0.0139
Next Token :  count, Posbility: 0.0203
Next Token :  rec, Posbility: 0.0334
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0048
Next Token : r, Posbility: 0.0048
Next Token : x, Posbility: 0.0129
Next Token : n, Posbility: 0.0214
Next Token : s, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0015
Next Token : s, Posbility: 0.0019
Next Token : _, Posbility: 0.0022
Next Token : 1, Posbility: 0.0028
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0014
Next Token :  ", Posbility: 0.0024
Next Token : 
, Posbility: 0.0064
Next Token :  String, Posbility: 0.0288
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0004
Next Token : fold, Posbility: 0.0005
Next Token : (, Posbility: 0.0019
Next Token : s, Posbility: 0.0140
Next Token : List, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : concat, Posbility: 0.0178
Next Token : fold, Posbility: 0.0294
Next Token : rev, Posbility: 0.0378
Next Token : filter, Posbility: 0.0801
Next Token : map, Posbility: 0.7578
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0018
Next Token :  string, Posbility: 0.0023
Next Token : _, Posbility: 0.0027
Next Token : i, Posbility: 0.0325
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0011
Next Token : Char, Posbility: 0.0013
Next Token : List, Posbility: 0.0024
Next Token : Int, Posbility: 0.0085
Next Token : (, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0002
Next Token : function, Posbility: 0.0003
Next Token : +, Posbility: 0.0005
Next Token : String, Posbility: 0.0015
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0003
Next Token :  a, Posbility: 0.0005
Next Token :  v, Posbility: 0.0006
Next Token :  i, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0006
Next Token : s, Posbility: 0.0009
Next Token : _, Posbility: 0.0010
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0096
Next Token :  10, Posbility: 0.0096
Next Token :  1, Posbility: 0.0159
Next Token :  String, Posbility: 0.0430
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Char, Posbility: 0.0167
Next Token : Int, Posbility: 0.0275
Next Token : if, Posbility: 0.0400
Next Token : (, Posbility: 0.0581
Next Token : x, Posbility: 0.8047
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0183
Next Token :  %, Posbility: 0.0640
Next Token :  *, Posbility: 0.1055
Next Token :  , Posbility: 0.2871
Next Token :  +, Posbility: 0.4727
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0), Posbility: 0.0386
Next Token :  10), Posbility: 0.0386
Next Token :  '0', Posbility: 0.0635
Next Token :  , Posbility: 0.2852
Next Token :  1), Posbility: 0.4688
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token :  *, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0015
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0002
Next Token :   , Posbility: 0.0005
Next Token :  , Posbility: 0.0031
Next Token : 

, Posbility: 0.0124
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :       , Posbility: 0.0004
Next Token :   , Posbility: 0.0013
Next Token :    , Posbility: 0.0085
Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0181
Next Token : (, Posbility: 0.0262
Next Token : match, Posbility: 0.0297
Next Token : count, Posbility: 0.1035
Next Token : let, Posbility: 0.7656
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0050
Next Token :  len, Posbility: 0.0056
Next Token :  count, Posbility: 0.0082
Next Token :  rec, Posbility: 0.0105
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0030
Next Token : r, Posbility: 0.0030
Next Token : x, Posbility: 0.0082
Next Token : n, Posbility: 0.0135
Next Token : s, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0009
Next Token : ', Posbility: 0.0009
Next Token : _, Posbility: 0.0010
Next Token : 1, Posbility: 0.0015
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0012
Next Token :  [, Posbility: 0.0012
Next Token : 
, Posbility: 0.0019
Next Token :  String, Posbility: 0.0109
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0003
Next Token : Map, Posbility: 0.0003
Next Token : (, Posbility: 0.0013
Next Token : s, Posbility: 0.0109
Next Token : List, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Ext, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reverse, Posbility: 0.0061
Next Token : fold, Posbility: 0.0061
Next Token : rev, Posbility: 0.0166
Next Token : filter, Posbility: 0.0273
Next Token : map, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  str, Posbility: 0.0003
Next Token :  ((, Posbility: 0.0004
Next Token : _, Posbility: 0.0006
Next Token : i, Posbility: 0.0052
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0005
Next Token : Int, Posbility: 0.0005
Next Token : s, Posbility: 0.0006
Next Token : List, Posbility: 0.0008
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : let, Posbility: 0.0001
Next Token : function, Posbility: 0.0002
Next Token : +, Posbility: 0.0002
Next Token : String, Posbility: 0.0002
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  a, Posbility: 0.0002
Next Token :  v, Posbility: 0.0002
Next Token :  i, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : s, Posbility: 0.0003
Next Token : y, Posbility: 0.0003
Next Token : _, Posbility: 0.0007
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Math, Posbility: 0.0015
Next Token :  String, Posbility: 0.0031
Next Token :  10, Posbility: 0.0031
Next Token :  1, Posbility: 0.0040
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0010
Next Token : if, Posbility: 0.0019
Next Token : -, Posbility: 0.0031
Next Token : (, Posbility: 0.0075
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0010
Next Token :  %, Posbility: 0.0156
Next Token :  +, Posbility: 0.0422
Next Token :  *, Posbility: 0.0894
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : //, Posbility: 0.0002
Next Token : <, Posbility: 0.0003
Next Token : ^, Posbility: 0.0009
Next Token : /, Posbility: 0.0293
Next Token : -, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0009
Next Token :  3), Posbility: 0.0009
Next Token :  10), Posbility: 0.0024
Next Token :  2), Posbility: 0.0067
Next Token :  1), Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0046
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :         , Posbility: 0.0001
Next Token :   , Posbility: 0.0004
Next Token :    , Posbility: 0.0017
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0090
Next Token : match, Posbility: 0.0103
Next Token : (, Posbility: 0.0132
Next Token : count, Posbility: 0.0245
Next Token : let, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0010
Next Token :  count, Posbility: 0.0010
Next Token :  sum, Posbility: 0.0010
Next Token :  rec, Posbility: 0.0028
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0006
Next Token : c, Posbility: 0.0007
Next Token : n, Posbility: 0.0019
Next Token : x, Posbility: 0.0022
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token : ', Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : 1, Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0002
Next Token :  [, Posbility: 0.0003
Next Token : 
, Posbility: 0.0007
Next Token :  String, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Map, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : s, Posbility: 0.0028
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Ext, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0012
Next Token : rev, Posbility: 0.0012
Next Token : concat, Posbility: 0.0012
Next Token : filter, Posbility: 0.0052
Next Token : map, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  (*, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0002
Next Token : i, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : Int, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : String, Posbility: 0.0000
Next Token : +, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  a, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  i, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Math, Posbility: 0.0003
Next Token :  1, Posbility: 0.0005
Next Token :  String, Posbility: 0.0009
Next Token :  10, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0002
Next Token : -, Posbility: 0.0003
Next Token : if, Posbility: 0.0003
Next Token : (, Posbility: 0.0036
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0005
Next Token :  %, Posbility: 0.0066
Next Token :  +, Posbility: 0.0066
Next Token :  , Posbility: 0.0108
Next Token :  *, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0062
Next Token :  10, Posbility: 0.0062
Next Token :  2), Posbility: 0.0062
Next Token :  100), Posbility: 0.0459
Next Token :  10), Posbility: 0.9219
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :    , Posbility: 0.0015
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0035
Next Token : (, Posbility: 0.0065
Next Token : s, Posbility: 0.0074
Next Token : count, Posbility: 0.0107
Next Token : let, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0004
Next Token :  len, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0006
Next Token :  sum, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0006
Next Token : n, Posbility: 0.0008
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  String, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : s, Posbility: 0.0015
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Ext, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reverse, Posbility: 0.0002
Next Token : concat, Posbility: 0.0002
Next Token : fold, Posbility: 0.0002
Next Token : filter, Posbility: 0.0010
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : i, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : +, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0000
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Math, Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  10, Posbility: 0.0002
Next Token :  String, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0017
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0001
Next Token :  *, Posbility: 0.0009
Next Token :  +, Posbility: 0.0019
Next Token :  %, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : -, Posbility: 0.0003
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  100), Posbility: 0.0001
Next Token : 10, Posbility: 0.0002
Next Token :  10, Posbility: 0.0003
Next Token :  10), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0005
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0059
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0008
Next Token :    , Posbility: 0.0036
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0100
Next Token : s, Posbility: 0.0146
Next Token : (, Posbility: 0.0166
Next Token : count, Posbility: 0.0309
Next Token : let, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0015
Next Token :  sum, Posbility: 0.0017
Next Token :  count, Posbility: 0.0019
Next Token :  rec, Posbility: 0.0040
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0006
Next Token : c, Posbility: 0.0007
Next Token : x, Posbility: 0.0024
Next Token : n, Posbility: 0.0028
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : 1, Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0002
Next Token :  [, Posbility: 0.0005
Next Token : 
, Posbility: 0.0008
Next Token :  String, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : s, Posbility: 0.0041
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Ext, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sort, Posbility: 0.0009
Next Token : reverse, Posbility: 0.0009
Next Token : rev, Posbility: 0.0012
Next Token : filter, Posbility: 0.0052
Next Token : map, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : i, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : Int, Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : fn, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : +, Posbility: 0.0001
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0003
Next Token :  10, Posbility: 0.0003
Next Token :  1, Posbility: 0.0004
Next Token :  String, Posbility: 0.0005
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0003
Next Token : Int, Posbility: 0.0003
Next Token : if, Posbility: 0.0004
Next Token : (, Posbility: 0.0046
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0004
Next Token :  , Posbility: 0.0060
Next Token :  *, Posbility: 0.0126
Next Token :  +, Posbility: 0.0933
Next Token :  %, Posbility: 0.8867
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 10, Posbility: 0.0001
Next Token :  100), Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  10, Posbility: 0.0006
Next Token :  10), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0179
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :       , Posbility: 0.0004
Next Token :   , Posbility: 0.0017
Next Token :    , Posbility: 0.0124
Next Token :     , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0254
Next Token : (, Posbility: 0.0327
Next Token : s, Posbility: 0.0369
Next Token : count, Posbility: 0.1006
Next Token : let, Posbility: 0.7422
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0061
Next Token :  len, Posbility: 0.0078
Next Token :  count, Posbility: 0.0114
Next Token :  rec, Posbility: 0.0273
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0038
Next Token : c, Posbility: 0.0038
Next Token : x, Posbility: 0.0104
Next Token : n, Posbility: 0.0133
Next Token : s, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0012
Next Token : _, Posbility: 0.0013
Next Token : ', Posbility: 0.0015
Next Token : 1, Posbility: 0.0028
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0024
Next Token :  [, Posbility: 0.0031
Next Token : 
, Posbility: 0.0051
Next Token :  String, Posbility: 0.0108
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0003
Next Token : Map, Posbility: 0.0003
Next Token : (, Posbility: 0.0021
Next Token : s, Posbility: 0.0178
Next Token : List, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0098
Next Token : concat, Posbility: 0.0098
Next Token : filter, Posbility: 0.0265
Next Token : rev, Posbility: 0.0265
Next Token : map, Posbility: 0.8789
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token :  ((, Posbility: 0.0006
Next Token : _, Posbility: 0.0008
Next Token : i, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0005
Next Token : List, Posbility: 0.0007
Next Token : s, Posbility: 0.0008
Next Token : Int, Posbility: 0.0008
Next Token : (, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : let, Posbility: 0.0001
Next Token : function, Posbility: 0.0002
Next Token : String, Posbility: 0.0003
Next Token : +, Posbility: 0.0003
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0003
Next Token :  a, Posbility: 0.0004
Next Token :  v, Posbility: 0.0004
Next Token :  i, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : s, Posbility: 0.0004
Next Token : y, Posbility: 0.0005
Next Token : _, Posbility: 0.0008
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0009
Next Token :  10, Posbility: 0.0015
Next Token :  String, Posbility: 0.0040
Next Token :  1, Posbility: 0.0066
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0019
Next Token : List, Posbility: 0.0024
Next Token : if, Posbility: 0.0035
Next Token : (, Posbility: 0.0156
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0009
Next Token :  %, Posbility: 0.0023
Next Token :  , Posbility: 0.0171
Next Token :  *, Posbility: 0.0464
Next Token :  +, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0009
Next Token :  10), Posbility: 0.0024
Next Token :  , Posbility: 0.0066
Next Token :  2), Posbility: 0.0066
Next Token :  1), Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0041
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0006
Next Token :    , Posbility: 0.0041
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0049
Next Token : match, Posbility: 0.0063
Next Token : (, Posbility: 0.0092
Next Token : count, Posbility: 0.0250
Next Token : let, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0008
Next Token :  len, Posbility: 0.0012
Next Token :  rec, Posbility: 0.0015
Next Token :  count, Posbility: 0.0017
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0004
Next Token : c, Posbility: 0.0007
Next Token : x, Posbility: 0.0012
Next Token : n, Posbility: 0.0028
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : 2, Posbility: 0.0002
Next Token : ', Posbility: 0.0002
Next Token : 1, Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token :  String, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : s, Posbility: 0.0025
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sort, Posbility: 0.0007
Next Token : rev, Posbility: 0.0009
Next Token : reverse, Posbility: 0.0009
Next Token : filter, Posbility: 0.0031
Next Token : map, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : i, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : fn, Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0001
Next Token :  Math, Posbility: 0.0001
Next Token :  String, Posbility: 0.0002
Next Token :  1, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : -, Posbility: 0.0005
Next Token : (, Posbility: 0.0013
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0001
Next Token :  %, Posbility: 0.0002
Next Token :  *, Posbility: 0.0019
Next Token :  +, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : ^, Posbility: 0.0001
Next Token : /, Posbility: 0.0006
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  3), Posbility: 0.0001
Next Token :  10), Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  2), Posbility: 0.0003
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0052
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0006
Next Token :    , Posbility: 0.0022
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0056
Next Token : match, Posbility: 0.0063
Next Token : (, Posbility: 0.0133
Next Token : count, Posbility: 0.0249
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0010
Next Token :  count, Posbility: 0.0010
Next Token :  sum, Posbility: 0.0010
Next Token :  rec, Posbility: 0.0019
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : c, Posbility: 0.0005
Next Token : x, Posbility: 0.0013
Next Token : n, Posbility: 0.0019
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : 1, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  String, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Map, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : s, Posbility: 0.0025
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reverse, Posbility: 0.0005
Next Token : concat, Posbility: 0.0007
Next Token : rev, Posbility: 0.0008
Next Token : filter, Posbility: 0.0015
Next Token : map, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (*, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token : i, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : +, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Math, Posbility: 0.0001
Next Token :  1, Posbility: 0.0002
Next Token :  10, Posbility: 0.0002
Next Token :  String, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0013
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0002
Next Token :  %, Posbility: 0.0022
Next Token :  , Posbility: 0.0028
Next Token :  +, Posbility: 0.0067
Next Token :  *, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token :  10, Posbility: 0.0007
Next Token :  100), Posbility: 0.0025
Next Token :  10), Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0013
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :    , Posbility: 0.0012
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0013
Next Token : s, Posbility: 0.0017
Next Token : (, Posbility: 0.0040
Next Token : count, Posbility: 0.0058
Next Token : let, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0003
Next Token :  sum, Posbility: 0.0003
Next Token :  len, Posbility: 0.0003
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0003
Next Token : n, Posbility: 0.0005
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  String, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0009
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Ext, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : concat, Posbility: 0.0001
Next Token : sort, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0001
Next Token : filter, Posbility: 0.0003
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0000
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0000
Next Token :  Math, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0007
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token :  %, Posbility: 0.0002
Next Token :  +, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  100), Posbility: 0.0000
Next Token : 10, Posbility: 0.0001
Next Token :  10, Posbility: 0.0001
Next Token :  10), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0006
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0085
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0002
Next Token :       , Posbility: 0.0003
Next Token :   , Posbility: 0.0009
Next Token :    , Posbility: 0.0041
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0070
Next Token : s, Posbility: 0.0090
Next Token : (, Posbility: 0.0167
Next Token : count, Posbility: 0.0277
Next Token : let, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0013
Next Token :  len, Posbility: 0.0015
Next Token :  count, Posbility: 0.0015
Next Token :  rec, Posbility: 0.0031
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0006
Next Token : c, Posbility: 0.0007
Next Token : x, Posbility: 0.0022
Next Token : n, Posbility: 0.0031
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0002
Next Token : _, Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token : 1, Posbility: 0.0005
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0002
Next Token :  [, Posbility: 0.0004
Next Token : 
, Posbility: 0.0009
Next Token :  String, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : s, Posbility: 0.0032
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0006
Next Token : reverse, Posbility: 0.0007
Next Token : sort, Posbility: 0.0007
Next Token : filter, Posbility: 0.0022
Next Token : map, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : i, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : +, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0001
Next Token :  10, Posbility: 0.0001
Next Token :  1, Posbility: 0.0002
Next Token :  String, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : (, Posbility: 0.0019
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0002
Next Token :  , Posbility: 0.0030
Next Token :  *, Posbility: 0.0049
Next Token :  +, Posbility: 0.0471
Next Token :  %, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x %
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 10, Posbility: 0.0000
Next Token :  100), Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 0.0003
Next Token :  10), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0140
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0004
Next Token :       , Posbility: 0.0006
Next Token :   , Posbility: 0.0015
Next Token :    , Posbility: 0.0109
Next Token :     , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0131
Next Token : (, Posbility: 0.0315
Next Token : s, Posbility: 0.0315
Next Token : count, Posbility: 0.0664
Next Token : let, Posbility: 0.8086
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0030
Next Token :  len, Posbility: 0.0039
Next Token :  count, Posbility: 0.0064
Next Token :  rec, Posbility: 0.0154
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0016
Next Token : r, Posbility: 0.0016
Next Token : x, Posbility: 0.0040
Next Token : n, Posbility: 0.0084
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0005
Next Token : s, Posbility: 0.0005
Next Token : ', Posbility: 0.0007
Next Token : 1, Posbility: 0.0013
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0010
Next Token :  [, Posbility: 0.0015
Next Token : 
, Posbility: 0.0019
Next Token :  String, Posbility: 0.0040
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : Map, Posbility: 0.0001
Next Token : (, Posbility: 0.0012
Next Token : s, Posbility: 0.0097
Next Token : List, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : append, Posbility: 0.0031
Next Token : reverse, Posbility: 0.0031
Next Token : rev, Posbility: 0.0051
Next Token : filter, Posbility: 0.0065
Next Token : map, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  ((, Posbility: 0.0002
Next Token : i, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : f, Posbility: 0.0002
Next Token : List, Posbility: 0.0002
Next Token : s, Posbility: 0.0003
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : String, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : +, Posbility: 0.0001
Next Token : function, Posbility: 0.0002
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  v, Posbility: 0.0002
Next Token :  i, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : _, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1), Posbility: 0.0003
Next Token :  10, Posbility: 0.0005
Next Token :  String, Posbility: 0.0015
Next Token :  1, Posbility: 0.0025
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0006
Next Token : List, Posbility: 0.0007
Next Token : if, Posbility: 0.0008
Next Token : (, Posbility: 0.0059
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0009
Next Token :  %, Posbility: 0.0015
Next Token :  , Posbility: 0.0139
Next Token :  *, Posbility: 0.0139
Next Token :  +, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  3), Posbility: 0.0002
Next Token :  10), Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :  2), Posbility: 0.0009
Next Token :  1), Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :    , Posbility: 0.0019
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0021
Next Token : s, Posbility: 0.0027
Next Token : (, Posbility: 0.0051
Next Token : count, Posbility: 0.0095
Next Token : let, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0003
Next Token :  len, Posbility: 0.0004
Next Token :  rec, Posbility: 0.0005
Next Token :  count, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : c, Posbility: 0.0003
Next Token : x, Posbility: 0.0005
Next Token : n, Posbility: 0.0017
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  String, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0008
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sort, Posbility: 0.0002
Next Token : rev, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0002
Next Token : filter, Posbility: 0.0006
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : +, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token :  Math, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0001
Next Token :  -1), Posbility: 0.0001
Next Token :  *, Posbility: 0.0006
Next Token :  +, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : /, Posbility: 0.0003
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  3), Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  2), Posbility: 0.0001
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0041
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :   , Posbility: 0.0005
Next Token :    , Posbility: 0.0022
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0021
Next Token : match, Posbility: 0.0031
Next Token : (, Posbility: 0.0074
Next Token : count, Posbility: 0.0137
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0003
Next Token :  len, Posbility: 0.0005
Next Token :  count, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : c, Posbility: 0.0003
Next Token : x, Posbility: 0.0005
Next Token : n, Posbility: 0.0010
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  String, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0009
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reverse, Posbility: 0.0002
Next Token : concat, Posbility: 0.0002
Next Token : rev, Posbility: 0.0002
Next Token : filter, Posbility: 0.0005
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : i, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1), Posbility: 0.0000
Next Token :  10, Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  String, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0001
Next Token :  %, Posbility: 0.0006
Next Token :  , Posbility: 0.0010
Next Token :  +, Posbility: 0.0041
Next Token :  *, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  20, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  10, Posbility: 0.0002
Next Token :  100), Posbility: 0.0003
Next Token :  10), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :    , Posbility: 0.0008
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0005
Next Token : s, Posbility: 0.0010
Next Token : (, Posbility: 0.0017
Next Token : count, Posbility: 0.0022
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0001
Next Token :  sum, Posbility: 0.0001
Next Token :  count, Posbility: 0.0001
Next Token :  len, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : n, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 0.0002
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reduce, Posbility: 0.0000
Next Token : reverse, Posbility: 0.0000
Next Token : sort, Posbility: 0.0000
Next Token : filter, Posbility: 0.0001
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0000
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  Math, Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  %, Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =10), Posbility: 0.0000
Next Token :  100), Posbility: 0.0000
Next Token : 10, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  10), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : st, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0041
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0006
Next Token :    , Posbility: 0.0025
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0027
Next Token : match, Posbility: 0.0031
Next Token : (, Posbility: 0.0084
Next Token : count, Posbility: 0.0121
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let
 score:False
Error type: noerr
---------------------------
Next Token :  count, Posbility: 0.0004
Next Token :  len, Posbility: 0.0005
Next Token :  sum, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : c, Posbility: 0.0003
Next Token : x, Posbility: 0.0008
Next Token : n, Posbility: 0.0015
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s =
 score:False
Error type: noerr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  String, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : s, Posbility: 0.0013
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.
 score:False
Error type: noerr
---------------------------
Next Token : sort, Posbility: 0.0002
Next Token : rev, Posbility: 0.0002
Next Token : reverse, Posbility: 0.0003
Next Token : filter, Posbility: 0.0007
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : i, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map 
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (
 score:False
Error type: noerr
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x 
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x ->
 score:False
Error type: noerr
---------------------------
Next Token :  Math, Posbility: 0.0000
Next Token :  10, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  String, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> 
 score:False
Error type: noerr
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0007
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token :  *, Posbility: 0.0009
Next Token :  +, Posbility: 0.0052
Next Token :  %, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x %
 score:False
Error type: noerr
---------------------------
Next Token : 10, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  100), Posbility: 0.0000
Next Token :  10, Posbility: 0.0002
Next Token :  10), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10)
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0110
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :       , Posbility: 0.0003
Next Token :   , Posbility: 0.0012
Next Token :    , Posbility: 0.0085
Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0060
Next Token : s, Posbility: 0.0164
Next Token : (, Posbility: 0.0186
Next Token : count, Posbility: 0.0393
Next Token : let, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let
 score:False
Error type: noerr
---------------------------
Next Token :  sum, Posbility: 0.0010
Next Token :  len, Posbility: 0.0017
Next Token :  count, Posbility: 0.0019
Next Token :  rec, Posbility: 0.0040
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let 
 score:False
Error type: noerr
---------------------------
Next Token : r, Posbility: 0.0006
Next Token : c, Posbility: 0.0008
Next Token : x, Posbility: 0.0017
Next Token : n, Posbility: 0.0040
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : 2, Posbility: 0.0002
Next Token : ', Posbility: 0.0002
Next Token : 1, Posbility: 0.0006
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s =
 score:False
Error type: noerr
---------------------------
Next Token :  ", Posbility: 0.0003
Next Token :  [, Posbility: 0.0006
Next Token : 
, Posbility: 0.0010
Next Token :  String, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : s, Posbility: 0.0036
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.
 score:False
Error type: noerr
---------------------------
Next Token : append, Posbility: 0.0008
Next Token : reverse, Posbility: 0.0010
Next Token : filter, Posbility: 0.0015
Next Token : rev, Posbility: 0.0017
Next Token : map, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : i, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token : fn, Posbility: 0.0001
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  k, Posbility: 0.0000
Next Token :  v, Posbility: 0.0001
Next Token :  i, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x 
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x ->
 score:False
Error type: noerr
---------------------------
Next Token :  1), Posbility: 0.0002
Next Token :  10, Posbility: 0.0002
Next Token :  String, Posbility: 0.0003
Next Token :  1, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> 
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0002
Next Token : List, Posbility: 0.0003
Next Token : if, Posbility: 0.0003
Next Token : (, Posbility: 0.0028
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x
 score:False
Error type: noerr
---------------------------
Next Token :  %, Posbility: 0.0003
Next Token : ), Posbility: 0.0005
Next Token :  , Posbility: 0.0052
Next Token :  *, Posbility: 0.0052
Next Token :  +, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x +
 score:False
Error type: noerr
---------------------------
Next Token :  3), Posbility: 0.0001
Next Token :  10), Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  2), Posbility: 0.0006
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1)
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s
 score:False
Error type: noerr
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0010
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :    , Posbility: 0.0013
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    
 score:False
Error type: noerr
---------------------------
Next Token : match, Posbility: 0.0012
Next Token : s, Posbility: 0.0013
Next Token : (, Posbility: 0.0031
Next Token : count, Posbility: 0.0066
Next Token : let, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let
 score:False
Error type: noerr
---------------------------
Next Token :  sum, Posbility: 0.0002
Next Token :  len, Posbility: 0.0002
Next Token :  rec, Posbility: 0.0003
Next Token :  count, Posbility: 0.0004
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : c, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : n, Posbility: 0.0010
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s
 score:False
Error type: noerr
---------------------------
Next Token : ', Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s =
 score:False
Error type: noerr
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  String, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = 
 score:False
Error type: noerr
---------------------------
Next Token : Map, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : s, Posbility: 0.0006
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.
 score:False
Error type: noerr
---------------------------
Next Token : sort, Posbility: 0.0001
Next Token : rev, Posbility: 0.0001
Next Token : reverse, Posbility: 0.0001
Next Token : filter, Posbility: 0.0003
Next Token : map, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (
 score:False
Error type: noerr
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0000
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun
 score:False
Error type: noerr
---------------------------
Next Token :  k, Posbility: 0.0000
Next Token :  l, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun 
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x 
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x ->
 score:False
Error type: noerr
---------------------------
Next Token :  -1, Posbility: 0.0000
Next Token :  1), Posbility: 0.0000
Next Token :  String, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x
 score:False
Error type: noerr
---------------------------
Next Token :  -1), Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  *, Posbility: 0.0002
Next Token :  +, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x 
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : /, Posbility: 0.0001
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x -
 score:False
Error type: noerr
---------------------------
Next Token :  3), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  2), Posbility: 0.0000
Next Token :  1), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1)
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 

, Posbility: 0.0017
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :    , Posbility: 0.0009
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of substrings with the sum of digits equal to their length. *)
let rec count_substrings s =
  match s with
  | [] -> 0
  | _ ->
    let s = s in
    let s = List.rev s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    let s = List.map (fun x -> x * 10) s in
    let s = List.map (fun x -> x / 10) s in
    let s = List.map (fun x -> x % 10) s in
    let s = List.map (fun x -> x + 1) s in
    let s = List.map (fun x -> x - 1) s in
    
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>