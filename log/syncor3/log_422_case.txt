code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0226
Next Token :  sum, Posbility: 0.0226
Next Token :  max, Posbility: 0.0613
Next Token :  , Posbility: 0.2432
Next Token :  rec, Posbility: 0.4531
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0310
Next Token :  sum, Posbility: 0.0845
Next Token :  max, Posbility: 0.0957
Next Token :  find, Posbility: 0.1084
Next Token :  , Posbility: 0.3340
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : add, Posbility: 0.0430
Next Token : aux, Posbility: 0.0430
Next Token : top, Posbility: 0.0625
Next Token : split, Posbility: 0.0708
Next Token : highest, Posbility: 0.1167
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0038
Next Token : (, Posbility: 0.0133
Next Token :  , Posbility: 0.0674
Next Token :  =, Posbility: 0.1621
Next Token : _, Posbility: 0.7266
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sub, Posbility: 0.0140
Next Token : element, Posbility: 0.0159
Next Token : of, Posbility: 0.0630
Next Token : list, Posbility: 0.1172
Next Token : sum, Posbility: 0.5938
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0168
Next Token : s, Posbility: 0.0278
Next Token :  , Posbility: 0.1250
Next Token :  =, Posbility: 0.2061
Next Token : _, Posbility: 0.5586
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : helper, Posbility: 0.0187
Next Token : in, Posbility: 0.0272
Next Token : sub, Posbility: 0.0272
Next Token : list, Posbility: 0.2012
Next Token : of, Posbility: 0.5469
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0005
Next Token : (, Posbility: 0.0013
Next Token :  , Posbility: 0.0028
Next Token :  =, Posbility: 0.0036
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : elem, Posbility: 0.0143
Next Token : sub, Posbility: 0.0498
Next Token : elements, Posbility: 0.1196
Next Token : list, Posbility: 0.1973
Next Token : lists, Posbility: 0.4727
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0187
Next Token : (, Posbility: 0.0306
Next Token : _, Posbility: 0.0947
Next Token :  =, Posbility: 0.3301
Next Token :  , Posbility: 0.4238
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ls, Posbility: 0.0588
Next Token : x, Posbility: 0.1099
Next Token : lst, Posbility: 0.1099
Next Token : (, Posbility: 0.1416
Next Token : lists, Posbility: 0.2637
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0089
Next Token :  acc, Posbility: 0.0100
Next Token :  sum, Posbility: 0.0100
Next Token :  , Posbility: 0.0349
Next Token :  =, Posbility: 0.8984
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0039
Next Token :  function, Posbility: 0.0064
Next Token :  , Posbility: 0.0688
Next Token :  match, Posbility: 0.0688
Next Token : 
, Posbility: 0.8398
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0062
Next Token :    , Posbility: 0.0103
Next Token : 	, Posbility: 0.0149
Next Token :     , Posbility: 0.1416
Next Token :   , Posbility: 0.8125
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0069
Next Token : List, Posbility: 0.0400
Next Token : if, Posbility: 0.0957
Next Token : let, Posbility: 0.2031
Next Token : match, Posbility: 0.6250
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0012
Next Token :  !, Posbility: 0.0015
Next Token : 
, Posbility: 0.0019
Next Token :  String, Posbility: 0.0031
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Seq, Posbility: 0.0007
Next Token : highest, Posbility: 0.0012
Next Token : (, Posbility: 0.0023
Next Token : List, Posbility: 0.0527
Next Token : lists, Posbility: 0.9375
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0005
Next Token : ., Posbility: 0.0005
Next Token :  @, Posbility: 0.0005
Next Token : 
, Posbility: 0.0025
Next Token :  with, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0016
Next Token :  , Posbility: 0.0035
Next Token :  [, Posbility: 0.0051
Next Token :  [], Posbility: 0.0177
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0006
Next Token :    , Posbility: 0.0014
Next Token :       , Posbility: 0.0016
Next Token :     , Posbility: 0.0757
Next Token :   , Posbility: 0.9180
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : |[, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : [, Posbility: 0.0085
Next Token : [], Posbility: 0.0096
Next Token : |, Posbility: 0.9805
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  null, Posbility: 0.0011
Next Token :  nil, Posbility: 0.0081
Next Token :  , Posbility: 0.0172
Next Token :  [, Posbility: 0.0284
Next Token :  [], Posbility: 0.9414
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0031
Next Token :    , Posbility: 0.0039
Next Token :  =>, Posbility: 0.0083
Next Token :  |, Posbility: 0.0083
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0002
Next Token : -, Posbility: 0.0003
Next Token : →, Posbility: 0.0003
Next Token : ::, Posbility: 0.0032
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0422
Next Token :  None, Posbility: 0.0698
Next Token :  0, Posbility: 0.1147
Next Token :  , Posbility: 0.1895
Next Token :  [], Posbility: 0.5156
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0023
Next Token :   , Posbility: 0.0049
Next Token :  |, Posbility: 0.0194
Next Token :  , Posbility: 0.0220
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0137
Next Token :  [], Posbility: 0.0200
Next Token :  l, Posbility: 0.0200
Next Token :  [, Posbility: 0.3125
Next Token :  , Posbility: 0.5859
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : hd, Posbility: 0.0786
Next Token : head, Posbility: 0.1006
Next Token : h, Posbility: 0.1006
Next Token : _, Posbility: 0.1885
Next Token : x, Posbility: 0.3105
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0022
Next Token : :, Posbility: 0.0110
Next Token : s, Posbility: 0.0435
Next Token : ::, Posbility: 0.2500
Next Token :  , Posbility: 0.6797
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : if, Posbility: 0.0010
Next Token : :, Posbility: 0.0014
Next Token : ->, Posbility: 0.0532
Next Token : ::, Posbility: 0.9414
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  list, Posbility: 0.0046
Next Token :  l, Posbility: 0.0110
Next Token :  [], Posbility: 0.0299
Next Token :  rest, Posbility: 0.0635
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : t, Posbility: 0.0145
Next Token : tail, Posbility: 0.0271
Next Token : y, Posbility: 0.0835
Next Token : _, Posbility: 0.1216
Next Token : x, Posbility: 0.6992
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0009
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 0.0031
Next Token : ', Posbility: 0.0178
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0022
Next Token :  @, Posbility: 0.0029
Next Token :  =>, Posbility: 0.0078
Next Token :  when, Posbility: 0.0737
Next Token :  , Posbility: 0.8984
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0002
Next Token : if, Posbility: 0.0035
Next Token : ::, Posbility: 0.0371
Next Token : ->, Posbility: 0.9570
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0025
Next Token :  {, Posbility: 0.0068
Next Token :  match, Posbility: 0.0184
Next Token :  , Posbility: 0.1748
Next Token : 
, Posbility: 0.7852
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0053
Next Token :      , Posbility: 0.0128
Next Token :   , Posbility: 0.0145
Next Token :     , Posbility: 0.4805
Next Token :       , Posbility: 0.4805
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : highest, Posbility: 0.0175
Next Token : List, Posbility: 0.0254
Next Token : match, Posbility: 0.0688
Next Token : if, Posbility: 0.1006
Next Token : let, Posbility: 0.7422
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0222
Next Token :  max, Posbility: 0.0366
Next Token :  rec, Posbility: 0.1279
Next Token :  sum, Posbility: 0.2695
Next Token :  , Posbility: 0.3477
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0591
Next Token : h, Posbility: 0.0757
Next Token : y, Posbility: 0.1250
Next Token : highest, Posbility: 0.1250
Next Token : x, Posbility: 0.2637
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0187
Next Token : ', Posbility: 0.0271
Next Token :  =, Posbility: 0.0947
Next Token : _, Posbility: 0.3301
Next Token : s, Posbility: 0.4238
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0217
Next Token : 2, Posbility: 0.0315
Next Token : ', Posbility: 0.1104
Next Token :  =, Posbility: 0.1416
Next Token : _, Posbility: 0.6328
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0093
Next Token : highest, Posbility: 0.0136
Next Token : with, Posbility: 0.0154
Next Token : max, Posbility: 0.0420
Next Token : sum, Posbility: 0.7422
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ed, Posbility: 0.0024
Next Token : med, Posbility: 0.0024
Next Token : _, Posbility: 0.0175
Next Token : s, Posbility: 0.0175
Next Token :  =, Posbility: 0.9531
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0062
Next Token :  reduce, Posbility: 0.0062
Next Token :  sum, Posbility: 0.0752
Next Token : 
, Posbility: 0.1592
Next Token :  , Posbility: 0.7109
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Sum, Posbility: 0.0160
Next Token : fold, Posbility: 0.0232
Next Token : Array, Posbility: 0.0337
Next Token : x, Posbility: 0.2500
Next Token : List, Posbility: 0.5977
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Helpers, Posbility: 0.0005
Next Token : s, Posbility: 0.0013
Next Token : (, Posbility: 0.0015
Next Token : _, Posbility: 0.0067
Next Token : ., Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reduce, Posbility: 0.0102
Next Token : iter, Posbility: 0.0356
Next Token : sum, Posbility: 0.0518
Next Token : map, Posbility: 0.0588
Next Token : fold, Posbility: 0.8125
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0089
Next Token :  0, Posbility: 0.0115
Next Token : l, Posbility: 0.0513
Next Token :  , Posbility: 0.0845
Next Token : _, Posbility: 0.8047
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : l, Posbility: 0.0004
Next Token : assoc, Posbility: 0.0017
Next Token : with, Posbility: 0.0022
Next Token : right, Posbility: 0.1182
Next Token : left, Posbility: 0.8750
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0099
Next Token : _, Posbility: 0.0210
Next Token :  ((, Posbility: 0.0210
Next Token :  0, Posbility: 0.1992
Next Token :  , Posbility: 0.6953
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : add, Posbility: 0.0079
Next Token : #, Posbility: 0.0101
Next Token : List, Posbility: 0.0130
Next Token : x, Posbility: 0.0276
Next Token : (, Posbility: 0.9141
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0089
Next Token : fn, Posbility: 0.0146
Next Token : function, Posbility: 0.0273
Next Token : +, Posbility: 0.2021
Next Token : fun, Posbility: 0.7031
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0272
Next Token :  a, Posbility: 0.0508
Next Token :  sum, Posbility: 0.1074
Next Token :  , Posbility: 0.2930
Next Token :  acc, Posbility: 0.4824
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0361
Next Token :  i, Posbility: 0.0410
Next Token :  acc, Posbility: 0.0767
Next Token :  sum, Posbility: 0.1436
Next Token :  , Posbility: 0.5664
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0250
Next Token : _, Posbility: 0.0284
Next Token : (, Posbility: 0.0364
Next Token : y, Posbility: 0.0364
Next Token : x, Posbility: 0.7344
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0008
Next Token : i, Posbility: 0.0021
Next Token : _, Posbility: 0.0057
Next Token : s, Posbility: 0.0256
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : ::, Posbility: 0.0001
Next Token : -, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  {, Posbility: 0.0008
Next Token : 
, Posbility: 0.0171
Next Token :  , Posbility: 0.0464
Next Token :  acc, Posbility: 0.9297
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0002
Next Token :  , Posbility: 0.0040
Next Token :  *, Posbility: 0.0040
Next Token : +, Posbility: 0.0109
Next Token :  +, Posbility: 0.9805
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0004
Next Token :  1), Posbility: 0.0007
Next Token :  int, Posbility: 0.0019
Next Token :  float, Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Number, Posbility: 0.0002
Next Token : Int, Posbility: 0.0017
Next Token : (, Posbility: 0.0058
Next Token : List, Posbility: 0.0075
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0007
Next Token :  +, Posbility: 0.0011
Next Token : ., Posbility: 0.0051
Next Token :  , Posbility: 0.0109
Next Token : ), Posbility: 0.9766
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0009
Next Token :  [], Posbility: 0.0063
Next Token :  0.0, Posbility: 0.0063
Next Token :  , Posbility: 0.0466
Next Token :  0, Posbility: 0.9375
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  l, Posbility: 0.0002
Next Token : ., Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : lists, Posbility: 0.0001
Next Token : (, Posbility: 0.0013
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0009
Next Token :  , Posbility: 0.0023
Next Token : ;, Posbility: 0.0039
Next Token : 
, Posbility: 0.0469
Next Token :  in, Posbility: 0.9453
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token : 

, Posbility: 0.0046
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 0.0010
Next Token :         , Posbility: 0.0017
Next Token :      , Posbility: 0.0124
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0486
Next Token : match, Posbility: 0.0908
Next Token : highest, Posbility: 0.1318
Next Token : if, Posbility: 0.3164
Next Token : let, Posbility: 0.3164
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  best, Posbility: 0.0129
Next Token :  sum, Posbility: 0.0242
Next Token :  max, Posbility: 0.0452
Next Token :  rec, Posbility: 0.1396
Next Token :  , Posbility: 0.6250
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0104
Next Token : lists, Posbility: 0.0413
Next Token : y, Posbility: 0.0684
Next Token : highest, Posbility: 0.1123
Next Token : x, Posbility: 0.6484
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0006
Next Token : sum, Posbility: 0.0017
Next Token :  =, Posbility: 0.0347
Next Token : _, Posbility: 0.2559
Next Token : s, Posbility: 0.6992
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0009
Next Token : 2, Posbility: 0.0017
Next Token : s, Posbility: 0.0028
Next Token :  =, Posbility: 0.0085
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : high, Posbility: 0.0287
Next Token : list, Posbility: 0.0535
Next Token : highest, Posbility: 0.1001
Next Token : sum, Posbility: 0.2119
Next Token : max, Posbility: 0.2715
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0018
Next Token : i, Posbility: 0.0029
Next Token : sum, Posbility: 0.0079
Next Token : _, Posbility: 0.2617
Next Token :  =, Posbility: 0.7109
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0030
Next Token :  Math, Posbility: 0.0081
Next Token :  max, Posbility: 0.0132
Next Token : 
, Posbility: 0.1426
Next Token :  , Posbility: 0.8203
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0095
Next Token : if, Posbility: 0.0107
Next Token : highest, Posbility: 0.0137
Next Token : x, Posbility: 0.0791
Next Token : List, Posbility: 0.8516
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : Ext, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reduce, Posbility: 0.0053
Next Token : find, Posbility: 0.0078
Next Token : map, Posbility: 0.0270
Next Token : max, Posbility: 0.0447
Next Token : fold, Posbility: 0.8945
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token : l, Posbility: 0.0010
Next Token :  , Posbility: 0.0330
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : max, Posbility: 0.0001
Next Token : down, Posbility: 0.0001
Next Token : with, Posbility: 0.0003
Next Token : right, Posbility: 0.0110
Next Token : left, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0070
Next Token :  max, Posbility: 0.0089
Next Token : 
, Posbility: 0.0243
Next Token : _, Posbility: 0.0354
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0019
Next Token : List, Posbility: 0.0035
Next Token : Max, Posbility: 0.0035
Next Token : Compare, Posbility: 0.0074
Next Token : (, Posbility: 0.9688
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token : Fun, Posbility: 0.0006
Next Token : fn, Posbility: 0.0036
Next Token : function, Posbility: 0.0052
Next Token : fun, Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0022
Next Token :  a, Posbility: 0.0060
Next Token :  , Posbility: 0.0442
Next Token :  max, Posbility: 0.0442
Next Token :  acc, Posbility: 0.8867
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0079
Next Token :  a, Posbility: 0.0115
Next Token :  acc, Posbility: 0.0967
Next Token :  max, Posbility: 0.2637
Next Token :  , Posbility: 0.5586
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0036
Next Token : _, Posbility: 0.0098
Next Token : (, Posbility: 0.0098
Next Token : y, Posbility: 0.0728
Next Token : x, Posbility: 0.8867
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0004
Next Token : _, Posbility: 0.0021
Next Token :  acc, Posbility: 0.0051
Next Token : s, Posbility: 0.0227
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0139
Next Token :  acc, Posbility: 0.0483
Next Token :  Math, Posbility: 0.0620
Next Token : 
, Posbility: 0.1025
Next Token :  , Posbility: 0.7578
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0033
Next Token : List, Posbility: 0.0055
Next Token : (, Posbility: 0.0117
Next Token : x, Posbility: 0.0408
Next Token : if, Posbility: 0.9258
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0005
Next Token :  int, Posbility: 0.0005
Next Token :  Math, Posbility: 0.0022
Next Token :  , Posbility: 0.2207
Next Token :  acc, Posbility: 0.7695
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : +, Posbility: 0.0021
Next Token :  <=, Posbility: 0.0197
Next Token :  +, Posbility: 0.0684
Next Token :  >=, Posbility: 0.0684
Next Token :  , Posbility: 0.8359
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : >`, Posbility: 0.0000
Next Token : ≤, Posbility: 0.0001
Next Token : ≥, Posbility: 0.0002
Next Token : <, Posbility: 0.2695
Next Token : >, Posbility: 0.7305
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc >
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token :  acc, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :  0, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : highest, Posbility: 0.0001
Next Token : List, Posbility: 0.0006
Next Token : (, Posbility: 0.0019
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0007
Next Token :  ||, Posbility: 0.0029
Next Token :  , Posbility: 0.0062
Next Token : s, Posbility: 0.0591
Next Token :  then, Posbility: 0.9258
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0474
Next Token :  acc, Posbility: 0.9531
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0015
Next Token :  else, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  acc, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0002
Next Token : );, Posbility: 0.0004
Next Token : s, Posbility: 0.0006
Next Token :  , Posbility: 0.0067
Next Token : ), Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0046
Next Token :  -1, Posbility: 0.0125
Next Token : 
, Posbility: 0.0339
Next Token :  , Posbility: 0.2500
Next Token :  0, Posbility: 0.6797
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token : ., Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : lists, Posbility: 0.0008
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  then, Posbility: 0.0056
Next Token : _, Posbility: 0.0134
Next Token : 
, Posbility: 0.0152
Next Token : ;, Posbility: 0.0195
Next Token :  in, Posbility: 0.9375
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.0085
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0007
Next Token :         , Posbility: 0.0015
Next Token :   , Posbility: 0.0028
Next Token :      , Posbility: 0.0096
Next Token :       , Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0615
Next Token : x, Posbility: 0.0698
Next Token : if, Posbility: 0.1895
Next Token : let, Posbility: 0.2148
Next Token : highest, Posbility: 0.3535
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest
 score:False
Error type: noerr
---------------------------
Next Token :  sum, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_
 score:False
Error type: noerr
---------------------------
Next Token : sub, Posbility: 0.0000
Next Token : of, Posbility: 0.0000
Next Token : max, Posbility: 0.0000
Next Token : list, Posbility: 0.0001
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum
 score:False
Error type: noerr
---------------------------
Next Token :  of, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_
 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_
 score:False
Error type: noerr
---------------------------
Next Token : cons, Posbility: 0.0000
Next Token : listing, Posbility: 0.0000
Next Token : sets, Posbility: 0.0000
Next Token : list, Posbility: 0.0005
Next Token : lists, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0077
Next Token :  ((, Posbility: 0.0111
Next Token : 
, Posbility: 0.0267
Next Token :  [, Posbility: 0.0566
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0014
Next Token : List, Posbility: 0.0014
Next Token : ([, Posbility: 0.0063
Next Token : x, Posbility: 0.2656
Next Token : (, Posbility: 0.7227
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  , Posbility: 0.0014
Next Token : Array, Posbility: 0.0014
Next Token : lists, Posbility: 0.0018
Next Token : List, Posbility: 0.2393
Next Token : x, Posbility: 0.7383
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0007
Next Token : ::, Posbility: 0.0025
Next Token : :, Posbility: 0.0052
Next Token :  , Posbility: 0.2207
Next Token : s, Posbility: 0.7695
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0049
Next Token :  ~, Posbility: 0.0056
Next Token :  +, Posbility: 0.0104
Next Token : _, Posbility: 0.3047
Next Token :  , Posbility: 0.6484
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0148
Next Token : ^, Posbility: 0.0403
Next Token : :, Posbility: 0.0586
Next Token : -, Posbility: 0.3828
Next Token : ::, Posbility: 0.4922
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0005
Next Token :  !, Posbility: 0.0007
Next Token : !, Posbility: 0.0008
Next Token :  [, Posbility: 0.0012
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : highest, Posbility: 0.0009
Next Token : []), Posbility: 0.0011
Next Token : List, Posbility: 0.0084
Next Token : (, Posbility: 0.0139
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : );, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : ), Posbility: 0.0009
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token : ), Posbility: 0.0023
Next Token : s, Posbility: 0.0471
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0005
Next Token : list, Posbility: 0.0008
Next Token : rest, Posbility: 0.0013
Next Token : sum, Posbility: 0.1187
Next Token : max, Posbility: 0.8750
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0012
Next Token : ,, Posbility: 0.0033
Next Token :  , Posbility: 0.0664
Next Token : );, Posbility: 0.1094
Next Token : ), Posbility: 0.8086
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0129
Next Token :  , Posbility: 0.0242
Next Token :  in, Posbility: 0.0311
Next Token : 

, Posbility: 0.2021
Next Token : 
, Posbility: 0.7070
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0167
Next Token :       , Posbility: 0.0215
Next Token :     , Posbility: 0.0583
Next Token : let, Posbility: 0.1396
Next Token :   , Posbility: 0.5898
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0016
Next Token : (, Posbility: 0.0044
Next Token : in, Posbility: 0.0165
Next Token : ;, Posbility: 0.0737
Next Token : |, Posbility: 0.8984
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0050
Next Token :  acc, Posbility: 0.0093
Next Token :  [, Posbility: 0.0225
Next Token :  [], Posbility: 0.0786
Next Token :  , Posbility: 0.8438
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0084
Next Token : y, Posbility: 0.0138
Next Token : (, Posbility: 0.0177
Next Token : _, Posbility: 0.2441
Next Token : x, Posbility: 0.6641
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0025
Next Token : 1, Posbility: 0.0041
Next Token : ::, Posbility: 0.0300
Next Token : s, Posbility: 0.1729
Next Token :  , Posbility: 0.7773
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0001
Next Token : :, Posbility: 0.0019
Next Token : ->, Posbility: 0.0040
Next Token : x, Posbility: 0.0067
Next Token : ::, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  l, Posbility: 0.0026
Next Token :  [, Posbility: 0.0049
Next Token :  rest, Posbility: 0.0049
Next Token :  [], Posbility: 0.0464
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (), Posbility: 0.0025
Next Token : tail, Posbility: 0.0025
Next Token : y, Posbility: 0.0236
Next Token : _, Posbility: 0.1738
Next Token : x, Posbility: 0.7773
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0004
Next Token : x, Posbility: 0.0005
Next Token : _, Posbility: 0.0019
Next Token :  , Posbility: 0.0028
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0038
Next Token : ::, Posbility: 0.0038
Next Token : 1, Posbility: 0.0062
Next Token : _, Posbility: 0.0459
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0009
Next Token : :, Posbility: 0.0013
Next Token : if, Posbility: 0.0143
Next Token : ::, Posbility: 0.0938
Next Token : ->, Posbility: 0.8906
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0019
Next Token :  match, Posbility: 0.0086
Next Token :  [, Posbility: 0.0086
Next Token :  , Posbility: 0.3652
Next Token : 
, Posbility: 0.6016
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0009
Next Token :   , Posbility: 0.0024
Next Token :      , Posbility: 0.0040
Next Token :     , Posbility: 0.0201
Next Token :       , Posbility: 0.9688
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0222
Next Token : match, Posbility: 0.0222
Next Token : highest, Posbility: 0.0222
Next Token : if, Posbility: 0.1641
Next Token : let, Posbility: 0.7344
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  new, Posbility: 0.0036
Next Token :  max, Posbility: 0.0126
Next Token :  sum, Posbility: 0.0266
Next Token :  rec, Posbility: 0.0342
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0018
Next Token : (, Posbility: 0.0064
Next Token : highest, Posbility: 0.0105
Next Token : y, Posbility: 0.0135
Next Token : x, Posbility: 0.9453
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0012
Next Token :  , Posbility: 0.0033
Next Token :  =, Posbility: 0.0239
Next Token : s, Posbility: 0.4824
Next Token : _, Posbility: 0.4824
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : and, Posbility: 0.0045
Next Token : plus, Posbility: 0.0045
Next Token : list, Posbility: 0.0124
Next Token : max, Posbility: 0.2480
Next Token : sum, Posbility: 0.6758
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0015
Next Token :  , Posbility: 0.0024
Next Token : s, Posbility: 0.0065
Next Token : _, Posbility: 0.0177
Next Token :  =, Posbility: 0.9688
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  sum, Posbility: 0.0024
Next Token :  [, Posbility: 0.0024
Next Token :  1, Posbility: 0.0178
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : highest, Posbility: 0.0040
Next Token : (, Posbility: 0.0139
Next Token : if, Posbility: 0.0157
Next Token : List, Posbility: 0.3594
Next Token : x, Posbility: 0.5938
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0120
Next Token :  |, Posbility: 0.0120
Next Token :  *, Posbility: 0.0199
Next Token : ::, Posbility: 0.0889
Next Token :  +, Posbility: 0.8438
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0008
Next Token :  sum, Posbility: 0.0028
Next Token : 
, Posbility: 0.0031
Next Token :  0, Posbility: 0.0045
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lowest, Posbility: 0.0022
Next Token : (, Posbility: 0.0439
Next Token : highest, Posbility: 0.1973
Next Token : List, Posbility: 0.3242
Next Token : x, Posbility: 0.4180
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0015
Next Token :  in, Posbility: 0.0015
Next Token : ', Posbility: 0.0019
Next Token : _, Posbility: 0.0036
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0057
Next Token :  |, Posbility: 0.0073
Next Token : [0], Posbility: 0.0094
Next Token :  in, Posbility: 0.1147
Next Token : _, Posbility: 0.8477
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : summary, Posbility: 0.0000
Next Token : highest, Posbility: 0.0000
Next Token : min, Posbility: 0.0002
Next Token : max, Posbility: 0.0474
Next Token : sum, Posbility: 0.9531
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0019
Next Token :  of, Posbility: 0.0019
Next Token : 
, Posbility: 0.0031
Next Token :  , Posbility: 0.0031
Next Token :  in, Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 

, Posbility: 0.0003
Next Token :  , Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :         , Posbility: 0.0002
Next Token :      , Posbility: 0.0022
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0078
Next Token : highest, Posbility: 0.0574
Next Token : match, Posbility: 0.0574
Next Token : if, Posbility: 0.4238
Next Token : let, Posbility: 0.4238
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  best, Posbility: 0.0011
Next Token :  new, Posbility: 0.0021
Next Token :  max, Posbility: 0.0107
Next Token :  rec, Posbility: 0.0107
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0014
Next Token : lists, Posbility: 0.0014
Next Token : y, Posbility: 0.0107
Next Token : highest, Posbility: 0.0176
Next Token : x, Posbility: 0.9609
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0007
Next Token : x, Posbility: 0.0007
Next Token :  =, Posbility: 0.0049
Next Token : s, Posbility: 0.2656
Next Token : _, Posbility: 0.7227
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : is, Posbility: 0.0009
Next Token : min, Posbility: 0.0009
Next Token : list, Posbility: 0.0024
Next Token : sum, Posbility: 0.0024
Next Token : max, Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 0.0041
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Math, Posbility: 0.0024
Next Token : 
, Posbility: 0.0040
Next Token :  match, Posbility: 0.0040
Next Token :  max, Posbility: 0.0177
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Max, Posbility: 0.0011
Next Token : (, Posbility: 0.0084
Next Token : List, Posbility: 0.0623
Next Token : if, Posbility: 0.4609
Next Token : x, Posbility: 0.4609
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0058
Next Token : _, Posbility: 0.0156
Next Token : s, Posbility: 0.0258
Next Token :  , Posbility: 0.0898
Next Token :  +, Posbility: 0.8555
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Math, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  1, Posbility: 0.0002
Next Token :  max, Posbility: 0.0032
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0009
Next Token : highest, Posbility: 0.0024
Next Token : (, Posbility: 0.0039
Next Token : List, Posbility: 0.0291
Next Token : x, Posbility: 0.9609
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  +, Posbility: 0.0003
Next Token : _, Posbility: 0.0007
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  max, Posbility: 0.0001
Next Token :  in, Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : maximum, Posbility: 0.0000
Next Token : min, Posbility: 0.0000
Next Token : sum, Posbility: 0.0110
Next Token : max, Posbility: 0.9883
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token : 

, Posbility: 0.0005
Next Token :  , Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :         , Posbility: 0.0003
Next Token :      , Posbility: 0.0017
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0137
Next Token : match, Posbility: 0.0137
Next Token : if, Posbility: 0.1016
Next Token : let, Posbility: 0.1016
Next Token : highest, Posbility: 0.7500
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_
 score:False
Error type: noerr
---------------------------
Next Token : summary, Posbility: 0.0000
Next Token : merge, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : max, Posbility: 0.0001
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  of, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_
 score:False
Error type: noerr
---------------------------
Next Token : or, Posbility: 0.0000
Next Token : for, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : of, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of
 score:False
Error type: noerr
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_
 score:False
Error type: noerr
---------------------------
Next Token : pairs, Posbility: 0.0000
Next Token : sets, Posbility: 0.0000
Next Token : listing, Posbility: 0.0000
Next Token : list, Posbility: 0.0001
Next Token : lists, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0013
Next Token :  [, Posbility: 0.0044
Next Token : 
, Posbility: 0.0056
Next Token :  ((, Posbility: 0.0469
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists 
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0005
Next Token : 
, Posbility: 0.0006
Next Token : ([, Posbility: 0.0066
Next Token : x, Posbility: 0.0085
Next Token : (, Posbility: 0.9844
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 0.0009
Next Token : if, Posbility: 0.0009
Next Token : List, Posbility: 0.0179
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0012
Next Token : ::, Posbility: 0.0033
Next Token : _, Posbility: 0.0070
Next Token : s, Posbility: 0.4922
Next Token :  , Posbility: 0.4922
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists (x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : ^, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : :, Posbility: 0.0012
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists (x ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists (x :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0003
Next Token : highest, Posbility: 0.0063
Next Token : List, Posbility: 0.0063
Next Token : (, Posbility: 0.0466
Next Token : x, Posbility: 0.9375
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists (x :: x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ', Posbility: 0.0002
Next Token : ), Posbility: 0.0003
Next Token :  , Posbility: 0.0073
Next Token : _, Posbility: 0.1465
Next Token : s, Posbility: 0.8438
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists (x :: xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0028
Next Token :  |, Posbility: 0.0028
Next Token : _, Posbility: 0.1533
Next Token : ), Posbility: 0.4180
Next Token :  , Posbility: 0.4180
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists (x :: xs 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ->, Posbility: 0.0006
Next Token : :, Posbility: 0.0015
Next Token : ^, Posbility: 0.0015
Next Token : -, Posbility: 0.0159
Next Token : ::, Posbility: 0.9805
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists (x :: xs ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  ((, Posbility: 0.0004
Next Token :  [, Posbility: 0.0028
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists (x :: xs :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : High, Posbility: 0.0003
Next Token : highest, Posbility: 0.0063
Next Token : List, Posbility: 0.0063
Next Token : (, Posbility: 0.0466
Next Token : x, Posbility: 0.9375
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists (x :: xs :: x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ', Posbility: 0.0001
Next Token : ), Posbility: 0.0009
Next Token :  , Posbility: 0.0042
Next Token : _, Posbility: 0.3750
Next Token : s, Posbility: 0.6172
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists (x :: xs :: xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : ), Posbility: 0.0015
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists (x :: xs :: xs_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token :  max, Posbility: 0.0000
Next Token : min, Posbility: 0.0003
Next Token : sum, Posbility: 0.0067
Next Token : max, Posbility: 0.9922
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists (x :: xs :: xs_max
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0002
Next Token :  ~, Posbility: 0.0002
Next Token : );, Posbility: 0.0066
Next Token :  , Posbility: 0.0178
Next Token : ), Posbility: 0.9727
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists (x :: xs :: xs_max)
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0016
Next Token :  , Posbility: 0.0033
Next Token :  in, Posbility: 0.2637
Next Token : 
, Posbility: 0.3398
Next Token : 

, Posbility: 0.3848
---------------------------
code:
 (* Write a function that returns the list in a list of lists whose sum of elements is the highest. *)
let rec highest_sum_of_lists lists =
  match lists with
  | [] -> []
  | x :: xs ->
      let xs_sum = List.fold_left (fun acc x -> acc + x) 0 xs in
      let xs_max = List.fold_left (fun acc x -> if acc > x then acc else x) 0 xs in
      highest_sum_of_lists (xs :: xs_max)
  | x :: xs ->
      let x_sum = x + xs_sum in
      let x_max = x + xs_max in
      highest_sum_of_lists (x :: xs :: xs_max)


 score:True
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END and No Syntax Error--------

processing time : :85.91765713691711

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>