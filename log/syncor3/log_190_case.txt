code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  numbers, Posbility: 0.0117
Next Token :  list, Posbility: 0.0132
Next Token :  sum, Posbility: 0.1104
Next Token :  , Posbility: 0.1416
Next Token :  rec, Posbility: 0.6367
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  compute, Posbility: 0.0209
Next Token :  count, Posbility: 0.0236
Next Token :  loop, Posbility: 0.0388
Next Token :  sum, Posbility: 0.3262
Next Token :  , Posbility: 0.3691
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0498
Next Token : helper, Posbility: 0.0640
Next Token : add, Posbility: 0.1357
Next Token : digit, Posbility: 0.1533
Next Token : digits, Posbility: 0.2520
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0088
Next Token : -, Posbility: 0.0113
Next Token :  , Posbility: 0.1562
Next Token :  =, Posbility: 0.3301
Next Token : _, Posbility: 0.4238
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : to, Posbility: 0.0110
Next Token : list, Posbility: 0.0142
Next Token : helper, Posbility: 0.0265
Next Token : of, Posbility: 0.2520
Next Token : sum, Posbility: 0.6016
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0204
Next Token : s, Posbility: 0.0713
Next Token : _, Posbility: 0.1504
Next Token :  =, Posbility: 0.1934
Next Token :  , Posbility: 0.4082
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0708
Next Token : nums, Posbility: 0.0708
Next Token : x, Posbility: 0.1494
Next Token : digits, Posbility: 0.1494
Next Token : n, Posbility: 0.2178
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0183
Next Token :  l, Posbility: 0.0437
Next Token :  acc, Posbility: 0.0496
Next Token :  , Posbility: 0.1963
Next Token :  =, Posbility: 0.6055
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0045
Next Token :  function, Posbility: 0.0139
Next Token :  match, Posbility: 0.0796
Next Token :  , Posbility: 0.1318
Next Token : 
, Posbility: 0.7578
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0049
Next Token :    , Posbility: 0.0092
Next Token : 	, Posbility: 0.0105
Next Token :     , Posbility: 0.1279
Next Token :   , Posbility: 0.8320
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0069
Next Token : List, Posbility: 0.0146
Next Token : let, Posbility: 0.0845
Next Token : if, Posbility: 0.3789
Next Token : match, Posbility: 0.4863
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  !, Posbility: 0.0013
Next Token :  int, Posbility: 0.0019
Next Token :  String, Posbility: 0.0096
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Seq, Posbility: 0.0022
Next Token : (, Posbility: 0.0114
Next Token : Int, Posbility: 0.0128
Next Token : List, Posbility: 0.0508
Next Token : n, Posbility: 0.9023
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0005
Next Token : ., Posbility: 0.0015
Next Token :  , Posbility: 0.0040
Next Token :  %, Posbility: 0.0178
Next Token :  with, Posbility: 0.9727
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0017
Next Token :  {, Posbility: 0.0031
Next Token :  , Posbility: 0.0051
Next Token :  0, Posbility: 0.0051
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0006
Next Token :       , Posbility: 0.0022
Next Token :    , Posbility: 0.0032
Next Token :     , Posbility: 0.1060
Next Token :   , Posbility: 0.8867
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0004
Next Token : [, Posbility: 0.0010
Next Token : [], Posbility: 0.0017
Next Token : 0, Posbility: 0.0179
Next Token : |, Posbility: 0.9766
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0115
Next Token :  1, Posbility: 0.0189
Next Token :  , Posbility: 0.1396
Next Token :  [], Posbility: 0.1396
Next Token :  0, Posbility: 0.6250
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  when, Posbility: 0.0090
Next Token :   , Posbility: 0.0132
Next Token :  =>, Posbility: 0.0459
Next Token :  |, Posbility: 0.0757
Next Token :  , Posbility: 0.8164
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0004
Next Token : :, Posbility: 0.0005
Next Token : â†’, Posbility: 0.0007
Next Token : ::, Posbility: 0.0046
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0359
Next Token :  1, Posbility: 0.0359
Next Token :  , Posbility: 0.0972
Next Token :  [], Posbility: 0.0972
Next Token :  0, Posbility: 0.7188
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
 score:False
Error type: noerr
---------------------------
Next Token : L, Posbility: 0.0018
Next Token :   , Posbility: 0.0034
Next Token :  , Posbility: 0.0134
Next Token :  |, Posbility: 0.0284
Next Token : 
, Posbility: 0.9414
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0104
Next Token :  k, Posbility: 0.0104
Next Token :  i, Posbility: 0.0283
Next Token :  1, Posbility: 0.3457
Next Token :  , Posbility: 0.5703
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0162
Next Token : x, Posbility: 0.1543
Next Token : d, Posbility: 0.1748
Next Token : _, Posbility: 0.1973
Next Token : n, Posbility: 0.3691
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0192
Next Token : 1, Posbility: 0.0247
Next Token : ::, Posbility: 0.0522
Next Token :  when, Posbility: 0.0977
Next Token :  , Posbility: 0.7188
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0030
Next Token : -, Posbility: 0.0038
Next Token : if, Posbility: 0.0684
Next Token : ::, Posbility: 0.0874
Next Token : ->, Posbility: 0.8320
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0160
Next Token :  (1, Posbility: 0.0265
Next Token : 
, Posbility: 0.0718
Next Token :  1, Posbility: 0.3223
Next Token :  , Posbility: 0.5312
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0193
Next Token : List, Posbility: 0.0280
Next Token : if, Posbility: 0.0864
Next Token : (, Posbility: 0.1426
Next Token : n, Posbility: 0.6367
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n
 score:False
Error type: noerr
---------------------------
Next Token :  `, Posbility: 0.0356
Next Token :  , Posbility: 0.0967
Next Token :  %, Posbility: 0.2051
Next Token :  +, Posbility: 0.2637
Next Token :  *, Posbility: 0.2988
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0040
Next Token :  (1, Posbility: 0.0051
Next Token :  1, Posbility: 0.0228
Next Token :  , Posbility: 0.3574
Next Token :  10, Posbility: 0.5859
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0008
Next Token : 
, Posbility: 0.0010
Next Token :  %, Posbility: 0.0015
Next Token :  , Posbility: 0.0178
Next Token :  +, Posbility: 0.9766
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0030
Next Token :  !, Posbility: 0.0038
Next Token :  int, Posbility: 0.0081
Next Token :  rec, Posbility: 0.0282
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0184
Next Token : Digit, Posbility: 0.0269
Next Token : n, Posbility: 0.0728
Next Token : (, Posbility: 0.1357
Next Token : digits, Posbility: 0.6914
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits
 score:False
Error type: noerr
---------------------------
Next Token : Sum, Posbility: 0.0000
Next Token :  sum, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : of, Posbility: 0.0002
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0009
Next Token :  (1, Posbility: 0.0024
Next Token :  ((, Posbility: 0.0065
Next Token : (, Posbility: 0.0289
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum 
 score:False
Error type: noerr
---------------------------
Next Token : (`, Posbility: 0.0001
Next Token : floor, Posbility: 0.0005
Next Token : div, Posbility: 0.0007
Next Token : n, Posbility: 0.0076
Next Token : (, Posbility: 0.9883
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : mod, Posbility: 0.0045
Next Token : floor, Posbility: 0.0107
Next Token : Div, Posbility: 0.0200
Next Token : div, Posbility: 0.0618
Next Token : n, Posbility: 0.8516
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -1, Posbility: 0.0014
Next Token :  %, Posbility: 0.0023
Next Token : -1), Posbility: 0.0219
Next Token : /, Posbility: 0.0361
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : DIV, Posbility: 0.0016
Next Token : //, Posbility: 0.0083
Next Token : div, Posbility: 0.0420
Next Token : -, Posbility: 0.1011
Next Token : /, Posbility: 0.8438
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0014
Next Token : 10, Posbility: 0.0014
Next Token :  100), Posbility: 0.0106
Next Token :  10, Posbility: 0.0288
Next Token :  10), Posbility: 0.9570
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0033
Next Token :  , Posbility: 0.0089
Next Token :  +, Posbility: 0.0146
Next Token : 

, Posbility: 0.4824
Next Token : 
, Posbility: 0.4824
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0076
Next Token : ;, Posbility: 0.0076
Next Token : end, Posbility: 0.0250
Next Token :   , Posbility: 0.0564
Next Token : let, Posbility: 0.6055
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0171
Next Token :  main, Posbility: 0.0361
Next Token :  sum, Posbility: 0.0981
Next Token :  , Posbility: 0.1836
Next Token :  rec, Posbility: 0.5664
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0247
Next Token :  rec, Posbility: 0.0278
Next Token :  count, Posbility: 0.0315
Next Token :  sum, Posbility: 0.2061
Next Token :  , Posbility: 0.4941
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0081
Next Token : helper, Posbility: 0.0081
Next Token : add, Posbility: 0.0219
Next Token : digit, Posbility: 0.0593
Next Token : digits, Posbility: 0.7227
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0005
Next Token : Sum, Posbility: 0.0005
Next Token :  =, Posbility: 0.0035
Next Token :  , Posbility: 0.0140
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : count, Posbility: 0.0078
Next Token : product, Posbility: 0.0078
Next Token : list, Posbility: 0.0129
Next Token : of, Posbility: 0.0129
Next Token : sum, Posbility: 0.9023
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0095
Next Token : 2, Posbility: 0.0156
Next Token : ', Posbility: 0.0200
Next Token : s, Posbility: 0.0703
Next Token : _, Posbility: 0.8555
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0284
Next Token : all, Posbility: 0.0364
Next Token : iter, Posbility: 0.0684
Next Token : rec, Posbility: 0.0874
Next Token : list, Posbility: 0.2695
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0170
Next Token :  acc, Posbility: 0.0359
Next Token :  l, Posbility: 0.0757
Next Token :  =, Posbility: 0.2061
Next Token :  , Posbility: 0.5586
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0664
Next Token : nums, Posbility: 0.0664
Next Token : x, Posbility: 0.0854
Next Token : ls, Posbility: 0.1406
Next Token : n, Posbility: 0.4336
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0152
Next Token :  l, Posbility: 0.0195
Next Token : _, Posbility: 0.0413
Next Token : list, Posbility: 0.0532
Next Token :  =, Posbility: 0.8320
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0015
Next Token :  list, Posbility: 0.0022
Next Token :  match, Posbility: 0.0146
Next Token :  , Posbility: 0.2598
Next Token : 
, Posbility: 0.7070
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0006
Next Token : let, Posbility: 0.0012
Next Token :    , Posbility: 0.0015
Next Token :     , Posbility: 0.0067
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0070
Next Token : if, Posbility: 0.0659
Next Token : let, Posbility: 0.1582
Next Token : List, Posbility: 0.1797
Next Token : match, Posbility: 0.5508
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0002
Next Token :  !, Posbility: 0.0003
Next Token : List, Posbility: 0.0003
Next Token :  String, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0008
Next Token : (, Posbility: 0.0041
Next Token : Seq, Posbility: 0.0053
Next Token : List, Posbility: 0.0933
Next Token : n, Posbility: 0.8867
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token : [0], Posbility: 0.0008
Next Token : ., Posbility: 0.0009
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token :  [], Posbility: 0.0041
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : |[, Posbility: 0.0000
Next Token : [, Posbility: 0.0001
Next Token : [], Posbility: 0.0001
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0024
Next Token :  0, Posbility: 0.0065
Next Token :  nil, Posbility: 0.0065
Next Token :  , Posbility: 0.0177
Next Token :  [], Posbility: 0.9648
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0004
Next Token :   , Posbility: 0.0007
Next Token :  |, Posbility: 0.0015
Next Token :  as, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0003
Next Token : 
, Posbility: 0.0024
Next Token :  , Posbility: 0.0176
Next Token :  [], Posbility: 0.0176
Next Token :  0, Posbility: 0.9609
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token :  |, Posbility: 0.0003
Next Token :   , Posbility: 0.0004
Next Token :  , Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0037
Next Token :  [], Posbility: 0.0048
Next Token :  i, Posbility: 0.0061
Next Token :  [, Posbility: 0.0452
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0500
Next Token : hd, Posbility: 0.0825
Next Token : h, Posbility: 0.0825
Next Token : x, Posbility: 0.1748
Next Token : n, Posbility: 0.5391
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0012
Next Token :  @, Posbility: 0.0012
Next Token : 1, Posbility: 0.0017
Next Token : ::, Posbility: 0.1055
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0002
Next Token : if, Posbility: 0.0003
Next Token : :, Posbility: 0.0007
Next Token : ->, Posbility: 0.3477
Next Token : ::, Posbility: 0.6484
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  acc, Posbility: 0.0044
Next Token :  list, Posbility: 0.0120
Next Token :  l, Posbility: 0.0255
Next Token :  rest, Posbility: 0.0889
Next Token :  , Posbility: 0.8438
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0280
Next Token : _, Posbility: 0.0669
Next Token : x, Posbility: 0.1611
Next Token : n, Posbility: 0.2656
Next Token : ns, Posbility: 0.3867
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  @, Posbility: 0.0012
Next Token :   , Posbility: 0.0019
Next Token :  =>, Posbility: 0.0019
Next Token :  when, Posbility: 0.0085
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : -, Posbility: 0.0001
Next Token : ::, Posbility: 0.0025
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0037
Next Token :  sum, Posbility: 0.0037
Next Token :  10, Posbility: 0.0061
Next Token : 
, Posbility: 0.0742
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0042
Next Token : let, Posbility: 0.0115
Next Token : (, Posbility: 0.0403
Next Token : n, Posbility: 0.2988
Next Token : digits, Posbility: 0.6328
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits
 score:False
Error type: noerr
---------------------------
Next Token :  sum, Posbility: 0.0000
Next Token :  (*, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_
 score:False
Error type: noerr
---------------------------
Next Token : prod, Posbility: 0.0000
Next Token : add, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0017
Next Token :  (*, Posbility: 0.0017
Next Token :  ((, Posbility: 0.0077
Next Token : _, Posbility: 0.0938
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum 
 score:False
Error type: noerr
---------------------------
Next Token : ^, Posbility: 0.0001
Next Token : digits, Posbility: 0.0012
Next Token : ns, Posbility: 0.0015
Next Token : n, Posbility: 0.3750
Next Token : (, Posbility: 0.6211
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Int, Posbility: 0.0082
Next Token : sum, Posbility: 0.0093
Next Token : List, Posbility: 0.0287
Next Token : digits, Posbility: 0.4492
Next Token : n, Posbility: 0.4492
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ::, Posbility: 0.0884
Next Token : ), Posbility: 0.1006
Next Token :  , Posbility: 0.1465
Next Token :  *, Posbility: 0.1465
Next Token :  +, Posbility: 0.3965
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0), Posbility: 0.0021
Next Token :  10), Posbility: 0.0021
Next Token :  1), Posbility: 0.0051
Next Token :  sum, Posbility: 0.0074
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Digit, Posbility: 0.0008
Next Token : n, Posbility: 0.0024
Next Token : List, Posbility: 0.0035
Next Token : (, Posbility: 0.0066
Next Token : digits, Posbility: 0.9805
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  (*, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : count, Posbility: 0.0000
Next Token : of, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  list, Posbility: 0.0001
Next Token :  , Posbility: 0.0110
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : rest, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ~, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0012
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ks, Posbility: 0.0002
Next Token : ls, Posbility: 0.0005
Next Token : n, Posbility: 0.0031
Next Token : (, Posbility: 0.0371
Next Token : ns, Posbility: 0.9570
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token : ))), Posbility: 0.0014
Next Token : )), Posbility: 0.0292
Next Token : ), Posbility: 0.9648
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0076
Next Token :  +, Posbility: 0.0126
Next Token :  , Posbility: 0.0208
Next Token : 

, Posbility: 0.4727
Next Token : 
, Posbility: 0.4727
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0045
Next Token :   , Posbility: 0.0056
Next Token : (, Posbility: 0.0066
Next Token : in, Posbility: 0.0153
Next Token : let, Posbility: 0.8359
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0129
Next Token :  main, Posbility: 0.0579
Next Token :  sum, Posbility: 0.1226
Next Token :  , Posbility: 0.2285
Next Token :  rec, Posbility: 0.4844
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0198
Next Token :  count, Posbility: 0.0288
Next Token :  loop, Posbility: 0.0288
Next Token :  sum, Posbility: 0.1289
Next Token :  , Posbility: 0.5781
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0071
Next Token : n, Posbility: 0.0071
Next Token : add, Posbility: 0.0171
Next Token : digit, Posbility: 0.0194
Next Token : digits, Posbility: 0.8242
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0001
Next Token : Sum, Posbility: 0.0002
Next Token :  =, Posbility: 0.0009
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : count, Posbility: 0.0024
Next Token : product, Posbility: 0.0024
Next Token : list, Posbility: 0.0040
Next Token : of, Posbility: 0.0040
Next Token : sum, Posbility: 0.9766
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0031
Next Token : 2, Posbility: 0.0051
Next Token :  , Posbility: 0.0057
Next Token : s, Posbility: 0.0137
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0320
Next Token : tail, Posbility: 0.0320
Next Token : iter, Posbility: 0.0410
Next Token : rec, Posbility: 0.0525
Next Token : list, Posbility: 0.3438
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0069
Next Token :  , Posbility: 0.0189
Next Token : ', Posbility: 0.0659
Next Token : 2, Posbility: 0.0845
Next Token : _, Posbility: 0.8008
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0300
Next Token : tail, Posbility: 0.0300
Next Token : rec, Posbility: 0.0635
Next Token : iter, Posbility: 0.0815
Next Token : opt, Posbility: 0.1729
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0043
Next Token : s, Posbility: 0.0055
Next Token :  =, Posbility: 0.0150
Next Token : _, Posbility: 0.0193
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0010
Next Token : (, Posbility: 0.0035
Next Token : ns, Posbility: 0.0045
Next Token : x, Posbility: 0.0096
Next Token : n, Posbility: 0.9766
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0005
Next Token :  ?, Posbility: 0.0011
Next Token :  list, Posbility: 0.0013
Next Token :  , Posbility: 0.0291
Next Token :  =, Posbility: 0.9609
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  function, Posbility: 0.0003
Next Token :  , Posbility: 0.0096
Next Token :  match, Posbility: 0.0109
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0002
Next Token : let, Posbility: 0.0005
Next Token :    , Posbility: 0.0006
Next Token :     , Posbility: 0.0028
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0023
Next Token : if, Posbility: 0.0190
Next Token : let, Posbility: 0.0216
Next Token : try, Posbility: 0.0278
Next Token : match, Posbility: 0.9219
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0001
Next Token :  ?, Posbility: 0.0001
Next Token :  !, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Seq, Posbility: 0.0003
Next Token : Option, Posbility: 0.0008
Next Token : (, Posbility: 0.0019
Next Token : List, Posbility: 0.0059
Next Token : n, Posbility: 0.9883
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token :  None, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  [], Posbility: 0.0010
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : case, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0060
Next Token :  Some, Posbility: 0.0060
Next Token :  , Posbility: 0.0442
Next Token :  None, Posbility: 0.0442
Next Token :  [], Posbility: 0.8906
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token :   , Posbility: 0.0005
Next Token :  as, Posbility: 0.0005
Next Token :  |, Posbility: 0.0159
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0122
Next Token :  Some, Posbility: 0.0122
Next Token :  , Posbility: 0.0332
Next Token :  None, Posbility: 0.2451
Next Token :  0, Posbility: 0.6680
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0004
Next Token :  *, Posbility: 0.0006
Next Token :  |, Posbility: 0.0028
Next Token :  , Posbility: 0.0041
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0056
Next Token :  [, Posbility: 0.0056
Next Token :  None, Posbility: 0.0410
Next Token :  Some, Posbility: 0.1113
Next Token :  , Posbility: 0.8242
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0010
Next Token : (, Posbility: 0.0104
Next Token : x, Posbility: 0.0118
Next Token : _, Posbility: 0.0221
Next Token : n, Posbility: 0.9375
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0010
Next Token :  @, Posbility: 0.0015
Next Token :  |, Posbility: 0.0084
Next Token : ::, Posbility: 0.0108
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : if, Posbility: 0.0002
Next Token : :, Posbility: 0.0012
Next Token : ->, Posbility: 0.0059
Next Token : ::, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  nil, Posbility: 0.0009
Next Token :  [, Posbility: 0.0021
Next Token :  None, Posbility: 0.0031
Next Token :  [], Posbility: 0.0157
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0017
Next Token : n, Posbility: 0.0021
Next Token : _, Posbility: 0.0201
Next Token : ns, Posbility: 0.9727
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  @, Posbility: 0.0012
Next Token :  |, Posbility: 0.0012
Next Token :  when, Posbility: 0.0085
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : if, Posbility: 0.0002
Next Token : ::, Posbility: 0.0003
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0024
Next Token :  Some, Posbility: 0.0232
Next Token :  match, Posbility: 0.0232
Next Token : 
, Posbility: 0.1719
Next Token :  , Posbility: 0.7695
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0184
Next Token : (, Posbility: 0.0305
Next Token : if, Posbility: 0.0503
Next Token : n, Posbility: 0.0830
Next Token : digits, Posbility: 0.7852
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  (*, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_
 score:False
Error type: noerr
---------------------------
Next Token : opt, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : add, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum
 score:False
Error type: noerr
---------------------------
Next Token :  (1, Posbility: 0.0009
Next Token :  (*, Posbility: 0.0019
Next Token :  ((, Posbility: 0.0085
Next Token : _, Posbility: 0.2197
Next Token :  , Posbility: 0.7656
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum 
 score:False
Error type: noerr
---------------------------
Next Token : ([, Posbility: 0.0000
Next Token : ns, Posbility: 0.0001
Next Token : digits, Posbility: 0.0002
Next Token : n, Posbility: 0.0028
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : Some, Posbility: 0.0009
Next Token : if, Posbility: 0.0011
Next Token : match, Posbility: 0.0027
Next Token : digits, Posbility: 0.0201
Next Token : n, Posbility: 0.9688
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  |, Posbility: 0.0003
Next Token : ), Posbility: 0.0015
Next Token :  , Posbility: 0.0052
Next Token :  *, Posbility: 0.0075
Next Token :  +, Posbility: 0.9844
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Optional, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  Some, Posbility: 0.0004
Next Token :  match, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Digit, Posbility: 0.0004
Next Token : if, Posbility: 0.0007
Next Token : opt, Posbility: 0.0007
Next Token : (, Posbility: 0.0015
Next Token : digits, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  sum, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : summer, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  list, Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 0.0086
Next Token : list, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0474
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : list, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ks, Posbility: 0.0000
Next Token : ls, Posbility: 0.0000
Next Token : n, Posbility: 0.0006
Next Token : (, Posbility: 0.0022
Next Token : ns, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0003
Next Token : )., Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token : )), Posbility: 0.0052
Next Token : ), Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0020
Next Token :  +, Posbility: 0.0030
Next Token :  , Posbility: 0.0034
Next Token : 

, Posbility: 0.3418
Next Token : 
, Posbility: 0.6406
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0040
Next Token : 

, Posbility: 0.0070
Next Token : ```, Posbility: 0.0079
Next Token : (, Posbility: 0.0115
Next Token : let, Posbility: 0.8086
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0046
Next Token :  main, Posbility: 0.0097
Next Token :  sum, Posbility: 0.0206
Next Token :  , Posbility: 0.1523
Next Token :  rec, Posbility: 0.7734
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0096
Next Token :  count, Posbility: 0.0159
Next Token :  rec, Posbility: 0.0181
Next Token :  sum, Posbility: 0.0491
Next Token :  , Posbility: 0.7656
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0026
Next Token : add, Posbility: 0.0048
Next Token : digit, Posbility: 0.0070
Next Token : opt, Posbility: 0.0079
Next Token : digits, Posbility: 0.9180
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Sum, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0015
Next Token : product, Posbility: 0.0015
Next Token : list, Posbility: 0.0015
Next Token : count, Posbility: 0.0015
Next Token : sum, Posbility: 0.9883
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0008
Next Token : s, Posbility: 0.0015
Next Token :  , Posbility: 0.0022
Next Token : 2, Posbility: 0.0022
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0147
Next Token : rec, Posbility: 0.0312
Next Token : iter, Posbility: 0.0400
Next Token : opt, Posbility: 0.1089
Next Token : list, Posbility: 0.5547
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0013
Next Token : ', Posbility: 0.0072
Next Token :  , Posbility: 0.0092
Next Token : 2, Posbility: 0.0322
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0194
Next Token : ex, Posbility: 0.0249
Next Token : iter, Posbility: 0.0525
Next Token : rec, Posbility: 0.0767
Next Token : opt, Posbility: 0.3027
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0123
Next Token : ', Posbility: 0.0381
Next Token :  , Posbility: 0.0430
Next Token : 2, Posbility: 0.2812
Next Token : _, Posbility: 0.5938
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0322
Next Token : list, Posbility: 0.0322
Next Token : rec, Posbility: 0.0601
Next Token : ex, Posbility: 0.0679
Next Token : opt, Posbility: 0.1123
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0030
Next Token : n, Posbility: 0.0049
Next Token :  =, Posbility: 0.0134
Next Token : _, Posbility: 0.0172
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0002
Next Token : ns, Posbility: 0.0006
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 0.0022
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  a, Posbility: 0.0002
Next Token : 1, Posbility: 0.0004
Next Token :  , Posbility: 0.0076
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  match, Posbility: 0.0025
Next Token :  , Posbility: 0.0032
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0012
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : try, Posbility: 0.0009
Next Token : if, Posbility: 0.0015
Next Token : let, Posbility: 0.0046
Next Token : match, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Option, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  WITH, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0024
Next Token :  [, Posbility: 0.0065
Next Token :  None, Posbility: 0.0065
Next Token :  , Posbility: 0.0176
Next Token :  [], Posbility: 0.9609
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  as, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  |, Posbility: 0.0097
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0023
Next Token :  [], Posbility: 0.0064
Next Token :  , Posbility: 0.0173
Next Token :  None, Posbility: 0.0173
Next Token :  0, Posbility: 0.9453
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token :  |, Posbility: 0.0008
Next Token :  , Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0024
Next Token :  None, Posbility: 0.0066
Next Token :  0, Posbility: 0.0066
Next Token :  Some, Posbility: 0.0066
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0004
Next Token : x, Posbility: 0.0031
Next Token : (, Posbility: 0.0052
Next Token : _, Posbility: 0.0066
Next Token : n, Posbility: 0.9805
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0003
Next Token : 1, Posbility: 0.0007
Next Token :  |, Posbility: 0.0015
Next Token : ::, Posbility: 0.0019
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : :, Posbility: 0.0004
Next Token : ->, Posbility: 0.0009
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  0, Posbility: 0.0013
Next Token :  None, Posbility: 0.0035
Next Token :  [, Posbility: 0.0045
Next Token :  [], Posbility: 0.0109
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0005
Next Token : (, Posbility: 0.0010
Next Token : n, Posbility: 0.0036
Next Token : _, Posbility: 0.0059
Next Token : ns, Posbility: 0.9883
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : 0, Posbility: 0.0003
Next Token :  |, Posbility: 0.0005
Next Token : 1, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : ::, Posbility: 0.0009
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0005
Next Token :  Some, Posbility: 0.0009
Next Token :  match, Posbility: 0.0050
Next Token : 
, Posbility: 0.0291
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0019
Next Token : if, Posbility: 0.0031
Next Token : (, Posbility: 0.0040
Next Token : n, Posbility: 0.0109
Next Token : digits, Posbility: 0.9766
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  sum, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_
 score:False
Error type: noerr
---------------------------
Next Token : of, Posbility: 0.0000
Next Token : add, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token :  ((, Posbility: 0.0014
Next Token : _, Posbility: 0.0474
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum 
 score:False
Error type: noerr
---------------------------
Next Token : ([, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0003
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 10, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token : match, Posbility: 0.0004
Next Token : digits, Posbility: 0.0067
Next Token : n, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : ), Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token :  *, Posbility: 0.0022
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token :  match, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Digit, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : n, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  sum, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : summer, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  optional, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : lists, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 0.0010
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0002
Next Token : list, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0159
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : _, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ls, Posbility: 0.0000
Next Token : ks, Posbility: 0.0000
Next Token : n, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : );, Posbility: 0.0002
Next Token :  +, Posbility: 0.0005
Next Token : )), Posbility: 0.0008
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0007
Next Token : , Posbility: 0.0012
Next Token :  , Posbility: 0.0015
Next Token : 

, Posbility: 0.2930
Next Token : 
, Posbility: 0.6992
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)

 score:False
Error type: noerr
---------------------------
Next Token : *, Posbility: 0.0074
Next Token : ```, Posbility: 0.0074
Next Token : 

, Posbility: 0.0089
Next Token : (, Posbility: 0.0214
Next Token : let, Posbility: 0.8008
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0022
Next Token :  main, Posbility: 0.0046
Next Token :  sum, Posbility: 0.0076
Next Token :  , Posbility: 0.0820
Next Token :  rec, Posbility: 0.8828
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0073
Next Token :  count, Posbility: 0.0106
Next Token :  rec, Posbility: 0.0106
Next Token :  sum, Posbility: 0.0289
Next Token :  , Posbility: 0.8438
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0018
Next Token : add, Posbility: 0.0027
Next Token : opt, Posbility: 0.0034
Next Token : digit, Posbility: 0.0039
Next Token : digits, Posbility: 0.9531
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Sum, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0009
Next Token : product, Posbility: 0.0009
Next Token : count, Posbility: 0.0012
Next Token : list, Posbility: 0.0015
Next Token : sum, Posbility: 0.9883
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0003
Next Token : s, Posbility: 0.0012
Next Token : 2, Posbility: 0.0015
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0052
Next Token : iter, Posbility: 0.0125
Next Token : rec, Posbility: 0.0161
Next Token : opt, Posbility: 0.0635
Next Token : list, Posbility: 0.7734
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0009
Next Token : ', Posbility: 0.0010
Next Token :  , Posbility: 0.0031
Next Token : 2, Posbility: 0.0123
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : loop, Posbility: 0.0098
Next Token : iter, Posbility: 0.0265
Next Token : list, Posbility: 0.0342
Next Token : rec, Posbility: 0.0723
Next Token : opt, Posbility: 0.5312
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0010
Next Token : 3, Posbility: 0.0014
Next Token :  , Posbility: 0.0137
Next Token : 2, Posbility: 0.0199
Next Token : _, Posbility: 0.9570
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : some, Posbility: 0.0075
Next Token : rec, Posbility: 0.0204
Next Token : none, Posbility: 0.0204
Next Token : list, Posbility: 0.0381
Next Token : opt, Posbility: 0.7656
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0022
Next Token : 1, Posbility: 0.0047
Next Token :  , Posbility: 0.0240
Next Token : 2, Posbility: 0.0576
Next Token : _, Posbility: 0.8984
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0063
Next Token : none, Posbility: 0.0080
Next Token : rec, Posbility: 0.0317
Next Token : list, Posbility: 0.0461
Next Token : opt, Posbility: 0.7227
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0009
Next Token : 
, Posbility: 0.0010
Next Token : _, Posbility: 0.0066
Next Token :  =, Posbility: 0.0066
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ns, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : =, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0010
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  match, Posbility: 0.0009
Next Token :  , Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0010
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : digits, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : if, Posbility: 0.0002
Next Token : let, Posbility: 0.0007
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  WITH, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  0, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  |, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  1, Posbility: 0.0003
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token :  [, Posbility: 0.0003
Next Token :  0, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0006
Next Token : _, Posbility: 0.0013
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : ::, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token : ->, Posbility: 0.0002
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  None, Posbility: 0.0001
Next Token :  0, Posbility: 0.0003
Next Token :  [, Posbility: 0.0004
Next Token :  [], Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 0.0006
Next Token : _, Posbility: 0.0013
Next Token : ns, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : 1, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0003
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  {, Posbility: 0.0001
Next Token :  match, Posbility: 0.0001
Next Token : 
, Posbility: 0.0046
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : n, Posbility: 0.0012
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  sum, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_
 score:False
Error type: noerr
---------------------------
Next Token : add, Posbility: 0.0000
Next Token : summer, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : _, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum 
 score:False
Error type: noerr
---------------------------
Next Token : digits, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : digits, Posbility: 0.0005
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  sum, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : Digit, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : summer, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : lists, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 0.0001
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : obj, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : nums, Posbility: 0.0000
Next Token : ks, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 0.0001
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0002
Next Token : )), Posbility: 0.0005
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0003
Next Token :  , Posbility: 0.0011
Next Token : , Posbility: 0.0017
Next Token : 

, Posbility: 0.2930
Next Token : 
, Posbility: 0.7031
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0060
Next Token : *, Posbility: 0.0068
Next Token : ```, Posbility: 0.0073
Next Token : (, Posbility: 0.0175
Next Token : let, Posbility: 0.8438
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0022
Next Token :  main, Posbility: 0.0032
Next Token :  sum, Posbility: 0.0060
Next Token :  , Posbility: 0.0737
Next Token :  rec, Posbility: 0.8945
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0068
Next Token :  rec, Posbility: 0.0068
Next Token :  count, Posbility: 0.0077
Next Token :  sum, Posbility: 0.0184
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0014
Next Token : opt, Posbility: 0.0016
Next Token : add, Posbility: 0.0024
Next Token : digit, Posbility: 0.0027
Next Token : digits, Posbility: 0.9648
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Sum, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : product, Posbility: 0.0005
Next Token : of, Posbility: 0.0007
Next Token : count, Posbility: 0.0007
Next Token : list, Posbility: 0.0009
Next Token : sum, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0002
Next Token : s, Posbility: 0.0008
Next Token : 2, Posbility: 0.0010
Next Token :  , Posbility: 0.0015
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0040
Next Token : iter, Posbility: 0.0058
Next Token : rec, Posbility: 0.0084
Next Token : opt, Posbility: 0.0378
Next Token : list, Posbility: 0.8633
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0006
Next Token : 3, Posbility: 0.0007
Next Token :  , Posbility: 0.0028
Next Token : 2, Posbility: 0.0059
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0080
Next Token : iter, Posbility: 0.0117
Next Token : list, Posbility: 0.0219
Next Token : rec, Posbility: 0.0461
Next Token : opt, Posbility: 0.7227
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0004
Next Token : s, Posbility: 0.0009
Next Token : 2, Posbility: 0.0028
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : some, Posbility: 0.0023
Next Token : optional, Posbility: 0.0038
Next Token : none, Posbility: 0.0063
Next Token : list, Posbility: 0.0104
Next Token : opt, Posbility: 0.9375
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0001
Next Token :  =, Posbility: 0.0004
Next Token : 2, Posbility: 0.0005
Next Token :  , Posbility: 0.0140
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0005
Next Token : optional, Posbility: 0.0010
Next Token : none, Posbility: 0.0012
Next Token : list, Posbility: 0.0024
Next Token : opt, Posbility: 0.9844
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0005
Next Token :  =, Posbility: 0.0009
Next Token : 2, Posbility: 0.0027
Next Token :  , Posbility: 0.0178
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : none, Posbility: 0.0010
Next Token : more, Posbility: 0.0010
Next Token : int, Posbility: 0.0015
Next Token : list, Posbility: 0.0051
Next Token : opt, Posbility: 0.9688
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0004
Next Token : 
, Posbility: 0.0009
Next Token : _, Posbility: 0.0032
Next Token :  =, Posbility: 0.0036
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ns, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token :  match, Posbility: 0.0008
Next Token :  , Posbility: 0.0017
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0009
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : let, Posbility: 0.0004
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  0, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  1, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : _, Posbility: 0.0006
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 0.0004
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  sum, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : summer, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum 
 score:False
Error type: noerr
---------------------------
Next Token : digits, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : digits, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1), Posbility: 0.0000
Next Token :  sum, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : degrees, Posbility: 0.0000
Next Token : Digit, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  sum, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : summer, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : lista, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : opt, Posbility: 0.0001
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ls, Posbility: 0.0000
Next Token : ks, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : );, Posbility: 0.0002
Next Token : )), Posbility: 0.0006
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0004
Next Token :  , Posbility: 0.0008
Next Token : , Posbility: 0.0017
Next Token : 

, Posbility: 0.2930
Next Token : 
, Posbility: 0.7031
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)

 score:False
Error type: noerr
---------------------------
Next Token : module, Posbility: 0.0029
Next Token : ```, Posbility: 0.0051
Next Token : in, Posbility: 0.0065
Next Token : (, Posbility: 0.0138
Next Token : let, Posbility: 0.9102
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0014
Next Token :  main, Posbility: 0.0016
Next Token :  sum, Posbility: 0.0043
Next Token :  , Posbility: 0.0464
Next Token :  rec, Posbility: 0.9336
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0037
Next Token :  count, Posbility: 0.0055
Next Token :  loop, Posbility: 0.0055
Next Token :  sum, Posbility: 0.0131
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0010
Next Token : f, Posbility: 0.0011
Next Token : add, Posbility: 0.0017
Next Token : digit, Posbility: 0.0019
Next Token : digits, Posbility: 0.9766
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Sum, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : product, Posbility: 0.0004
Next Token : of, Posbility: 0.0006
Next Token : list, Posbility: 0.0006
Next Token : count, Posbility: 0.0006
Next Token : sum, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0002
Next Token : 2, Posbility: 0.0005
Next Token : s, Posbility: 0.0005
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0023
Next Token : all, Posbility: 0.0029
Next Token : rec, Posbility: 0.0043
Next Token : opt, Posbility: 0.0217
Next Token : list, Posbility: 0.9258
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0004
Next Token : 1, Posbility: 0.0004
Next Token :  , Posbility: 0.0025
Next Token : 2, Posbility: 0.0028
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0044
Next Token : int, Posbility: 0.0057
Next Token : list, Posbility: 0.0154
Next Token : rec, Posbility: 0.0198
Next Token : opt, Posbility: 0.8438
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token : s, Posbility: 0.0004
Next Token : 2, Posbility: 0.0007
Next Token :  , Posbility: 0.0041
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0006
Next Token : optional, Posbility: 0.0017
Next Token : none, Posbility: 0.0017
Next Token : list, Posbility: 0.0035
Next Token : opt, Posbility: 0.9805
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : none, Posbility: 0.0002
Next Token : list, Posbility: 0.0005
Next Token : optional, Posbility: 0.0005
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : list, Posbility: 0.0003
Next Token : optional, Posbility: 0.0004
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 2, Posbility: 0.0007
Next Token :  =, Posbility: 0.0008
Next Token :  , Posbility: 0.0293
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : none, Posbility: 0.0002
Next Token : op, Posbility: 0.0002
Next Token : optional, Posbility: 0.0005
Next Token : list, Posbility: 0.0006
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0005
Next Token : 
, Posbility: 0.0010
Next Token :  =, Posbility: 0.0032
Next Token : _, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  match, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : digits, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0012
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0003
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  sum, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : summer, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum 
 score:False
Error type: noerr
---------------------------
Next Token : (`, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : ns, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : digits, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  sum, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : degrees, Posbility: 0.0000
Next Token : Digit, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : summer, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : opt, Posbility: 0.0001
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : nos, Posbility: 0.0000
Next Token : ks, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : );, Posbility: 0.0001
Next Token : )), Posbility: 0.0003
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0004
Next Token :  , Posbility: 0.0006
Next Token : , Posbility: 0.0012
Next Token : 

, Posbility: 0.3203
Next Token : 
, Posbility: 0.6758
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)

 score:False
Error type: noerr
---------------------------
Next Token : module, Posbility: 0.0021
Next Token : ```, Posbility: 0.0028
Next Token : in, Posbility: 0.0056
Next Token : (, Posbility: 0.0082
Next Token : let, Posbility: 0.9453
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0008
Next Token :  main, Posbility: 0.0010
Next Token :  sum, Posbility: 0.0024
Next Token :  , Posbility: 0.0327
Next Token :  rec, Posbility: 0.9570
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0027
Next Token :  count, Posbility: 0.0034
Next Token :  loop, Posbility: 0.0039
Next Token :  sum, Posbility: 0.0072
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0006
Next Token : f, Posbility: 0.0007
Next Token : digit, Posbility: 0.0010
Next Token : add, Posbility: 0.0012
Next Token : digits, Posbility: 0.9844
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Sum, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : product, Posbility: 0.0003
Next Token : list, Posbility: 0.0004
Next Token : of, Posbility: 0.0004
Next Token : count, Posbility: 0.0004
Next Token : sum, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0002
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0020
Next Token : all, Posbility: 0.0034
Next Token : rec, Posbility: 0.0043
Next Token : opt, Posbility: 0.0219
Next Token : list, Posbility: 0.9297
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0003
Next Token : 1, Posbility: 0.0003
Next Token : 2, Posbility: 0.0013
Next Token :  , Posbility: 0.0022
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0041
Next Token : int, Posbility: 0.0047
Next Token : list, Posbility: 0.0099
Next Token : rec, Posbility: 0.0112
Next Token : opt, Posbility: 0.8906
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0003
Next Token : none, Posbility: 0.0007
Next Token : optional, Posbility: 0.0008
Next Token : list, Posbility: 0.0015
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : op, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : list, Posbility: 0.0001
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : none, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0110
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : none, Posbility: 0.0001
Next Token : list, Posbility: 0.0002
Next Token : op, Posbility: 0.0002
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0003
Next Token : 
, Posbility: 0.0008
Next Token :  =, Posbility: 0.0052
Next Token : _, Posbility: 0.0096
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  match, Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0005
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : digits, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  avec, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  0, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  |
 score:False
Error type: noerr
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n ::
 score:False
Error type: noerr
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: 
 score:False
Error type: noerr
---------------------------
Next Token : nos, Posbility: 0.0000
Next Token : NS, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns ->
 score:False
Error type: noerr
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> 
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0002
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  sum, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_
 score:False
Error type: noerr
---------------------------
Next Token : add, Posbility: 0.0000
Next Token : summer, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum 
 score:False
Error type: noerr
---------------------------
Next Token : ns, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (
 score:False
Error type: noerr
---------------------------
Next Token : ns, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : digits, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n +
 score:False
Error type: noerr
---------------------------
Next Token : digits, Posbility: 0.0000
Next Token :  sum, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + 
 score:False
Error type: noerr
---------------------------
Next Token : degrees, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : summer, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_
 score:False
Error type: noerr
---------------------------
Next Token :  list, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : ), Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : 
, Posbility: 0.0032
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : ks, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : );, Posbility: 0.0001
Next Token : )), Posbility: 0.0003
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token : , Posbility: 0.0013
Next Token : 

, Posbility: 0.3477
Next Token : 
, Posbility: 0.6484
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)

 score:False
Error type: noerr
---------------------------
Next Token : module, Posbility: 0.0014
Next Token : ```, Posbility: 0.0019
Next Token : in, Posbility: 0.0042
Next Token : (, Posbility: 0.0061
Next Token : let, Posbility: 0.9648
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let
 score:False
Error type: noerr
---------------------------
Next Token :  list, Posbility: 0.0007
Next Token :  main, Posbility: 0.0009
Next Token :  sum, Posbility: 0.0019
Next Token :  , Posbility: 0.0258
Next Token :  rec, Posbility: 0.9648
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  rec, Posbility: 0.0013
Next Token :  count, Posbility: 0.0021
Next Token :  loop, Posbility: 0.0021
Next Token :  sum, Posbility: 0.0045
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : opt, Posbility: 0.0003
Next Token : f, Posbility: 0.0004
Next Token : digit, Posbility: 0.0005
Next Token : add, Posbility: 0.0006
Next Token : digits, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits
 score:False
Error type: noerr
---------------------------
Next Token : Sum, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_
 score:False
Error type: noerr
---------------------------
Next Token : product, Posbility: 0.0002
Next Token : list, Posbility: 0.0003
Next Token : of, Posbility: 0.0003
Next Token : count, Posbility: 0.0003
Next Token : sum, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0002
Next Token : s, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_
 score:False
Error type: noerr
---------------------------
Next Token : of, Posbility: 0.0014
Next Token : all, Posbility: 0.0024
Next Token : rec, Posbility: 0.0024
Next Token : opt, Posbility: 0.0137
Next Token : list, Posbility: 0.9570
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token : 2, Posbility: 0.0006
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0037
Next Token : all, Posbility: 0.0042
Next Token : rec, Posbility: 0.0079
Next Token : list, Posbility: 0.0089
Next Token : opt, Posbility: 0.9102
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_
 score:False
Error type: noerr
---------------------------
Next Token : all, Posbility: 0.0002
Next Token : none, Posbility: 0.0004
Next Token : optional, Posbility: 0.0005
Next Token : list, Posbility: 0.0009
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0000
Next Token : ..., Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : optional, Posbility: 0.0002
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0125
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : list, Posbility: 0.0001
Next Token : op, Posbility: 0.0002
Next Token : optional, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : 
, Posbility: 0.0007
Next Token :  =, Posbility: 0.0058
Next Token : _, Posbility: 0.0178
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =

 score:False
Error type: noerr
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : match, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match
 score:False
Error type: noerr
---------------------------
Next Token :  N, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  |
 score:False
Error type: noerr
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | []
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] 
 score:False
Error type: noerr
---------------------------
Next Token : ()->, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] ->
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  |
 score:False
Error type: noerr
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n 
 score:False
Error type: noerr
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n ::
 score:False
Error type: noerr
---------------------------
Next Token :  nil, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: 
 score:False
Error type: noerr
---------------------------
Next Token : NS, Posbility: 0.0000
Next Token : nos, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns ->
 score:False
Error type: noerr
---------------------------
Next Token :  match, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0015
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> 
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits
 score:False
Error type: noerr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  sum, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_
 score:False
Error type: noerr
---------------------------
Next Token : add, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : summer, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum 
 score:False
Error type: noerr
---------------------------
Next Token : (`, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (
 score:False
Error type: noerr
---------------------------
Next Token : ns, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : digits, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n +
 score:False
Error type: noerr
---------------------------
Next Token :  sum, Posbility: 0.0000
Next Token : digits, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0013
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + 
 score:False
Error type: noerr
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : digits, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : summer, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_
 score:False
Error type: noerr
---------------------------
Next Token : lista, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : opts, Posbility: 0.0000
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : opts, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 0.0229
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : optional, Posbility: 0.0000
Next Token : ott, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : ), Posbility: 0.0002
Next Token : _, Posbility: 0.0006
Next Token : 
, Posbility: 0.0124
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : ks, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : ns, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_opt ns
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : );, Posbility: 0.0001
Next Token : )), Posbility: 0.0001
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_opt ns)
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : , Posbility: 0.0012
Next Token : 

, Posbility: 0.3203
Next Token : 
, Posbility: 0.6758
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_opt ns)

 score:False
Error type: noerr
---------------------------
Next Token : module, Posbility: 0.0014
Next Token : ```, Posbility: 0.0024
Next Token : in, Posbility: 0.0044
Next Token : (, Posbility: 0.0083
Next Token : let, Posbility: 0.9570
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_opt ns)
let
 score:False
Error type: noerr
---------------------------
Next Token :  list, Posbility: 0.0005
Next Token :  main, Posbility: 0.0006
Next Token :  sum, Posbility: 0.0011
Next Token :  , Posbility: 0.0228
Next Token :  rec, Posbility: 0.9688
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_opt ns)
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  rec, Posbility: 0.0013
Next Token :  loop, Posbility: 0.0019
Next Token :  count, Posbility: 0.0021
Next Token :  sum, Posbility: 0.0040
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_opt ns)
let rec 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0003
Next Token : opt, Posbility: 0.0003
Next Token : digit, Posbility: 0.0005
Next Token : add, Posbility: 0.0007
Next Token : digits, Posbility: 0.9922
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_opt ns)
let rec digits
 score:False
Error type: noerr
---------------------------
Next Token : Sum, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_opt ns)
let rec digits_
 score:False
Error type: noerr
---------------------------
Next Token : prod, Posbility: 0.0002
Next Token : list, Posbility: 0.0002
Next Token : of, Posbility: 0.0003
Next Token : count, Posbility: 0.0003
Next Token : sum, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_
 score:False
Error type: noerr
---------------------------
Next Token : of, Posbility: 0.0011
Next Token : rec, Posbility: 0.0016
Next Token : all, Posbility: 0.0019
Next Token : opt, Posbility: 0.0137
Next Token : list, Posbility: 0.9648
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : 2, Posbility: 0.0004
Next Token :  , Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0026
Next Token : all, Posbility: 0.0034
Next Token : rec, Posbility: 0.0043
Next Token : list, Posbility: 0.0081
Next Token : opt, Posbility: 0.9375
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to compute the sum of digits of each number of a given list. *)
let rec digits_sum n =
  match n with
  | 0 -> 0
  | n -> n * 10 + digits_sum (n / 10)
let rec digits_sum_list n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list ns)
let rec digits_sum_list_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt ns)
let rec digits_sum_list_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt ns)
let rec digits_sum_list_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_opt_opt_opt_opt_opt_opt n =
  match n with
  | [] -> 0
  | n :: ns -> digits_sum (n + digits_sum_list_opt_opt_opt_opt_opt_opt_opt ns)
let rec digits_sum_list_opt_
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>