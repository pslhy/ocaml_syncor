code:
 (* Write a  function to count inversions in an array. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sort, Posbility: 0.0059
Next Token :  , Posbility: 0.1187
Next Token :  in, Posbility: 0.1187
Next Token :  count, Posbility: 0.1523
Next Token :  rec, Posbility: 0.5312
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0084
Next Token :  loop, Posbility: 0.0227
Next Token :  in, Posbility: 0.1309
Next Token :  , Posbility: 0.2148
Next Token :  count, Posbility: 0.5156
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0089
Next Token : In, Posbility: 0.0188
Next Token :  , Posbility: 0.0242
Next Token :  =, Posbility: 0.1079
Next Token : _, Posbility: 0.8008
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0069
Next Token : all, Posbility: 0.0089
Next Token : sort, Posbility: 0.0089
Next Token : inv, Posbility: 0.3789
Next Token : in, Posbility: 0.4863
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0009
Next Token : variants, Posbility: 0.0023
Next Token : vers, Posbility: 0.0063
Next Token : version, Posbility: 0.0469
Next Token : versions, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0188
Next Token : (, Posbility: 0.0240
Next Token : _, Posbility: 0.0840
Next Token :  =, Posbility: 0.1387
Next Token :  , Posbility: 0.6211
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0854
Next Token : n, Posbility: 0.1099
Next Token : x, Posbility: 0.1245
Next Token : arr, Posbility: 0.2051
Next Token : (, Posbility: 0.2324
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : i, Posbility: 0.0459
Next Token : array, Posbility: 0.0664
Next Token : x, Posbility: 0.0757
Next Token : arr, Posbility: 0.0854
Next Token : a, Posbility: 0.1807
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1,, Posbility: 0.0072
Next Token : 0,, Posbility: 0.0119
Next Token : :, Posbility: 0.0684
Next Token : ,, Posbility: 0.2383
Next Token :  , Posbility: 0.6484
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : b, Posbility: 0.0006
Next Token : ,, Posbility: 0.0031
Next Token : ::, Posbility: 0.0075
Next Token : :, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a :
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  array, Posbility: 0.0280
Next Token :  float, Posbility: 0.0359
Next Token :  ', Posbility: 0.0591
Next Token :  , Posbility: 0.0977
Next Token :  int, Posbility: 0.7227
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0020
Next Token : ), Posbility: 0.0054
Next Token :  , Posbility: 0.0146
Next Token :  array, Posbility: 0.1777
Next Token :  list, Posbility: 0.7969
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0004
Next Token :  *), Posbility: 0.0006
Next Token : ):, Posbility: 0.0008
Next Token :  , Posbility: 0.0067
Next Token : ), Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0067
Next Token :  i, Posbility: 0.0067
Next Token :   , Posbility: 0.0111
Next Token :  , Posbility: 0.3242
Next Token :  =, Posbility: 0.6094
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0052
Next Token :  function, Posbility: 0.0111
Next Token :  match, Posbility: 0.0208
Next Token :  , Posbility: 0.0640
Next Token : 
, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0043
Next Token : 	, Posbility: 0.0092
Next Token :    , Posbility: 0.0134
Next Token :     , Posbility: 0.1270
Next Token :   , Posbility: 0.8281
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0063
Next Token : (, Posbility: 0.0103
Next Token : if, Posbility: 0.2354
Next Token : let, Posbility: 0.2676
Next Token : match, Posbility: 0.4395
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0018
Next Token :  [, Posbility: 0.0026
Next Token :  String, Posbility: 0.0042
Next Token :  , Posbility: 0.1592
Next Token :  a, Posbility: 0.8086
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0021
Next Token :  @, Posbility: 0.0024
Next Token :  , Posbility: 0.0045
Next Token :  |, Posbility: 0.0058
Next Token :  with, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0017
Next Token :  , Posbility: 0.0047
Next Token :  [, Posbility: 0.0078
Next Token :  [], Posbility: 0.0835
Next Token : 
, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0010
Next Token :       , Posbility: 0.0018
Next Token :    , Posbility: 0.0029
Next Token :     , Posbility: 0.0669
Next Token :   , Posbility: 0.9258
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : [, Posbility: 0.0095
Next Token : [], Posbility: 0.0178
Next Token : |, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [],, Posbility: 0.0007
Next Token :  nil, Posbility: 0.0106
Next Token :  , Posbility: 0.0136
Next Token :  [, Posbility: 0.0175
Next Token :  [], Posbility: 0.9531
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0064
Next Token :   , Posbility: 0.0064
Next Token :  =>, Posbility: 0.0082
Next Token :  |, Posbility: 0.0105
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0002
Next Token : -, Posbility: 0.0003
Next Token : â†’, Posbility: 0.0003
Next Token : ::, Posbility: 0.0019
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0134
Next Token : 
, Posbility: 0.0366
Next Token :  , Posbility: 0.0991
Next Token :  [], Posbility: 0.0991
Next Token :  0, Posbility: 0.7344
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0018
Next Token :   , Posbility: 0.0044
Next Token :  , Posbility: 0.0136
Next Token :  |, Posbility: 0.0136
Next Token : 
, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0181
Next Token :  i, Posbility: 0.0205
Next Token :  a, Posbility: 0.1040
Next Token :  [, Posbility: 0.2207
Next Token :  , Posbility: 0.5977
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0259
Next Token : hd, Posbility: 0.0294
Next Token : h, Posbility: 0.0623
Next Token : _, Posbility: 0.1689
Next Token : x, Posbility: 0.5898
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0029
Next Token : :, Posbility: 0.0029
Next Token : ::, Posbility: 0.1216
Next Token : s, Posbility: 0.1562
Next Token :  , Posbility: 0.6992
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0016
Next Token : :, Posbility: 0.0021
Next Token : if, Posbility: 0.0105
Next Token : ->, Posbility: 0.0366
Next Token : ::, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  l, Posbility: 0.0019
Next Token :  a, Posbility: 0.0047
Next Token :  [], Posbility: 0.0077
Next Token :  rest, Posbility: 0.0825
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : b, Posbility: 0.0093
Next Token : tail, Posbility: 0.0173
Next Token : _, Posbility: 0.0366
Next Token : y, Posbility: 0.0776
Next Token : x, Posbility: 0.8320
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0009
Next Token : _, Posbility: 0.0010
Next Token :  , Posbility: 0.0013
Next Token : ', Posbility: 0.0228
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0011
Next Token :   , Posbility: 0.0033
Next Token :  =>, Posbility: 0.0048
Next Token :  when, Posbility: 0.0747
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  when, Posbility: 0.0002
Next Token :  =>, Posbility: 0.0011
Next Token : if, Posbility: 0.0035
Next Token : ::, Posbility: 0.0292
Next Token : ->, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0047
Next Token :  1, Posbility: 0.0210
Next Token :  count, Posbility: 0.0942
Next Token :  , Posbility: 0.1553
Next Token : 
, Posbility: 0.6992
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0064
Next Token :   , Posbility: 0.0093
Next Token :      , Posbility: 0.0154
Next Token :     , Posbility: 0.4492
Next Token :       , Posbility: 0.5078
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0315
Next Token : match, Posbility: 0.0457
Next Token : if, Posbility: 0.0664
Next Token : count, Posbility: 0.0854
Next Token : let, Posbility: 0.7148
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0618
Next Token :  in, Posbility: 0.1021
Next Token :  rec, Posbility: 0.1309
Next Token :  count, Posbility: 0.1680
Next Token :  , Posbility: 0.3555
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0515
Next Token : b, Posbility: 0.0515
Next Token : inv, Posbility: 0.1089
Next Token : x, Posbility: 0.1582
Next Token : n, Posbility: 0.2031
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0037
Next Token : x, Posbility: 0.0114
Next Token : _, Posbility: 0.0272
Next Token : 1, Posbility: 0.0349
Next Token :  =, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0055
Next Token :  1, Posbility: 0.0150
Next Token :  a, Posbility: 0.0408
Next Token :  , Posbility: 0.1104
Next Token :  count, Posbility: 0.8164
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0001
Next Token :  in, Posbility: 0.0003
Next Token :  a, Posbility: 0.0035
Next Token :  , Posbility: 0.0179
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pair, Posbility: 0.0002
Next Token : inv, Posbility: 0.0002
Next Token : n, Posbility: 0.0003
Next Token : one, Posbility: 0.0005
Next Token : in, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : vers, Posbility: 0.0000
Next Token :  versions, Posbility: 0.0000
Next Token : version, Posbility: 0.0003
Next Token : variants, Posbility: 0.0006
Next Token : versions, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0019
Next Token : (, Posbility: 0.0031
Next Token : _, Posbility: 0.0040
Next Token :  a, Posbility: 0.0109
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ([], Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : (, Posbility: 0.0293
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0019
Next Token : ;, Posbility: 0.0019
Next Token :  +, Posbility: 0.0050
Next Token : 
, Posbility: 0.0226
Next Token :  in, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0007
Next Token : 

, Posbility: 0.0007
Next Token :  count, Posbility: 0.0019
Next Token :  , Posbility: 0.0075
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0010
Next Token :     , Posbility: 0.0010
Next Token :         , Posbility: 0.0028
Next Token :      , Posbility: 0.0123
Next Token :       , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0461
Next Token : (, Posbility: 0.0522
Next Token : if, Posbility: 0.2061
Next Token : n, Posbility: 0.2656
Next Token : let, Posbility: 0.3008
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0304
Next Token :  in, Posbility: 0.0503
Next Token :  i, Posbility: 0.0825
Next Token :  count, Posbility: 0.0825
Next Token :  , Posbility: 0.6094
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0579
Next Token : c, Posbility: 0.0579
Next Token : x, Posbility: 0.0654
Next Token : m, Posbility: 0.0957
Next Token : n, Posbility: 0.3340
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0542
Next Token : 2, Posbility: 0.1299
Next Token :  =, Posbility: 0.1885
Next Token : 1, Posbility: 0.2422
Next Token : _, Posbility: 0.2422
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : a, Posbility: 0.0332
Next Token : rev, Posbility: 0.0332
Next Token : 1, Posbility: 0.0425
Next Token : plus, Posbility: 0.0796
Next Token : inv, Posbility: 0.2773
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0029
Next Token : ,, Posbility: 0.0038
Next Token : _, Posbility: 0.0102
Next Token : s, Posbility: 0.0586
Next Token :  =, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0080
Next Token : 
, Posbility: 0.0217
Next Token :  a, Posbility: 0.0591
Next Token :  count, Posbility: 0.4375
Next Token :  , Posbility: 0.4375
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0498
Next Token : if, Posbility: 0.0498
Next Token : List, Posbility: 0.0723
Next Token : x, Posbility: 0.0928
Next Token : n, Posbility: 0.5352
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0093
Next Token : _, Posbility: 0.0175
Next Token :  *, Posbility: 0.2129
Next Token :  +, Posbility: 0.3086
Next Token :  , Posbility: 0.3965
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : //, Posbility: 0.0043
Next Token : (, Posbility: 0.0072
Next Token : /, Posbility: 0.0134
Next Token : ^, Posbility: 0.0172
Next Token : -, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0135
Next Token :  a, Posbility: 0.0153
Next Token :  1, Posbility: 0.0153
Next Token :  count, Posbility: 0.3945
Next Token :  , Posbility: 0.5078
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0234
Next Token : fold, Posbility: 0.0342
Next Token : (, Posbility: 0.1348
Next Token : x, Posbility: 0.2227
Next Token : n, Posbility: 0.3672
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0356
Next Token :  *, Posbility: 0.0459
Next Token :  +, Posbility: 0.0669
Next Token : _, Posbility: 0.2324
Next Token :  , Posbility: 0.2988
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : //, Posbility: 0.0439
Next Token : -, Posbility: 0.0728
Next Token : >, Posbility: 0.0933
Next Token : <, Posbility: 0.2539
Next Token : /, Posbility: 0.4180
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0087
Next Token :  2;, Posbility: 0.0098
Next Token :  ((, Posbility: 0.0143
Next Token :  a, Posbility: 0.0388
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0098
Next Token : 2., Posbility: 0.0111
Next Token : Int, Posbility: 0.0161
Next Token : (, Posbility: 0.0498
Next Token : 2, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0021
Next Token : 
, Posbility: 0.0021
Next Token :  , Posbility: 0.0058
Next Token :  +, Posbility: 0.0066
Next Token :  in, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0005
Next Token :   , Posbility: 0.0015
Next Token : 

, Posbility: 0.0015
Next Token :  , Posbility: 0.0109
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 0.0006
Next Token :         , Posbility: 0.0019
Next Token :      , Posbility: 0.0067
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0078
Next Token : (, Posbility: 0.0510
Next Token : let, Posbility: 0.0742
Next Token : if, Posbility: 0.0952
Next Token : n, Posbility: 0.7031
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0017
Next Token :  *, Posbility: 0.0024
Next Token :  , Posbility: 0.0109
Next Token :  +, Posbility: 0.2188
Next Token : _, Posbility: 0.7617
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_
 score:False
Error type: noerr
---------------------------
Next Token : i, Posbility: 0.0000
Next Token : rev, Posbility: 0.0000
Next Token : inc, Posbility: 0.0000
Next Token : in, Posbility: 0.0002
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0120
Next Token :  , Posbility: 0.0369
Next Token : 

, Posbility: 0.2129
Next Token : 
, Posbility: 0.3086
Next Token :  +, Posbility: 0.3965
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0052
Next Token : 
, Posbility: 0.0086
Next Token :  1, Posbility: 0.0142
Next Token :  count, Posbility: 0.4707
Next Token :  , Posbility: 0.4707
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0092
Next Token : if, Posbility: 0.0413
Next Token : x, Posbility: 0.0684
Next Token : (, Posbility: 0.0874
Next Token : n, Posbility: 0.7344
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0767
Next Token : 

, Posbility: 0.1260
Next Token :  , Posbility: 0.1621
Next Token : 
, Posbility: 0.2080
Next Token : _, Posbility: 0.3438
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_
 score:False
Error type: noerr
---------------------------
Next Token : to, Posbility: 0.0000
Next Token : inc, Posbility: 0.0001
Next Token : rev, Posbility: 0.0001
Next Token : in, Posbility: 0.0007
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0334
Next Token :  +, Posbility: 0.0549
Next Token : 

, Posbility: 0.2178
Next Token :  , Posbility: 0.2461
Next Token : 
, Posbility: 0.4062
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0269
Next Token : end, Posbility: 0.0366
Next Token : 

, Posbility: 0.0442
Next Token :   , Posbility: 0.2109
Next Token : in, Posbility: 0.3262
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fix, Posbility: 0.0291
Next Token :  count, Posbility: 0.0698
Next Token :  , Posbility: 0.0894
Next Token : 

, Posbility: 0.2148
Next Token : 
, Posbility: 0.5156
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : println, Posbility: 0.0145
Next Token : [, Posbility: 0.0198
Next Token : (, Posbility: 0.0417
Next Token : count, Posbility: 0.1758
Next Token : let, Posbility: 0.5078
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0238
Next Token :  , Posbility: 0.1377
Next Token :  count, Posbility: 0.1768
Next Token :  main, Posbility: 0.2559
Next Token :  rec, Posbility: 0.2910
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0117
Next Token :  rec, Posbility: 0.0170
Next Token :  loop, Posbility: 0.0170
Next Token :  , Posbility: 0.1611
Next Token :  count, Posbility: 0.6367
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0007
Next Token : ing, Posbility: 0.0007
Next Token :  =, Posbility: 0.0040
Next Token :  , Posbility: 0.0123
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sorted, Posbility: 0.0055
Next Token : pairs, Posbility: 0.0062
Next Token : all, Posbility: 0.0245
Next Token : inv, Posbility: 0.0245
Next Token : in, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0003
Next Token : vers, Posbility: 0.0009
Next Token : variants, Posbility: 0.0009
Next Token : version, Posbility: 0.0179
Next Token : versions, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0087
Next Token :  , Posbility: 0.0569
Next Token : ', Posbility: 0.0732
Next Token : 2, Posbility: 0.1206
Next Token : _, Posbility: 0.6953
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0405
Next Token : aux, Posbility: 0.0588
Next Token : opt, Posbility: 0.0757
Next Token : rec, Posbility: 0.1104
Next Token : iter, Posbility: 0.1416
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0177
Next Token :  =, Posbility: 0.0228
Next Token :  a, Posbility: 0.0258
Next Token : ative, Posbility: 0.0796
Next Token :  , Posbility: 0.7539
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0039
Next Token : arr, Posbility: 0.0044
Next Token : n, Posbility: 0.0106
Next Token : x, Posbility: 0.0136
Next Token : (, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : acc, Posbility: 0.0021
Next Token : x, Posbility: 0.0057
Next Token : i, Posbility: 0.0073
Next Token : n, Posbility: 0.0073
Next Token : a, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0004
Next Token : 0, Posbility: 0.0005
Next Token : ,, Posbility: 0.0040
Next Token : :, Posbility: 0.0052
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a :
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  ', Posbility: 0.0003
Next Token :  list, Posbility: 0.0005
Next Token : int, Posbility: 0.0006
Next Token :  , Posbility: 0.0013
Next Token :  int, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0003
Next Token :  , Posbility: 0.0015
Next Token :  array, Posbility: 0.0040
Next Token : ), Posbility: 0.0052
Next Token :  list, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0002
Next Token : ):, Posbility: 0.0002
Next Token : ,, Posbility: 0.0007
Next Token :  , Posbility: 0.0017
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0013
Next Token :  a, Posbility: 0.0013
Next Token : 
, Posbility: 0.0014
Next Token :  , Posbility: 0.0369
Next Token :  =, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0027
Next Token :  a, Posbility: 0.0065
Next Token :  count, Posbility: 0.0084
Next Token :  , Posbility: 0.0121
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0019
Next Token :    , Posbility: 0.0039
Next Token : let, Posbility: 0.0084
Next Token :     , Posbility: 0.0177
Next Token :   , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0074
Next Token : List, Posbility: 0.0074
Next Token : if, Posbility: 0.0483
Next Token : let, Posbility: 0.3145
Next Token : match, Posbility: 0.5859
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  count, Posbility: 0.0001
Next Token :  iter, Posbility: 0.0002
Next Token :  , Posbility: 0.0028
Next Token :  a, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  [], Posbility: 0.0009
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 0.0013
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0002
Next Token :  nil, Posbility: 0.0003
Next Token :  [, Posbility: 0.0025
Next Token :  , Posbility: 0.0067
Next Token :  [], Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  =>, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  |, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0009
Next Token :  [], Posbility: 0.0024
Next Token : 
, Posbility: 0.0066
Next Token :  , Posbility: 0.0066
Next Token :  0, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  as, Posbility: 0.0003
Next Token :  |, Posbility: 0.0006
Next Token :  , Posbility: 0.0007
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0039
Next Token :  i, Posbility: 0.0050
Next Token :  [], Posbility: 0.0107
Next Token :  [, Posbility: 0.0137
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0021
Next Token : h, Posbility: 0.0027
Next Token : head, Posbility: 0.0031
Next Token : _, Posbility: 0.0156
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0005
Next Token : i, Posbility: 0.0006
Next Token : s, Posbility: 0.0058
Next Token : ::, Posbility: 0.0123
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : x, Posbility: 0.0002
Next Token : :, Posbility: 0.0006
Next Token : ->, Posbility: 0.0012
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0002
Next Token :  [], Posbility: 0.0007
Next Token :  a, Posbility: 0.0013
Next Token :  rest, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : y, Posbility: 0.0013
Next Token : _, Posbility: 0.0067
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : ', Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  =>, Posbility: 0.0009
Next Token :  when, Posbility: 0.0076
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : if, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0002
Next Token : ::, Posbility: 0.0006
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0009
Next Token :  {, Posbility: 0.0019
Next Token :  count, Posbility: 0.0074
Next Token :  , Posbility: 0.0227
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0006
Next Token :   , Posbility: 0.0007
Next Token :      , Posbility: 0.0031
Next Token :     , Posbility: 0.0067
Next Token :       , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0063
Next Token : count, Posbility: 0.0171
Next Token : if, Posbility: 0.0171
Next Token : match, Posbility: 0.0171
Next Token : let, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0085
Next Token :  i, Posbility: 0.0123
Next Token :  count, Posbility: 0.0204
Next Token :  rec, Posbility: 0.0432
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0024
Next Token : b, Posbility: 0.0030
Next Token : (, Posbility: 0.0039
Next Token : x, Posbility: 0.0106
Next Token : n, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token : 0, Posbility: 0.0009
Next Token : 1, Posbility: 0.0023
Next Token : _, Posbility: 0.0471
Next Token :  =, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0024
Next Token :  1, Posbility: 0.0024
Next Token :  a, Posbility: 0.0065
Next Token :  , Posbility: 0.0177
Next Token :  count, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  a, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : iter, Posbility: 0.0001
Next Token : inv, Posbility: 0.0002
Next Token : in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : vers, Posbility: 0.0000
Next Token : version, Posbility: 0.0000
Next Token :  versions, Posbility: 0.0000
Next Token : variants, Posbility: 0.0001
Next Token : versions, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token :  iter, Posbility: 0.0004
Next Token :  a, Posbility: 0.0147
Next Token :  , Posbility: 0.1797
Next Token : _, Posbility: 0.8047
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0000
Next Token : helper, Posbility: 0.0000
Next Token : aux, Posbility: 0.0000
Next Token : rec, Posbility: 0.0025
Next Token : iter, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : _, Posbility: 0.0017
Next Token :  a, Posbility: 0.0025
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0052
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  in, Posbility: 0.0025
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0003
Next Token : 
, Posbility: 0.0008
Next Token :  , Posbility: 0.0008
Next Token :  +, Posbility: 0.0032
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :           , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0022
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0039
Next Token : if, Posbility: 0.0083
Next Token : match, Posbility: 0.0083
Next Token : n, Posbility: 0.0137
Next Token : let, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0009
Next Token :  count, Posbility: 0.0009
Next Token :  i, Posbility: 0.0013
Next Token :  rec, Posbility: 0.0013
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0004
Next Token : m, Posbility: 0.0004
Next Token : inv, Posbility: 0.0007
Next Token : x, Posbility: 0.0015
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0002
Next Token : 2, Posbility: 0.0005
Next Token : 1, Posbility: 0.0008
Next Token :  =, Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : inc, Posbility: 0.0001
Next Token : in, Posbility: 0.0001
Next Token : iter, Posbility: 0.0004
Next Token : rev, Posbility: 0.0009
Next Token : inv, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token : _, Posbility: 0.0013
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0003
Next Token : 
, Posbility: 0.0015
Next Token :  a, Posbility: 0.0019
Next Token :  count, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0004
Next Token : List, Posbility: 0.0008
Next Token : (, Posbility: 0.0012
Next Token : x, Posbility: 0.0015
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : ., Posbility: 0.0002
Next Token :  *, Posbility: 0.0015
Next Token :  +, Posbility: 0.0059
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : ^, Posbility: 0.0001
Next Token : /, Posbility: 0.0005
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0005
Next Token :  a, Posbility: 0.0005
Next Token :  1, Posbility: 0.0010
Next Token :  count, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token : x, Posbility: 0.0005
Next Token : (, Posbility: 0.0041
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0002
Next Token :  *, Posbility: 0.0003
Next Token : /, Posbility: 0.0003
Next Token : _, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  2;, Posbility: 0.0000
Next Token :  4, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 5, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 3, Posbility: 0.0001
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  +, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :         , Posbility: 0.0001
Next Token :      , Posbility: 0.0006
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : count, Posbility: 0.0005
Next Token : (, Posbility: 0.0017
Next Token : if, Posbility: 0.0019
Next Token : let, Posbility: 0.0085
Next Token : n, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token :  +, Posbility: 0.0140
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : inc, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token : 
, Posbility: 0.0036
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  1, Posbility: 0.0008
Next Token :  count, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0003
Next Token :  +, Posbility: 0.0009
Next Token : 
, Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iv, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0013
Next Token :  +, Posbility: 0.0034
Next Token : 

, Posbility: 0.0135
Next Token :  in, Posbility: 0.0325
Next Token : 
, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : end, Posbility: 0.0044
Next Token : (, Posbility: 0.0098
Next Token :   , Posbility: 0.0143
Next Token : let, Posbility: 0.0267
Next Token : in, Posbility: 0.8867
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : , Posbility: 0.0001
Next Token : ;, Posbility: 0.0007
Next Token :  , Posbility: 0.0020
Next Token : 

, Posbility: 0.2676
Next Token : 
, Posbility: 0.7266
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0121
Next Token : printf, Posbility: 0.0166
Next Token : count, Posbility: 0.0258
Next Token : (, Posbility: 0.0659
Next Token : let, Posbility: 0.7539
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0332
Next Token :  main, Posbility: 0.0618
Next Token :  , Posbility: 0.1309
Next Token :  count, Posbility: 0.2158
Next Token :  rec, Posbility: 0.4570
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0075
Next Token :  rec, Posbility: 0.0085
Next Token :  iter, Posbility: 0.0096
Next Token :  , Posbility: 0.1035
Next Token :  count, Posbility: 0.7656
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : ing, Posbility: 0.0003
Next Token :  =, Posbility: 0.0013
Next Token :  , Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : permutation, Posbility: 0.0016
Next Token : pairs, Posbility: 0.0023
Next Token : all, Posbility: 0.0034
Next Token : inv, Posbility: 0.0039
Next Token : in, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : vers, Posbility: 0.0002
Next Token : variants, Posbility: 0.0003
Next Token : version, Posbility: 0.0025
Next Token : versions, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0013
Next Token : ', Posbility: 0.0030
Next Token : 2, Posbility: 0.0154
Next Token :  , Posbility: 0.0198
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0232
Next Token : loop, Posbility: 0.0339
Next Token : opt, Posbility: 0.0383
Next Token : rec, Posbility: 0.1040
Next Token : iter, Posbility: 0.3633
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0134
Next Token :  , Posbility: 0.0320
Next Token : ', Posbility: 0.0320
Next Token : 2, Posbility: 0.4414
Next Token : _, Posbility: 0.4414
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : iter, Posbility: 0.0284
Next Token : 2, Posbility: 0.0366
Next Token : tail, Posbility: 0.0366
Next Token : rec, Posbility: 0.0532
Next Token : opt, Posbility: 0.1855
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0043
Next Token : 1, Posbility: 0.0070
Next Token : i, Posbility: 0.0103
Next Token : _, Posbility: 0.0245
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : arr, Posbility: 0.0008
Next Token : :, Posbility: 0.0009
Next Token : n, Posbility: 0.0012
Next Token : x, Posbility: 0.0059
Next Token : (, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : acc, Posbility: 0.0005
Next Token : n, Posbility: 0.0009
Next Token : i, Posbility: 0.0013
Next Token : x, Posbility: 0.0025
Next Token : a, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 0.0004
Next Token : :, Posbility: 0.0028
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a :
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  ', Posbility: 0.0001
Next Token :  float, Posbility: 0.0001
Next Token : int, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0000
Next Token :  , Posbility: 0.0006
Next Token : ), Posbility: 0.0009
Next Token :  array, Posbility: 0.0019
Next Token :  list, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  with, Posbility: 0.0001
Next Token :  *, Posbility: 0.0002
Next Token : ,, Posbility: 0.0005
Next Token :  , Posbility: 0.0067
Next Token : ), Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0007
Next Token :  ?, Posbility: 0.0010
Next Token : 
, Posbility: 0.0016
Next Token :  , Posbility: 0.0371
Next Token :  =, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0005
Next Token :  count, Posbility: 0.0007
Next Token :  match, Posbility: 0.0025
Next Token :  , Posbility: 0.0028
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0003
Next Token :    , Posbility: 0.0015
Next Token : let, Posbility: 0.0031
Next Token :     , Posbility: 0.0059
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0015
Next Token : if, Posbility: 0.0141
Next Token : try, Posbility: 0.0205
Next Token : let, Posbility: 0.0811
Next Token : match, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  count, Posbility: 0.0001
Next Token :  , Posbility: 0.0041
Next Token :  a, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0001
Next Token :  |, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  {, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  [], Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0007
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0002
Next Token :  nil, Posbility: 0.0002
Next Token :  [, Posbility: 0.0025
Next Token :  , Posbility: 0.0067
Next Token :  [], Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  |, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0009
Next Token :  None, Posbility: 0.0009
Next Token : 
, Posbility: 0.0024
Next Token :  , Posbility: 0.0067
Next Token :  0, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  as, Posbility: 0.0003
Next Token :  |, Posbility: 0.0005
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0005
Next Token :  0, Posbility: 0.0021
Next Token :  [, Posbility: 0.0066
Next Token :  [], Posbility: 0.0109
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : head, Posbility: 0.0005
Next Token : (, Posbility: 0.0009
Next Token : _, Posbility: 0.0067
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  |, Posbility: 0.0004
Next Token : ::, Posbility: 0.0015
Next Token : s, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : :, Posbility: 0.0004
Next Token : ->, Posbility: 0.0009
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  rest, Posbility: 0.0002
Next Token :  a, Posbility: 0.0002
Next Token :  [], Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : _, Posbility: 0.0076
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token :  =>, Posbility: 0.0004
Next Token :  |, Posbility: 0.0004
Next Token :  when, Posbility: 0.0085
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token :  =>, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0004
Next Token :  count, Posbility: 0.0013
Next Token :  match, Posbility: 0.0022
Next Token :  , Posbility: 0.0075
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :        , Posbility: 0.0005
Next Token :      , Posbility: 0.0017
Next Token :     , Posbility: 0.0025
Next Token :       , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0023
Next Token : if, Posbility: 0.0105
Next Token : try, Posbility: 0.0105
Next Token : match, Posbility: 0.0284
Next Token : let, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0010
Next Token : ?, Posbility: 0.0013
Next Token :  count, Posbility: 0.0019
Next Token :  rec, Posbility: 0.0122
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0005
Next Token : opt, Posbility: 0.0012
Next Token : (, Posbility: 0.0015
Next Token : x, Posbility: 0.0036
Next Token : n, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0004
Next Token :   , Posbility: 0.0004
Next Token : 1, Posbility: 0.0011
Next Token : _, Posbility: 0.0179
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0004
Next Token :  match, Posbility: 0.0010
Next Token : 
, Posbility: 0.0015
Next Token :  , Posbility: 0.0085
Next Token :  count, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ing, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : version, Posbility: 0.0000
Next Token : vers, Posbility: 0.0000
Next Token :  versions, Posbility: 0.0000
Next Token : variants, Posbility: 0.0001
Next Token : versions, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  a, Posbility: 0.0002
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : it, Posbility: 0.0000
Next Token : iterator, Posbility: 0.0000
Next Token : rec, Posbility: 0.0000
Next Token : opt, Posbility: 0.0003
Next Token : iter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token :  a, Posbility: 0.0003
Next Token :  , Posbility: 0.0474
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : op, Posbility: 0.0000
Next Token : rec, Posbility: 0.0001
Next Token : aux, Posbility: 0.0001
Next Token : iter, Posbility: 0.0010
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  a, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0002
Next Token :  with, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0017
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0008
Next Token : n, Posbility: 0.0015
Next Token : match, Posbility: 0.0032
Next Token : if, Posbility: 0.0036
Next Token : let, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : inv, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  =, Posbility: 0.0005
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : rev, Posbility: 0.0001
Next Token : opt, Posbility: 0.0007
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  count, Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0000
Next Token : try, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ~/, Posbility: 0.0000
Next Token : >, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2.0, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  2;, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 5, Posbility: 0.0000
Next Token : 2,, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0013
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0012
Next Token : match, Posbility: 0.0022
Next Token : let, Posbility: 0.0031
Next Token : if, Posbility: 0.0046
Next Token : n, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  +, Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token : iv, Posbility: 0.0000
Next Token : inc, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0017
Next Token :  +, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Inv, Posbility: 0.0000
Next Token : inc, Posbility: 0.0000
Next Token : iv, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0014
Next Token :  , Posbility: 0.0016
Next Token :  in, Posbility: 0.0071
Next Token : 

, Posbility: 0.0527
Next Token : 
, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0033
Next Token : (, Posbility: 0.0070
Next Token :   , Posbility: 0.0085
Next Token : let, Posbility: 0.0216
Next Token : in, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : , Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.1328
Next Token : 
, Posbility: 0.8672
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : open, Posbility: 0.0074
Next Token : *, Posbility: 0.0138
Next Token : 

, Posbility: 0.0156
Next Token : (, Posbility: 0.0898
Next Token : let, Posbility: 0.7500
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0143
Next Token :  main, Posbility: 0.0209
Next Token :  , Posbility: 0.0825
Next Token :  count, Posbility: 0.1367
Next Token :  rec, Posbility: 0.6914
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  find, Posbility: 0.0033
Next Token :  rec, Posbility: 0.0037
Next Token :  iter, Posbility: 0.0037
Next Token :  , Posbility: 0.0449
Next Token :  count, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : ing, Posbility: 0.0001
Next Token :  =, Posbility: 0.0004
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : permutation, Posbility: 0.0007
Next Token : pairs, Posbility: 0.0009
Next Token : all, Posbility: 0.0013
Next Token : inv, Posbility: 0.0019
Next Token : in, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : vers, Posbility: 0.0001
Next Token : variants, Posbility: 0.0001
Next Token : version, Posbility: 0.0006
Next Token : versions, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0004
Next Token : ', Posbility: 0.0007
Next Token :  , Posbility: 0.0040
Next Token : 2, Posbility: 0.0052
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tail, Posbility: 0.0132
Next Token : loop, Posbility: 0.0193
Next Token : rec, Posbility: 0.0593
Next Token : opt, Posbility: 0.2344
Next Token : iter, Posbility: 0.4375
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0031
Next Token : 3, Posbility: 0.0050
Next Token :  , Posbility: 0.0155
Next Token : 2, Posbility: 0.1143
Next Token : _, Posbility: 0.8477
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : mem, Posbility: 0.0098
Next Token : fast, Posbility: 0.0098
Next Token : rev, Posbility: 0.0142
Next Token : rec, Posbility: 0.0342
Next Token : opt, Posbility: 0.6055
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0106
Next Token : ', Posbility: 0.0254
Next Token :  , Posbility: 0.0369
Next Token : 2, Posbility: 0.3965
Next Token : _, Posbility: 0.5078
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ex, Posbility: 0.0214
Next Token : rev, Posbility: 0.0275
Next Token : 2, Posbility: 0.0452
Next Token : rec, Posbility: 0.0513
Next Token : opt, Posbility: 0.1787
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0069
Next Token : 1, Posbility: 0.0069
Next Token : 2, Posbility: 0.0114
Next Token : _, Posbility: 0.0214
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : :, Posbility: 0.0002
Next Token : n, Posbility: 0.0003
Next Token : x, Posbility: 0.0017
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : l, Posbility: 0.0002
Next Token : i, Posbility: 0.0002
Next Token : n, Posbility: 0.0004
Next Token : x, Posbility: 0.0008
Next Token : a, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token : :, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a :
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  string, Posbility: 0.0000
Next Token :  float, Posbility: 0.0001
Next Token : int, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *), Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : ), Posbility: 0.0005
Next Token :  array, Posbility: 0.0006
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  *), Posbility: 0.0000
Next Token : ,, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0036
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token :  count, Posbility: 0.0001
Next Token :  match, Posbility: 0.0004
Next Token :  , Posbility: 0.0007
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0002
Next Token :    , Posbility: 0.0007
Next Token : let, Posbility: 0.0010
Next Token :     , Posbility: 0.0032
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : count, Posbility: 0.0009
Next Token : if, Posbility: 0.0013
Next Token : try, Posbility: 0.0040
Next Token : let, Posbility: 0.0228
Next Token : match, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token :  count, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  a, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  avec, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  |, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0003
Next Token :  , Posbility: 0.0015
Next Token :  [], Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  |, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0003
Next Token :  None, Posbility: 0.0003
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 0.0009
Next Token :  0, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  as, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : end, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0001
Next Token :  0, Posbility: 0.0003
Next Token :  [, Posbility: 0.0004
Next Token :  [], Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0012
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : ::, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::{, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : :, Posbility: 0.0001
Next Token : ->, Posbility: 0.0001
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0009
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =>, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  when, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : â†’, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token :  count, Posbility: 0.0002
Next Token :  match, Posbility: 0.0003
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :        , Posbility: 0.0002
Next Token :      , Posbility: 0.0006
Next Token :     , Posbility: 0.0008
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0010
Next Token : if, Posbility: 0.0022
Next Token : try, Posbility: 0.0024
Next Token : match, Posbility: 0.0075
Next Token : let, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0002
Next Token :  v, Posbility: 0.0002
Next Token :  count, Posbility: 0.0005
Next Token :  rec, Posbility: 0.0025
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0002
Next Token : (), Posbility: 0.0003
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 0.0012
Next Token : n, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : 0, Posbility: 0.0002
Next Token : 1, Posbility: 0.0008
Next Token : _, Posbility: 0.0052
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0002
Next Token :  a, Posbility: 0.0003
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 0.0041
Next Token :  count, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ing, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : version, Posbility: 0.0000
Next Token : vers, Posbility: 0.0000
Next Token :  versions, Posbility: 0.0000
Next Token : variants, Posbility: 0.0000
Next Token : versions, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 0.0010
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : int, Posbility: 0.0000
Next Token : iterate, Posbility: 0.0000
Next Token : iterator, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : iter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  a, Posbility: 0.0002
Next Token :  , Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : optimize, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : optional, Posbility: 0.0001
Next Token : iter, Posbility: 0.0006
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token :  , Posbility: 0.0140
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : obj, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : iter, Posbility: 0.0001
Next Token : op, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  a, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :        , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0003
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : match, Posbility: 0.0002
Next Token : if, Posbility: 0.0003
Next Token : n, Posbility: 0.0003
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : rev, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :  count, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : try, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : âˆ’, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token : ~/, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  2;, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 5, Posbility: 0.0000
Next Token : 2,, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0002
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : if, Posbility: 0.0003
Next Token : let, Posbility: 0.0007
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : inst, Posbility: 0.0000
Next Token : inc, Posbility: 0.0000
Next Token : iv, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ev, Posbility: 0.0000
Next Token : Inv, Posbility: 0.0000
Next Token : iv, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : , Posbility: 0.0009
Next Token :  , Posbility: 0.0009
Next Token :  in, Posbility: 0.0018
Next Token : 

, Posbility: 0.0596
Next Token : 
, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ```, Posbility: 0.0031
Next Token :   , Posbility: 0.0052
Next Token : (, Posbility: 0.0090
Next Token : let, Posbility: 0.0204
Next Token : in, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.1191
Next Token : 
, Posbility: 0.8789
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0089
Next Token : open, Posbility: 0.0101
Next Token : 

, Posbility: 0.0146
Next Token : (, Posbility: 0.1021
Next Token : let, Posbility: 0.7539
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  iter, Posbility: 0.0077
Next Token :  main, Posbility: 0.0127
Next Token :  , Posbility: 0.0569
Next Token :  count, Posbility: 0.0938
Next Token :  rec, Posbility: 0.7852
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0023
Next Token :  rec, Posbility: 0.0026
Next Token :  iter, Posbility: 0.0026
Next Token :  , Posbility: 0.0317
Next Token :  count, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : ing, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  =, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pairs, Posbility: 0.0005
Next Token : permutation, Posbility: 0.0007
Next Token : all, Posbility: 0.0013
Next Token : inv, Posbility: 0.0019
Next Token : in, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : vers, Posbility: 0.0000
Next Token : variants, Posbility: 0.0001
Next Token : version, Posbility: 0.0003
Next Token : versions, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0004
Next Token : ', Posbility: 0.0005
Next Token : 2, Posbility: 0.0036
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0106
Next Token : loop, Posbility: 0.0155
Next Token : rec, Posbility: 0.0476
Next Token : opt, Posbility: 0.1143
Next Token : iter, Posbility: 0.6602
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0010
Next Token : 3, Posbility: 0.0023
Next Token :  , Posbility: 0.0056
Next Token : 2, Posbility: 0.0366
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0056
Next Token : loop, Posbility: 0.0056
Next Token : iter, Posbility: 0.0175
Next Token : rec, Posbility: 0.0369
Next Token : opt, Posbility: 0.7422
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0010
Next Token : 3, Posbility: 0.0026
Next Token :  , Posbility: 0.0152
Next Token : 2, Posbility: 0.0364
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0067
Next Token : lazy, Posbility: 0.0076
Next Token : iter, Posbility: 0.0160
Next Token : rec, Posbility: 0.0635
Next Token : opt, Posbility: 0.6836
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0041
Next Token : 1, Posbility: 0.0067
Next Token :  , Posbility: 0.0266
Next Token : 2, Posbility: 0.1729
Next Token : _, Posbility: 0.7773
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0121
Next Token : 2, Posbility: 0.0226
Next Token : aux, Posbility: 0.0226
Next Token : rec, Posbility: 0.0542
Next Token : opt, Posbility: 0.4004
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0024
Next Token : 2, Posbility: 0.0031
Next Token : 
, Posbility: 0.0040
Next Token : _, Posbility: 0.0122
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : :, Posbility: 0.0002
Next Token : n, Posbility: 0.0002
Next Token : x, Posbility: 0.0005
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : n, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : a, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : :, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a :
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  string, Posbility: 0.0000
Next Token :  float, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : int, Posbility: 0.0001
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 0.0002
Next Token :  array, Posbility: 0.0003
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ):, Posbility: 0.0000
Next Token :  *), Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0013
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0002
Next Token : let, Posbility: 0.0003
Next Token :    , Posbility: 0.0004
Next Token :     , Posbility: 0.0028
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0002
Next Token : count, Posbility: 0.0004
Next Token : try, Posbility: 0.0004
Next Token : let, Posbility: 0.0046
Next Token : match, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  a, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  empty, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : end, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : xA, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  when, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :        , Posbility: 0.0001
Next Token :      , Posbility: 0.0002
Next Token :     , Posbility: 0.0005
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : try, Posbility: 0.0002
Next Token : match, Posbility: 0.0009
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  count, Posbility: 0.0001
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token : _, Posbility: 0.0007
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token : 
, Posbility: 0.0008
Next Token :  , Posbility: 0.0009
Next Token :  count, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : version, Posbility: 0.0000
Next Token : vers, Posbility: 0.0000
Next Token :  versions, Posbility: 0.0000
Next Token : variants, Posbility: 0.0000
Next Token : versions, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token : iterate, Posbility: 0.0000
Next Token : iterator, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : iter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ?, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  , Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : optimize, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : iter, Posbility: 0.0008
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0013
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : obj, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : obj, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  a, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  nn, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : rev, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : âˆ’, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : ~/, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2;, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  4, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 6, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 5, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :        , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : assert, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rev, Posbility: 0.0000
Next Token : inc, Posbility: 0.0000
Next Token : iv, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : +, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ev, Posbility: 0.0000
Next Token : Inv, Posbility: 0.0000
Next Token : iv, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0008
Next Token : , Posbility: 0.0009
Next Token :  in, Posbility: 0.0011
Next Token : 

, Posbility: 0.0598
Next Token : 
, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv

 score:False
Error type: noerr
---------------------------
Next Token : ```, Posbility: 0.0036
Next Token :   , Posbility: 0.0046
Next Token : (, Posbility: 0.0076
Next Token : let, Posbility: 0.0171
Next Token : in, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0002
Next Token : ;, Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.2012
Next Token : 
, Posbility: 0.7969
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0095
Next Token : open, Posbility: 0.0148
Next Token : module, Posbility: 0.0157
Next Token : (, Posbility: 0.1318
Next Token : let, Posbility: 0.7109
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let
 score:False
Error type: noerr
---------------------------
Next Token :  iter, Posbility: 0.0087
Next Token :  main, Posbility: 0.0111
Next Token :  , Posbility: 0.0564
Next Token :  count, Posbility: 0.1055
Next Token :  rec, Posbility: 0.7773
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  test, Posbility: 0.0023
Next Token :  iter, Posbility: 0.0023
Next Token :  loop, Posbility: 0.0023
Next Token :  , Posbility: 0.0317
Next Token :  count, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : ing, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_
 score:False
Error type: noerr
---------------------------
Next Token : versions, Posbility: 0.0005
Next Token : iter, Posbility: 0.0009
Next Token : all, Posbility: 0.0013
Next Token : inv, Posbility: 0.0031
Next Token : in, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_in
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : vers, Posbility: 0.0001
Next Token : variants, Posbility: 0.0002
Next Token : version, Posbility: 0.0004
Next Token : versions, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : _2_, Posbility: 0.0004
Next Token : 2, Posbility: 0.0028
Next Token :  , Posbility: 0.0046
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0057
Next Token : loop, Posbility: 0.0095
Next Token : rec, Posbility: 0.0374
Next Token : opt, Posbility: 0.0791
Next Token : iter, Posbility: 0.7500
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0007
Next Token : 3, Posbility: 0.0016
Next Token :  , Posbility: 0.0057
Next Token : 2, Posbility: 0.0200
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0038
Next Token : loop, Posbility: 0.0043
Next Token : iter, Posbility: 0.0250
Next Token : rec, Posbility: 0.0320
Next Token : opt, Posbility: 0.8281
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token : 4, Posbility: 0.0003
Next Token : 3, Posbility: 0.0008
Next Token : 2, Posbility: 0.0059
Next Token :  , Posbility: 0.0075
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0014
Next Token : seq, Posbility: 0.0016
Next Token : iter, Posbility: 0.0103
Next Token : rec, Posbility: 0.0150
Next Token : opt, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 3, Posbility: 0.0002
Next Token : _2_, Posbility: 0.0002
Next Token : 2, Posbility: 0.0028
Next Token :  , Posbility: 0.0140
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0008
Next Token : seq, Posbility: 0.0009
Next Token : iter, Posbility: 0.0031
Next Token : rec, Posbility: 0.0035
Next Token : opt, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 3, Posbility: 0.0008
Next Token : 1, Posbility: 0.0013
Next Token : 2, Posbility: 0.0250
Next Token :  , Posbility: 0.0284
Next Token : _, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0028
Next Token : aux, Posbility: 0.0032
Next Token : iter, Posbility: 0.0047
Next Token : rec, Posbility: 0.0127
Next Token : opt, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0004
Next Token :  =, Posbility: 0.0005
Next Token : 
, Posbility: 0.0015
Next Token : _, Posbility: 0.0096
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : (), Posbility: 0.0001
Next Token : :, Posbility: 0.0002
Next Token : x, Posbility: 0.0003
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  a, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : a, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : :, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a 
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : :, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a :
 score:False
Error type: noerr
---------------------------
Next Token :  float, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : int, Posbility: 0.0001
Next Token :  int, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  array, Posbility: 0.0001
Next Token : ), Posbility: 0.0001
Next Token :  list, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list
 score:False
Error type: noerr
---------------------------
Next Token : ):, Posbility: 0.0000
Next Token :  *), Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list)
 score:False
Error type: noerr
---------------------------
Next Token : =, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  match, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :    , Posbility: 0.0003
Next Token :     , Posbility: 0.0013
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : try, Posbility: 0.0001
Next Token : count, Posbility: 0.0001
Next Token : let, Posbility: 0.0017
Next Token : match, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  a, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  WITH, Posbility: 0.0000
Next Token :  avec, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with

 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  |
 score:False
Error type: noerr
---------------------------
Next Token : [], Posbility: 0.0000
Next Token :  0, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | []
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] 
 score:False
Error type: noerr
---------------------------
Next Token : return, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] ->
 score:False
Error type: noerr
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  0, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token : end, Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  |
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | 
 score:False
Error type: noerr
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x 
 score:False
Error type: noerr
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : ::{, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x ::
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: 
 score:False
Error type: noerr
---------------------------
Next Token : xA, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  match, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :        , Posbility: 0.0001
Next Token :      , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : try, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : match, Posbility: 0.0002
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let
 score:False
Error type: noerr
---------------------------
Next Token :  v, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  rec, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let 
 score:False
Error type: noerr
---------------------------
Next Token : m, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n =
 score:False
Error type: noerr
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 0.0012
Next Token :  count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count
 score:False
Error type: noerr
---------------------------
Next Token :  of, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_in
 score:False
Error type: noerr
---------------------------
Next Token : version, Posbility: 0.0000
Next Token : vers, Posbility: 0.0000
Next Token :  versions, Posbility: 0.0000
Next Token : variants, Posbility: 0.0000
Next Token : versions, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  iter, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_
 score:False
Error type: noerr
---------------------------
Next Token : int, Posbility: 0.0000
Next Token : iterate, Posbility: 0.0000
Next Token : iterator, Posbility: 0.0000
Next Token : opt, Posbility: 0.0000
Next Token : iter, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : ?, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : iter, Posbility: 0.0003
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : option, Posbility: 0.0000
Next Token : iter, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : ot, Posbility: 0.0000
Next Token : obj, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0000
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :  ?, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  a, Posbility: 0.0000
Next Token :  , Posbility: 0.0052
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : obj, Posbility: 0.0000
Next Token : ot, Posbility: 0.0000
Next Token : optional, Posbility: 0.0000
Next Token : op, Posbility: 0.0001
Next Token : opt, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  a, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : xa, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : let, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token :  nn, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_
 score:False
Error type: noerr
---------------------------
Next Token : opt, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : rev, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv =
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = 
 score:False
Error type: noerr
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n 
 score:False
Error type: noerr
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : âˆ’, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n -
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n 
 score:False
Error type: noerr
---------------------------
Next Token : ~/, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : //, Posbility: 0.0000
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n /
 score:False
Error type: noerr
---------------------------
Next Token :  2;, Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token :  4, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 6, Posbility: 0.0000
Next Token : 5, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in

 score:False
Error type: noerr
---------------------------
Next Token :        , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :         , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      
 score:False
Error type: noerr
---------------------------
Next Token : assert, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_
 score:False
Error type: noerr
---------------------------
Next Token : inst, Posbility: 0.0000
Next Token : rev, Posbility: 0.0000
Next Token : iv, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv
 score:False
Error type: noerr
---------------------------
Next Token : +, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  +, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv +
 score:False
Error type: noerr
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_
 score:False
Error type: noerr
---------------------------
Next Token : ev, Posbility: 0.0000
Next Token : Inv, Posbility: 0.0000
Next Token : iv, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0005
Next Token : , Posbility: 0.0008
Next Token :  in, Posbility: 0.0009
Next Token : 

, Posbility: 0.0471
Next Token : 
, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv

 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0027
Next Token : module, Posbility: 0.0028
Next Token : (, Posbility: 0.0056
Next Token : let, Posbility: 0.0195
Next Token : in, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0002
Next Token : , Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.2012
Next Token : 
, Posbility: 0.7969
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in

 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0081
Next Token : open, Posbility: 0.0104
Next Token : module, Posbility: 0.0250
Next Token : (, Posbility: 0.1123
Next Token : let, Posbility: 0.7344
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let
 score:False
Error type: noerr
---------------------------
Next Token :  test, Posbility: 0.0068
Next Token :  iter, Posbility: 0.0077
Next Token :  , Posbility: 0.0569
Next Token :  count, Posbility: 0.1064
Next Token :  rec, Posbility: 0.7852
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec
 score:False
Error type: noerr
---------------------------
Next Token :  loop, Posbility: 0.0016
Next Token :  test, Posbility: 0.0018
Next Token :  rec, Posbility: 0.0021
Next Token :  , Posbility: 0.0251
Next Token :  count, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count
 score:False
Error type: noerr
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : ing, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_
 score:False
Error type: noerr
---------------------------
Next Token : iter, Posbility: 0.0004
Next Token : permutation, Posbility: 0.0005
Next Token : all, Posbility: 0.0009
Next Token : inv, Posbility: 0.0012
Next Token : in, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_in
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : vers, Posbility: 0.0001
Next Token : variants, Posbility: 0.0002
Next Token : version, Posbility: 0.0002
Next Token : versions, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0002
Next Token : _2_, Posbility: 0.0003
Next Token : 2, Posbility: 0.0017
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0044
Next Token : loop, Posbility: 0.0063
Next Token : rec, Posbility: 0.0283
Next Token : opt, Posbility: 0.0530
Next Token : iter, Posbility: 0.8281
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0004
Next Token : 3, Posbility: 0.0009
Next Token :  , Posbility: 0.0045
Next Token : 2, Posbility: 0.0096
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_
 score:False
Error type: noerr
---------------------------
Next Token : list, Posbility: 0.0022
Next Token : loop, Posbility: 0.0025
Next Token : iter, Posbility: 0.0209
Next Token : rec, Posbility: 0.0236
Next Token : opt, Posbility: 0.8867
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : 3, Posbility: 0.0002
Next Token : 2, Posbility: 0.0015
Next Token :  , Posbility: 0.0067
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0004
Next Token : seq, Posbility: 0.0005
Next Token : rec, Posbility: 0.0019
Next Token : iter, Posbility: 0.0052
Next Token : opt, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : _2_, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : seq, Posbility: 0.0002
Next Token : op, Posbility: 0.0002
Next Token : optional, Posbility: 0.0002
Next Token : iter, Posbility: 0.0004
Next Token : opt, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : _2_, Posbility: 0.0001
Next Token : 2, Posbility: 0.0006
Next Token :  , Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0002
Next Token : optional, Posbility: 0.0002
Next Token : op, Posbility: 0.0003
Next Token : iter, Posbility: 0.0006
Next Token : opt, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token : 2, Posbility: 0.0034
Next Token :  , Posbility: 0.0471
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt_
 score:False
Error type: noerr
---------------------------
Next Token : op, Posbility: 0.0005
Next Token : int, Posbility: 0.0006
Next Token : rec, Posbility: 0.0009
Next Token : iter, Posbility: 0.0019
Next Token : opt, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt_opt
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : 2, Posbility: 0.0003
Next Token : 
, Posbility: 0.0014
Next Token : _, Posbility: 0.0330
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt_opt 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (), Posbility: 0.0001
Next Token : :, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count inversions in an array. *)
let rec count_inversions (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt (a : int list) =
  match a with
  | [] -> 0
  | x :: xs ->
      let n = count_inversions_iter_opt_opt_opt_opt xs in
      let n_inv = n - n / 2 in
      n_inv + n_inv
in
let rec count_inversions_iter_opt_opt_opt_opt_opt (
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>