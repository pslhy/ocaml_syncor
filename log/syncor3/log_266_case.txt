code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0215
Next Token :  even, Posbility: 0.0243
Next Token :  count, Posbility: 0.1797
Next Token :  rec, Posbility: 0.2305
Next Token :  , Posbility: 0.3809
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0182
Next Token : f, Posbility: 0.0339
Next Token : pairs, Posbility: 0.1514
Next Token : odd, Posbility: 0.2832
Next Token : x, Posbility: 0.2832
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0070
Next Token : ors, Posbility: 0.0070
Next Token : _, Posbility: 0.0102
Next Token :  =, Posbility: 0.0216
Next Token : or, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0092
Next Token : count, Posbility: 0.0194
Next Token :  =, Posbility: 0.0679
Next Token :  , Posbility: 0.0771
Next Token : _, Posbility: 0.7305
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0231
Next Token : pair, Posbility: 0.0297
Next Token : pairs, Posbility: 0.1172
Next Token : odd, Posbility: 0.2188
Next Token : count, Posbility: 0.3613
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0161
Next Token : (, Posbility: 0.0206
Next Token : _, Posbility: 0.1187
Next Token :  =, Posbility: 0.3223
Next Token :  , Posbility: 0.4141
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0403
Next Token : p, Posbility: 0.0518
Next Token : (, Posbility: 0.0664
Next Token : n, Posbility: 0.0967
Next Token : x, Posbility: 0.5547
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0064
Next Token : or, Posbility: 0.0064
Next Token :  , Posbility: 0.2129
Next Token :  =, Posbility: 0.2734
Next Token : s, Posbility: 0.4492
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0010
Next Token :   , Posbility: 0.0011
Next Token :  a, Posbility: 0.0013
Next Token :  , Posbility: 0.0369
Next Token :  =, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0020
Next Token :  ..., Posbility: 0.0026
Next Token :  match, Posbility: 0.0092
Next Token :  , Posbility: 0.1426
Next Token : 
, Posbility: 0.8203
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0052
Next Token : 	, Posbility: 0.0058
Next Token :    , Posbility: 0.0109
Next Token :     , Posbility: 0.1035
Next Token :   , Posbility: 0.8633
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0150
Next Token : x, Posbility: 0.0247
Next Token : match, Posbility: 0.0591
Next Token : List, Posbility: 0.1104
Next Token : let, Posbility: 0.7188
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0248
Next Token :  open, Posbility: 0.0593
Next Token :  count, Posbility: 0.0674
Next Token :  rec, Posbility: 0.2656
Next Token :  , Posbility: 0.3418
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0342
Next Token : y, Posbility: 0.0388
Next Token : pairs, Posbility: 0.1055
Next Token : odd, Posbility: 0.1533
Next Token : x, Posbility: 0.2871
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ors, Posbility: 0.0282
Next Token : _, Posbility: 0.0466
Next Token :  =, Posbility: 0.1118
Next Token : or, Posbility: 0.3027
Next Token : s, Posbility: 0.3906
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0300
Next Token : 2, Posbility: 0.0635
Next Token : ', Posbility: 0.0923
Next Token : _, Posbility: 0.3223
Next Token :  =, Posbility: 0.4141
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0060
Next Token :  Vec, Posbility: 0.0060
Next Token : 
, Posbility: 0.0164
Next Token :  [, Posbility: 0.0271
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Set, Posbility: 0.0120
Next Token : Seq, Posbility: 0.0325
Next Token : Array, Posbility: 0.0608
Next Token : x, Posbility: 0.2402
Next Token : List, Posbility: 0.5781
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Helpers, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : (, Posbility: 0.0006
Next Token : _, Posbility: 0.0010
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0342
Next Token : sort, Posbility: 0.0820
Next Token : map, Posbility: 0.2236
Next Token : rev, Posbility: 0.2539
Next Token : filter, Posbility: 0.2871
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0077
Next Token :  ((, Posbility: 0.0077
Next Token :  ~, Posbility: 0.0099
Next Token : _, Posbility: 0.0645
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : #, Posbility: 0.0025
Next Token : odd, Posbility: 0.0025
Next Token : f, Posbility: 0.0036
Next Token : x, Posbility: 0.1045
Next Token : (, Posbility: 0.8750
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : not, Posbility: 0.0135
Next Token : fn, Posbility: 0.0197
Next Token : x, Posbility: 0.0223
Next Token : function, Posbility: 0.0253
Next Token : fun, Posbility: 0.8359
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0048
Next Token :  i, Posbility: 0.0131
Next Token :  a, Posbility: 0.0167
Next Token :  v, Posbility: 0.0354
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0099
Next Token : y, Posbility: 0.0099
Next Token : _, Posbility: 0.0164
Next Token : (, Posbility: 0.0444
Next Token : x, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0006
Next Token : _, Posbility: 0.0009
Next Token : i, Posbility: 0.0010
Next Token :  i, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0060
Next Token :  O, Posbility: 0.0099
Next Token :  not, Posbility: 0.0269
Next Token :  !, Posbility: 0.0269
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Mod, Posbility: 0.0095
Next Token : Bit, Posbility: 0.0108
Next Token : Int, Posbility: 0.0378
Next Token : (, Posbility: 0.2178
Next Token : x, Posbility: 0.6680
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0337
Next Token :  mod, Posbility: 0.0713
Next Token :  !=, Posbility: 0.1328
Next Token :  %, Posbility: 0.1328
Next Token :  , Posbility: 0.5273
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0200
Next Token : >, Posbility: 0.1895
Next Token : ^, Posbility: 0.1895
Next Token : %%, Posbility: 0.2148
Next Token : <, Posbility: 0.3125
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0), Posbility: 0.0054
Next Token :  100), Posbility: 0.0062
Next Token :  10), Posbility: 0.0062
Next Token :  , Posbility: 0.0354
Next Token : >, Posbility: 0.9141
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <>
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0065
Next Token :  0, Posbility: 0.0293
Next Token :  1), Posbility: 0.0293
Next Token :  , Posbility: 0.1318
Next Token :  0), Posbility: 0.7578
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0002
Next Token :  0, Posbility: 0.0003
Next Token :   , Posbility: 0.0005
Next Token :  ~, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : Int, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ors, Posbility: 0.0001
Next Token :  in, Posbility: 0.0004
Next Token : or, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0006
Next Token :   , Posbility: 0.0033
Next Token :  , Posbility: 0.0043
Next Token : 
, Posbility: 0.0593
Next Token :  in, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0002
Next Token :   , Posbility: 0.0031
Next Token :  , Posbility: 0.0074
Next Token : 

, Posbility: 0.0157
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0003
Next Token :       , Posbility: 0.0004
Next Token :  , Posbility: 0.0008
Next Token :     , Posbility: 0.0019
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0223
Next Token : x, Posbility: 0.0253
Next Token : match, Posbility: 0.0471
Next Token : List, Posbility: 0.2119
Next Token : let, Posbility: 0.6523
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pair, Posbility: 0.0223
Next Token :  acc, Posbility: 0.0369
Next Token :  count, Posbility: 0.0781
Next Token :  rec, Posbility: 0.1650
Next Token :  , Posbility: 0.4492
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0398
Next Token : y, Posbility: 0.0513
Next Token : pairs, Posbility: 0.1084
Next Token : odd, Posbility: 0.1582
Next Token : x, Posbility: 0.3340
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ors, Posbility: 0.0398
Next Token : _, Posbility: 0.0510
Next Token :  =, Posbility: 0.0654
Next Token : or, Posbility: 0.1387
Next Token : s, Posbility: 0.6211
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0280
Next Token : ', Posbility: 0.0280
Next Token : 2, Posbility: 0.0359
Next Token : _, Posbility: 0.1250
Next Token :  =, Posbility: 0.7188
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  A, Posbility: 0.0009
Next Token :  String, Posbility: 0.0038
Next Token :  [, Posbility: 0.0038
Next Token : 
, Posbility: 0.0464
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0043
Next Token : Seq, Posbility: 0.0043
Next Token : (, Posbility: 0.0048
Next Token : x, Posbility: 0.0405
Next Token : List, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sort, Posbility: 0.0342
Next Token : rev, Posbility: 0.0640
Next Token : fold, Posbility: 0.0820
Next Token : filter, Posbility: 0.1738
Next Token : map, Posbility: 0.4727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0070
Next Token : i, Posbility: 0.0090
Next Token :  ((, Posbility: 0.0090
Next Token :  ~, Posbility: 0.0103
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0025
Next Token : Int, Posbility: 0.0029
Next Token : f, Posbility: 0.0101
Next Token : x, Posbility: 0.0579
Next Token : (, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : fn, Posbility: 0.0015
Next Token : x, Posbility: 0.0019
Next Token : f, Posbility: 0.0019
Next Token : function, Posbility: 0.0066
Next Token : fun, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0007
Next Token :  a, Posbility: 0.0019
Next Token :  v, Posbility: 0.0051
Next Token :  i, Posbility: 0.0109
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : c, Posbility: 0.0009
Next Token : y, Posbility: 0.0024
Next Token : _, Posbility: 0.0066
Next Token : (, Posbility: 0.0066
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0003
Next Token :  =>, Posbility: 0.0003
Next Token : 1, Posbility: 0.0003
Next Token : s, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0156
Next Token :  !, Posbility: 0.0156
Next Token :  ((, Posbility: 0.0156
Next Token :  ~, Posbility: 0.0422
Next Token :  , Posbility: 0.8516
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0118
Next Token : Int, Posbility: 0.0118
Next Token : if, Posbility: 0.0250
Next Token : (, Posbility: 0.1631
Next Token : x, Posbility: 0.7305
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  &, Posbility: 0.0204
Next Token :  |, Posbility: 0.0231
Next Token :  *, Posbility: 0.0913
Next Token :  +, Posbility: 0.0913
Next Token :  , Posbility: 0.6758
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : :, Posbility: 0.0033
Next Token : -, Posbility: 0.0079
Next Token : ::, Posbility: 0.0310
Next Token : x, Posbility: 0.0398
Next Token : ^, Posbility: 0.9062
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0151
Next Token :  0), Posbility: 0.0194
Next Token :  0, Posbility: 0.0220
Next Token :  1), Posbility: 0.4414
Next Token :  , Posbility: 0.4414
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 42, Posbility: 0.0051
Next Token : 2, Posbility: 0.0058
Next Token : 7, Posbility: 0.0095
Next Token : (, Posbility: 0.0796
Next Token : x, Posbility: 0.8594
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : or, Posbility: 0.0030
Next Token : s, Posbility: 0.0071
Next Token :  , Posbility: 0.0219
Next Token :  +, Posbility: 0.0219
Next Token : ), Posbility: 0.9297
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0003
Next Token :   , Posbility: 0.0012
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 0.0052
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0002
Next Token :   , Posbility: 0.0021
Next Token :  , Posbility: 0.0058
Next Token : 

, Posbility: 0.0109
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0002
Next Token :       , Posbility: 0.0003
Next Token :     , Posbility: 0.0006
Next Token :  , Posbility: 0.0007
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0134
Next Token : match, Posbility: 0.0249
Next Token : x, Posbility: 0.0410
Next Token : List, Posbility: 0.3906
Next Token : let, Posbility: 0.5000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pair, Posbility: 0.0151
Next Token :  acc, Posbility: 0.0320
Next Token :  count, Posbility: 0.0679
Next Token :  rec, Posbility: 0.0679
Next Token :  , Posbility: 0.6445
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0254
Next Token : (, Posbility: 0.0287
Next Token : odd, Posbility: 0.0608
Next Token : pairs, Posbility: 0.0781
Next Token : x, Posbility: 0.5781
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ors, Posbility: 0.0078
Next Token : _, Posbility: 0.0128
Next Token :  =, Posbility: 0.0165
Next Token : or, Posbility: 0.0447
Next Token : s, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0038
Next Token : ,, Posbility: 0.0063
Next Token : 2, Posbility: 0.0063
Next Token : _, Posbility: 0.0364
Next Token :  =, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0003
Next Token :  String, Posbility: 0.0007
Next Token :  [, Posbility: 0.0015
Next Token : 
, Posbility: 0.0109
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Set, Posbility: 0.0016
Next Token : Array, Posbility: 0.0019
Next Token : (, Posbility: 0.0027
Next Token : x, Posbility: 0.0177
Next Token : List, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : Util, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : partition, Posbility: 0.0312
Next Token : count, Posbility: 0.0583
Next Token : fold, Posbility: 0.0850
Next Token : map, Posbility: 0.1089
Next Token : filter, Posbility: 0.4883
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  not, Posbility: 0.0014
Next Token :  ~, Posbility: 0.0020
Next Token :  ((, Posbility: 0.0037
Next Token : _, Posbility: 0.0747
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0007
Next Token : List, Posbility: 0.0009
Next Token : odd, Posbility: 0.0015
Next Token : x, Posbility: 0.0067
Next Token : (, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0003
Next Token : fn, Posbility: 0.0005
Next Token : function, Posbility: 0.0017
Next Token : not, Posbility: 0.0025
Next Token : fun, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0024
Next Token :  pair, Posbility: 0.0031
Next Token :  v, Posbility: 0.0031
Next Token :  i, Posbility: 0.0052
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0063
Next Token : y, Posbility: 0.0063
Next Token : _, Posbility: 0.0173
Next Token : (, Posbility: 0.0173
Next Token : x, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0004
Next Token : 1, Posbility: 0.0005
Next Token : x, Posbility: 0.0010
Next Token : s, Posbility: 0.0036
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : y, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  int, Posbility: 0.0024
Next Token :  !, Posbility: 0.0024
Next Token :  mod, Posbility: 0.0040
Next Token :  not, Posbility: 0.0065
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Mod, Posbility: 0.0045
Next Token : List, Posbility: 0.0096
Next Token : Int, Posbility: 0.0123
Next Token : (, Posbility: 0.0908
Next Token : x, Posbility: 0.8633
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  !=, Posbility: 0.0520
Next Token :  &, Posbility: 0.0669
Next Token :  mod, Posbility: 0.1816
Next Token :  %, Posbility: 0.2334
Next Token :  , Posbility: 0.3848
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ^, Posbility: 0.0091
Next Token : rem, Posbility: 0.0408
Next Token : %%, Posbility: 0.0674
Next Token : >, Posbility: 0.3008
Next Token : <, Posbility: 0.5625
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1), Posbility: 0.0015
Next Token :  2), Posbility: 0.0015
Next Token :  , Posbility: 0.0045
Next Token :  0), Posbility: 0.0075
Next Token : >, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <>
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2), Posbility: 0.0023
Next Token :  0, Posbility: 0.0172
Next Token :  , Posbility: 0.0172
Next Token :  1), Posbility: 0.0172
Next Token :  0), Posbility: 0.9375
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  ~, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0007
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : vs, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : or, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0002
Next Token :   , Posbility: 0.0004
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 0.0012
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0002
Next Token :   , Posbility: 0.0010
Next Token :  , Posbility: 0.0051
Next Token : 

, Posbility: 0.0140
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token : let, Posbility: 0.0005
Next Token :  , Posbility: 0.0012
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0140
Next Token : match, Posbility: 0.0231
Next Token : x, Posbility: 0.0554
Next Token : let, Posbility: 0.4102
Next Token : List, Posbility: 0.4648
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0033
Next Token : filter, Posbility: 0.0150
Next Token : fold, Posbility: 0.0405
Next Token : count, Posbility: 0.1104
Next Token : length, Posbility: 0.8164
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0024
Next Token : 
, Posbility: 0.0035
Next Token : _, Posbility: 0.0035
Next Token :  ((, Posbility: 0.0075
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length 
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : @@, Posbility: 0.0005
Next Token : List, Posbility: 0.0090
Next Token : (, Posbility: 0.4941
Next Token : x, Posbility: 0.4941
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length x
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : ors, Posbility: 0.0001
Next Token : or, Posbility: 0.0022
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0082
Next Token :  *, Posbility: 0.0136
Next Token :  , Posbility: 0.0369
Next Token : 

, Posbility: 0.3984
Next Token : 
, Posbility: 0.5117
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs

 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0148
Next Token : ;, Posbility: 0.0322
Next Token :   , Posbility: 0.0366
Next Token : 

, Posbility: 0.0623
Next Token : let, Posbility: 0.0850
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  pair, Posbility: 0.0209
Next Token :  test, Posbility: 0.0391
Next Token :  count, Posbility: 0.0442
Next Token :  main, Posbility: 0.3262
Next Token :  , Posbility: 0.4199
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : odd, Posbility: 0.0137
Next Token : _, Posbility: 0.0540
Next Token : pairs, Posbility: 0.0540
Next Token : (), Posbility: 0.3105
Next Token : x, Posbility: 0.3984
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0048
Next Token :  =, Posbility: 0.0130
Next Token : ors, Posbility: 0.0147
Next Token : s, Posbility: 0.0400
Next Token : or, Posbility: 0.9102
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0010
Next Token : 1, Posbility: 0.0010
Next Token :  =, Posbility: 0.0074
Next Token :  , Posbility: 0.0095
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0125
Next Token : test, Posbility: 0.0141
Next Token : pair, Posbility: 0.0141
Next Token : pairs, Posbility: 0.0232
Next Token : count, Posbility: 0.7695
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0461
Next Token :  =, Posbility: 0.0522
Next Token :  , Posbility: 0.0864
Next Token : 2, Posbility: 0.0977
Next Token : _, Posbility: 0.6367
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ex, Posbility: 0.0356
Next Token : opt, Posbility: 0.0403
Next Token : list, Posbility: 0.0457
Next Token : 2, Posbility: 0.0586
Next Token : test, Posbility: 0.0967
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0082
Next Token : er, Posbility: 0.0135
Next Token : _, Posbility: 0.0471
Next Token :  =, Posbility: 0.3477
Next Token :  , Posbility: 0.5039
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0085
Next Token : (, Posbility: 0.0096
Next Token : n, Posbility: 0.0552
Next Token : x, Posbility: 0.2793
Next Token : (), Posbility: 0.5938
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test ()
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0002
Next Token :   , Posbility: 0.0007
Next Token : 
, Posbility: 0.0019
Next Token :  , Posbility: 0.0041
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0026
Next Token :  test, Posbility: 0.0030
Next Token :  (*, Posbility: 0.0038
Next Token :  , Posbility: 0.2373
Next Token : 
, Posbility: 0.7305
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0018
Next Token :    , Posbility: 0.0053
Next Token : let, Posbility: 0.0347
Next Token :     , Posbility: 0.0505
Next Token :   , Posbility: 0.8945
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Format, Posbility: 0.0175
Next Token : print, Posbility: 0.0254
Next Token : Printf, Posbility: 0.0537
Next Token : assert, Posbility: 0.3086
Next Token : let, Posbility: 0.4492
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0161
Next Token :  rec, Posbility: 0.0182
Next Token :  test, Posbility: 0.0206
Next Token :  expected, Posbility: 0.0339
Next Token :  , Posbility: 0.6836
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : t, Posbility: 0.0159
Next Token : n, Posbility: 0.0262
Next Token : odd, Posbility: 0.0298
Next Token : pairs, Posbility: 0.0381
Next Token : x, Posbility: 0.7656
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0060
Next Token : ors, Posbility: 0.0099
Next Token : or, Posbility: 0.0269
Next Token :  =, Posbility: 0.0566
Next Token : s, Posbility: 0.8867
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0011
Next Token : 0, Posbility: 0.0045
Next Token : _, Posbility: 0.0058
Next Token : 1, Posbility: 0.0096
Next Token :  =, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0527
Next Token :  [1,, Posbility: 0.0527
Next Token :  [0,, Posbility: 0.0527
Next Token :  , Posbility: 0.3887
Next Token :  [, Posbility: 0.3887
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0540
Next Token :  0;, Posbility: 0.0540
Next Token :  , Posbility: 0.1006
Next Token : |, Posbility: 0.1465
Next Token : 1, Posbility: 0.1660
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : u, Posbility: 0.0044
Next Token :  2;, Posbility: 0.0056
Next Token :  |, Posbility: 0.0120
Next Token :  , Posbility: 0.1001
Next Token : ;, Posbility: 0.8398
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0;, Posbility: 0.0649
Next Token : 2, Posbility: 0.0942
Next Token :  , Posbility: 0.0942
Next Token :  3;, Posbility: 0.0942
Next Token :  2;, Posbility: 0.4785
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0;, Posbility: 0.0138
Next Token :  1;, Posbility: 0.0138
Next Token :  4;, Posbility: 0.0618
Next Token :  , Posbility: 0.1021
Next Token :  3;, Posbility: 0.7539
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  4, Posbility: 0.0144
Next Token :  0;, Posbility: 0.0144
Next Token :  5;, Posbility: 0.0391
Next Token :  , Posbility: 0.1064
Next Token :  4;, Posbility: 0.7852
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  2;, Posbility: 0.0024
Next Token :  3;, Posbility: 0.0031
Next Token :  0;, Posbility: 0.0064
Next Token :  , Posbility: 0.2139
Next Token :  5;, Posbility: 0.7461
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  1;, Posbility: 0.0030
Next Token :  10;, Posbility: 0.0050
Next Token :  8;, Posbility: 0.0064
Next Token :  0;, Posbility: 0.0082
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 5, Posbility: 0.0026
Next Token : 16, Posbility: 0.0030
Next Token : 9, Posbility: 0.0063
Next Token : 7, Posbility: 0.0408
Next Token : 6, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0005
Next Token : ];, Posbility: 0.0022
Next Token :  , Posbility: 0.0024
Next Token : ], Posbility: 0.3184
Next Token : ;, Posbility: 0.6758
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  10;, Posbility: 0.0013
Next Token :  8;, Posbility: 0.0017
Next Token :  0;, Posbility: 0.0021
Next Token : ], Posbility: 0.0027
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 42, Posbility: 0.0005
Next Token : 8, Posbility: 0.0013
Next Token : 9, Posbility: 0.0028
Next Token : 6, Posbility: 0.0036
Next Token : 7, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0001
Next Token : ];, Posbility: 0.0006
Next Token :  , Posbility: 0.0022
Next Token : ], Posbility: 0.1064
Next Token : ;, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 8, Posbility: 0.0023
Next Token :  0;, Posbility: 0.0037
Next Token :  10;, Posbility: 0.0037
Next Token :  , Posbility: 0.2617
Next Token :  8;, Posbility: 0.7109
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  11, Posbility: 0.0006
Next Token :  10, Posbility: 0.0008
Next Token :  0;, Posbility: 0.0009
Next Token :  10;, Posbility: 0.0028
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 8, Posbility: 0.0004
Next Token : 16, Posbility: 0.0004
Next Token : 99, Posbility: 0.0004
Next Token : 7, Posbility: 0.0005
Next Token : 9, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ]., Posbility: 0.0003
Next Token : ];, Posbility: 0.0008
Next Token :  , Posbility: 0.0018
Next Token : ], Posbility: 0.4355
Next Token : ;, Posbility: 0.5586
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  12, Posbility: 0.0090
Next Token :  0;, Posbility: 0.0192
Next Token :  , Posbility: 0.0405
Next Token :  10, Posbility: 0.2334
Next Token :  10;, Posbility: 0.6328
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ], Posbility: 0.0030
Next Token :  20, Posbility: 0.0044
Next Token :  12, Posbility: 0.0072
Next Token :  , Posbility: 0.0221
Next Token :  11, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0002
Next Token : ];, Posbility: 0.0008
Next Token :  , Posbility: 0.0023
Next Token : ], Posbility: 0.2676
Next Token : ;, Posbility: 0.7266
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ], Posbility: 0.0015
Next Token : 12, Posbility: 0.0015
Next Token :  13, Posbility: 0.0015
Next Token :  , Posbility: 0.0052
Next Token :  12, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0003
Next Token : ];, Posbility: 0.0009
Next Token :  , Posbility: 0.0019
Next Token : ], Posbility: 0.2217
Next Token : ;, Posbility: 0.7734
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 13, Posbility: 0.0019
Next Token : ], Posbility: 0.0035
Next Token :  14, Posbility: 0.0035
Next Token :  , Posbility: 0.0137
Next Token :  13, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : ];, Posbility: 0.0002
Next Token :  , Posbility: 0.0016
Next Token : ], Posbility: 0.0598
Next Token : ;, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 14, Posbility: 0.0009
Next Token :  13, Posbility: 0.0012
Next Token :  15, Posbility: 0.0013
Next Token :  , Posbility: 0.0036
Next Token :  14, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : ];, Posbility: 0.0004
Next Token :  , Posbility: 0.0008
Next Token : ], Posbility: 0.0952
Next Token : ;, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token : ], Posbility: 0.0005
Next Token : 15, Posbility: 0.0015
Next Token :  , Posbility: 0.0041
Next Token :  15, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token : ];, Posbility: 0.0008
Next Token :  , Posbility: 0.0016
Next Token : ], Posbility: 0.2676
Next Token : ;, Posbility: 0.7266
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 16, Posbility: 0.0010
Next Token : ], Posbility: 0.0024
Next Token : 
, Posbility: 0.0028
Next Token :  17, Posbility: 0.0046
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 42, Posbility: 0.0001
Next Token : ], Posbility: 0.0001
Next Token : 36, Posbility: 0.0001
Next Token : 6, Posbility: 0.0001
Next Token : 16, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0006
Next Token : 
, Posbility: 0.0012
Next Token :  , Posbility: 0.0015
Next Token : ], Posbility: 0.2012
Next Token : ;, Posbility: 0.7930
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 17, Posbility: 0.0013
Next Token : ], Posbility: 0.0040
Next Token : 
, Posbility: 0.0066
Next Token :  , Posbility: 0.0084
Next Token :  17, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0002
Next Token : 
, Posbility: 0.0008
Next Token :  , Posbility: 0.0011
Next Token : ], Posbility: 0.0757
Next Token : ;, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 18, Posbility: 0.0012
Next Token :  19, Posbility: 0.0012
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 0.0031
Next Token :  18, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0002
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 0.0011
Next Token : ], Posbility: 0.0674
Next Token : ;, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 19, Posbility: 0.0008
Next Token :  , Posbility: 0.0015
Next Token :  20, Posbility: 0.0022
Next Token : 
, Posbility: 0.0067
Next Token :  19, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0007
Next Token : 
, Posbility: 0.0010
Next Token :  , Posbility: 0.0013
Next Token : ], Posbility: 0.2441
Next Token : ;, Posbility: 0.7500
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ], Posbility: 0.0008
Next Token :  , Posbility: 0.0009
Next Token :  21, Posbility: 0.0010
Next Token : 
, Posbility: 0.0085
Next Token :  20, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0009
Next Token : 
, Posbility: 0.0015
Next Token :  , Posbility: 0.0022
Next Token : ], Posbility: 0.4648
Next Token : ;, Posbility: 0.5273
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  22, Posbility: 0.0013
Next Token :  , Posbility: 0.0045
Next Token : ], Posbility: 0.0065
Next Token : 
, Posbility: 0.0199
Next Token :  21, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0003
Next Token :  , Posbility: 0.0014
Next Token : 
, Posbility: 0.0021
Next Token : ], Posbility: 0.1475
Next Token : ;, Posbility: 0.8477
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  21, Posbility: 0.0019
Next Token :  , Posbility: 0.0035
Next Token :  23, Posbility: 0.0035
Next Token : 
, Posbility: 0.0085
Next Token :  22, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0006
Next Token : 
, Posbility: 0.0012
Next Token :  , Posbility: 0.0014
Next Token : ], Posbility: 0.0850
Next Token : ;, Posbility: 0.9102
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0007
Next Token :  24, Posbility: 0.0012
Next Token : 
, Posbility: 0.0066
Next Token :  , Posbility: 0.0066
Next Token :  23, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 0.0014
Next Token : ], Posbility: 0.0674
Next Token : ;, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 24, Posbility: 0.0005
Next Token : ], Posbility: 0.0011
Next Token : 
, Posbility: 0.0122
Next Token :  , Posbility: 0.0156
Next Token :  24, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0004
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 0.0011
Next Token : ], Posbility: 0.0757
Next Token : ;, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  26, Posbility: 0.0008
Next Token : ], Posbility: 0.0010
Next Token : 
, Posbility: 0.0031
Next Token :  , Posbility: 0.0109
Next Token :  25, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0004
Next Token : 
, Posbility: 0.0009
Next Token :  , Posbility: 0.0011
Next Token : ], Posbility: 0.0850
Next Token : ;, Posbility: 0.9141
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 26, Posbility: 0.0008
Next Token : ], Posbility: 0.0012
Next Token :  , Posbility: 0.0028
Next Token : 
, Posbility: 0.0032
Next Token :  26, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0005
Next Token : 
, Posbility: 0.0008
Next Token :  , Posbility: 0.0008
Next Token : ], Posbility: 0.0374
Next Token : ;, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ], Posbility: 0.0005
Next Token :  28, Posbility: 0.0006
Next Token :  , Posbility: 0.0012
Next Token : 
, Posbility: 0.0025
Next Token :  27, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 0.0005
Next Token : ], Posbility: 0.0229
Next Token : ;, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token : 28, Posbility: 0.0003
Next Token : 
, Posbility: 0.0008
Next Token :  , Posbility: 0.0015
Next Token :  28, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token : ];, Posbility: 0.0005
Next Token :  , Posbility: 0.0008
Next Token : ], Posbility: 0.0293
Next Token : ;, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ], Posbility: 0.0003
Next Token :  30, Posbility: 0.0005
Next Token :  , Posbility: 0.0009
Next Token : 
, Posbility: 0.0013
Next Token :  29, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0003
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 0.0009
Next Token : ], Posbility: 0.0474
Next Token : ;, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ], Posbility: 0.0001
Next Token : 30, Posbility: 0.0004
Next Token :  , Posbility: 0.0015
Next Token : 
, Posbility: 0.0028
Next Token :  30, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ];, Posbility: 0.0011
Next Token : ][, Posbility: 0.0011
Next Token :  , Posbility: 0.0030
Next Token : ], Posbility: 0.2676
Next Token : ;, Posbility: 0.7266
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  30, Posbility: 0.0003
Next Token : 31, Posbility: 0.0005
Next Token : 
, Posbility: 0.0008
Next Token : ], Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 32;, Posbility: 0.0002
Next Token : 32, Posbility: 0.0003
Next Token : 33, Posbility: 0.0005
Next Token : 35, Posbility: 0.0007
Next Token : 31, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ][, Posbility: 0.0005
Next Token :  , Posbility: 0.0011
Next Token : ];, Posbility: 0.0017
Next Token : ], Posbility: 0.2012
Next Token : ;, Posbility: 0.7930
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31;
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 32;, Posbility: 0.0006
Next Token : 32, Posbility: 0.0007
Next Token : 
, Posbility: 0.0012
Next Token : ], Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 35, Posbility: 0.0013
Next Token : 31, Posbility: 0.0015
Next Token : 33, Posbility: 0.0053
Next Token : 32;, Posbility: 0.3730
Next Token : 32, Posbility: 0.6133
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 
, Posbility: 0.0036
Next Token :  , Posbility: 0.0052
Next Token : ;, Posbility: 0.0381
Next Token : ];, Posbility: 0.0806
Next Token : ], Posbility: 0.8672
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  , Posbility: 0.0018
Next Token :  =, Posbility: 0.0050
Next Token : 
, Posbility: 0.0417
Next Token :  in, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0019
Next Token : 

, Posbility: 0.0022
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0005
Next Token :       , Posbility: 0.0013
Next Token :  , Posbility: 0.0013
Next Token :     , Posbility: 0.0025
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : print, Posbility: 0.0569
Next Token : x, Posbility: 0.0728
Next Token : Printf, Posbility: 0.1748
Next Token : assert, Posbility: 0.2246
Next Token : let, Posbility: 0.2539
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  result, Posbility: 0.0282
Next Token :  res, Posbility: 0.0282
Next Token :  count, Posbility: 0.0767
Next Token :  expected, Posbility: 0.0869
Next Token :  , Posbility: 0.5664
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pairs, Posbility: 0.0520
Next Token : odd, Posbility: 0.0669
Next Token : n, Posbility: 0.1250
Next Token : y, Posbility: 0.1250
Next Token : x, Posbility: 0.3848
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0049
Next Token : ors, Posbility: 0.0150
Next Token :  =, Posbility: 0.0859
Next Token : or, Posbility: 0.2344
Next Token : s, Posbility: 0.6367
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0065
Next Token : 1, Posbility: 0.0107
Next Token : 2, Posbility: 0.0289
Next Token : _, Posbility: 0.0894
Next Token :  =, Posbility: 0.8477
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  O, Posbility: 0.0014
Next Token :  String, Posbility: 0.0038
Next Token : 
, Posbility: 0.0148
Next Token :  [, Posbility: 0.0457
Next Token :  , Posbility: 0.9180
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0050
Next Token : Array, Posbility: 0.0094
Next Token : (, Posbility: 0.0106
Next Token : x, Posbility: 0.1885
Next Token : List, Posbility: 0.7461
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0141
Next Token : fold, Posbility: 0.0141
Next Token : sort, Posbility: 0.0630
Next Token : filter, Posbility: 0.2207
Next Token : map, Posbility: 0.5977
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0016
Next Token :  ~, Posbility: 0.0030
Next Token : _, Posbility: 0.0056
Next Token : i, Posbility: 0.0287
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0009
Next Token : Int, Posbility: 0.0015
Next Token : f, Posbility: 0.0019
Next Token : x, Posbility: 0.0228
Next Token : (, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0003
Next Token : Fun, Posbility: 0.0005
Next Token : let, Posbility: 0.0008
Next Token : function, Posbility: 0.0017
Next Token : fun, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0005
Next Token :  k, Posbility: 0.0008
Next Token :  v, Posbility: 0.0031
Next Token :  i, Posbility: 0.0228
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0007
Next Token : (, Posbility: 0.0015
Next Token : n, Posbility: 0.0024
Next Token : _, Posbility: 0.0052
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0001
Next Token : i, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : s, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0021
Next Token :  ~, Posbility: 0.0024
Next Token :  1, Posbility: 0.0045
Next Token :  String, Posbility: 0.0051
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0070
Next Token : Int, Posbility: 0.0070
Next Token : List, Posbility: 0.0102
Next Token : (, Posbility: 0.0315
Next Token : x, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  %, Posbility: 0.0044
Next Token :  |, Posbility: 0.0064
Next Token :  +, Posbility: 0.0540
Next Token :  *, Posbility: 0.0693
Next Token :  , Posbility: 0.8438
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ::, Posbility: 0.0005
Next Token : <, Posbility: 0.0009
Next Token : /, Posbility: 0.0015
Next Token : -, Posbility: 0.0032
Next Token : ^, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0015
Next Token :  2), Posbility: 0.0015
Next Token :  0), Posbility: 0.0031
Next Token :  1), Posbility: 0.0084
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 42, Posbility: 0.0005
Next Token : 2, Posbility: 0.0007
Next Token : 7, Posbility: 0.0007
Next Token : (, Posbility: 0.0109
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0005
Next Token :  |, Posbility: 0.0008
Next Token :  , Posbility: 0.0036
Next Token :  +, Posbility: 0.0041
Next Token : ), Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  |, Posbility: 0.0003
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 0.0008
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0004
Next Token :  , Posbility: 0.0019
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0003
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : print, Posbility: 0.0437
Next Token : Printf, Posbility: 0.0493
Next Token : x, Posbility: 0.0815
Next Token : assert, Posbility: 0.1348
Next Token : let, Posbility: 0.5312
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  res, Posbility: 0.0102
Next Token :  result, Posbility: 0.0131
Next Token :  expected, Posbility: 0.0244
Next Token :  count, Posbility: 0.0354
Next Token :  , Posbility: 0.8086
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0119
Next Token : n, Posbility: 0.0197
Next Token : pairs, Posbility: 0.0286
Next Token : odd, Posbility: 0.0415
Next Token : x, Posbility: 0.8359
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0009
Next Token : ors, Posbility: 0.0034
Next Token :  =, Posbility: 0.0220
Next Token : or, Posbility: 0.0361
Next Token : s, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0006
Next Token : 1, Posbility: 0.0015
Next Token : 2, Posbility: 0.0031
Next Token : _, Posbility: 0.0096
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  filter, Posbility: 0.0005
Next Token :  [, Posbility: 0.0019
Next Token : 
, Posbility: 0.0025
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Set, Posbility: 0.0001
Next Token : Map, Posbility: 0.0001
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 0.0124
Next Token : List, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0009
Next Token : sort, Posbility: 0.0024
Next Token : remove, Posbility: 0.0024
Next Token : map, Posbility: 0.0177
Next Token : filter, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  not, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0003
Next Token :  ~, Posbility: 0.0003
Next Token : _, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : (__, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : x, Posbility: 0.0005
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : fn, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : not, Posbility: 0.0001
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0000
Next Token :  k, Posbility: 0.0000
Next Token :  v, Posbility: 0.0001
Next Token :  i, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  true, Posbility: 0.0001
Next Token :  not, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : Int, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : (, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  >=, Posbility: 0.0012
Next Token :  <=, Posbility: 0.0012
Next Token :  !=, Posbility: 0.0013
Next Token :  %, Posbility: 0.0019
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : %2, Posbility: 0.0000
Next Token : %%, Posbility: 0.0000
Next Token : ^, Posbility: 0.0008
Next Token : >, Posbility: 0.0028
Next Token : <, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1), Posbility: 0.0001
Next Token :  10), Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  0), Posbility: 0.0002
Next Token : >, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <>
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : 0, Posbility: 0.0002
Next Token :  0, Posbility: 0.0002
Next Token :  1), Posbility: 0.0004
Next Token :  0), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token : ;, Posbility: 0.0004
Next Token :  , Posbility: 0.0010
Next Token : 

, Posbility: 0.0025
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0591
Next Token : print, Posbility: 0.0669
Next Token : Printf, Posbility: 0.1816
Next Token : let, Posbility: 0.2334
Next Token : assert, Posbility: 0.2334
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0199
Next Token : ., Posbility: 0.0255
Next Token : 
, Posbility: 0.0540
Next Token : _, Posbility: 0.1006
Next Token :  , Posbility: 0.7461
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0015
Next Token : 
, Posbility: 0.0020
Next Token : List, Posbility: 0.0042
Next Token : x, Posbility: 0.2617
Next Token : (, Posbility: 0.7109
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : String, Posbility: 0.0012
Next Token : 
, Posbility: 0.0018
Next Token : equal, Posbility: 0.0056
Next Token : List, Posbility: 0.0250
Next Token : x, Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0004
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  ?, Posbility: 0.0000
Next Token : Count, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : c, Posbility: 0.0000
Next Token : counter, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0101
Next Token :  [], Posbility: 0.0212
Next Token : _, Posbility: 0.0273
Next Token :  [, Posbility: 0.0273
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : []), Posbility: 0.0004
Next Token : [0, Posbility: 0.0004
Next Token : List, Posbility: 0.0005
Next Token : (, Posbility: 0.0032
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : or, Posbility: 0.0001
Next Token : ), Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ===, Posbility: 0.0057
Next Token :  , Posbility: 0.0420
Next Token : ), Posbility: 0.3105
Next Token :  =, Posbility: 0.3105
Next Token :  ==, Posbility: 0.3105
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs ==
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  13, Posbility: 0.0466
Next Token :  25, Posbility: 0.0530
Next Token :  24, Posbility: 0.0530
Next Token :  22, Posbility: 0.0679
Next Token :  , Posbility: 0.2373
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 6, Posbility: 0.0483
Next Token : 9, Posbility: 0.0483
Next Token : 32, Posbility: 0.0547
Next Token : 31, Posbility: 0.0620
Next Token : x, Posbility: 0.0703
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0012
Next Token : ), Posbility: 0.0022
Next Token : and, Posbility: 0.0166
Next Token : or, Posbility: 0.4258
Next Token : s, Posbility: 0.5469
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0752
Next Token :  |, Posbility: 0.0752
Next Token : );, Posbility: 0.1094
Next Token : ), Posbility: 0.1807
Next Token : ., Posbility: 0.4316
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0019
Next Token : count, Posbility: 0.0024
Next Token : (, Posbility: 0.0491
Next Token : Length, Posbility: 0.0713
Next Token : length, Posbility: 0.8672
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0161
Next Token :  *, Posbility: 0.0265
Next Token : ), Posbility: 0.1963
Next Token : );, Posbility: 0.1963
Next Token :  , Posbility: 0.5312
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0005
Next Token : x, Posbility: 0.0014
Next Token : ^, Posbility: 0.0101
Next Token : /, Posbility: 0.4316
Next Token : -, Posbility: 0.5547
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0356
Next Token :  2), Posbility: 0.0356
Next Token :  , Posbility: 0.2637
Next Token :  1), Posbility: 0.2637
Next Token :  1);, Posbility: 0.2637
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0033
Next Token : 

, Posbility: 0.0359
Next Token : ;, Posbility: 0.0522
Next Token :  , Posbility: 0.0762
Next Token : 
, Posbility: 0.8164
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);

 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0049
Next Token :     , Posbility: 0.0056
Next Token : val, Posbility: 0.0134
Next Token : let, Posbility: 0.0469
Next Token :   , Posbility: 0.8281
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0117
Next Token : ();, Posbility: 0.0192
Next Token : let, Posbility: 0.0859
Next Token : (), Posbility: 0.1250
Next Token : assert, Posbility: 0.6367
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0019
Next Token : _, Posbility: 0.0019
Next Token :  (1, Posbility: 0.0019
Next Token :  ((, Posbility: 0.0075
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : ([, Posbility: 0.0003
Next Token : List, Posbility: 0.0009
Next Token : x, Posbility: 0.0203
Next Token : (, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : not, Posbility: 0.0002
Next Token : 0, Posbility: 0.0003
Next Token : 
, Posbility: 0.0031
Next Token : List, Posbility: 0.0059
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Count, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : length, Posbility: 0.0000
Next Token : filter, Posbility: 0.0000
Next Token : check, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0089
Next Token : _, Posbility: 0.0649
Next Token :  [], Posbility: 0.1074
Next Token :  [, Posbility: 0.1768
Next Token :  , Posbility: 0.6172
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ([], Posbility: 0.0119
Next Token : List, Posbility: 0.0532
Next Token : [0, Posbility: 0.0603
Next Token : (, Posbility: 0.1865
Next Token : x, Posbility: 0.6484
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ors, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : or, Posbility: 0.0041
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0140
Next Token : ., Posbility: 0.0204
Next Token :  , Posbility: 0.0554
Next Token :  =, Posbility: 0.1035
Next Token :  ==, Posbility: 0.7656
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs ==
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0298
Next Token :  13, Posbility: 0.0298
Next Token :  24, Posbility: 0.0298
Next Token :  0);, Posbility: 0.0718
Next Token :  , Posbility: 0.4668
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0388
Next Token : 32, Posbility: 0.0439
Next Token : 31, Posbility: 0.0439
Next Token : List, Posbility: 0.0723
Next Token : x, Posbility: 0.4160
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ors, Posbility: 0.0012
Next Token : and, Posbility: 0.0029
Next Token :  , Posbility: 0.0042
Next Token : or, Posbility: 0.3730
Next Token : s, Posbility: 0.6172
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ', Posbility: 0.0011
Next Token : );, Posbility: 0.0031
Next Token :  |, Posbility: 0.0065
Next Token :  , Posbility: 0.0095
Next Token : ., Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0008
Next Token : Length, Posbility: 0.0015
Next Token : count, Posbility: 0.0036
Next Token : filter, Posbility: 0.0036
Next Token : length, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0098
Next Token :  *, Posbility: 0.0126
Next Token : ), Posbility: 0.0143
Next Token : );, Posbility: 0.1748
Next Token :  , Posbility: 0.7812
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -2, Posbility: 0.0003
Next Token : );, Posbility: 0.0004
Next Token : ^, Posbility: 0.0031
Next Token : /, Posbility: 0.0371
Next Token : -, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0187
Next Token :  1), Posbility: 0.0508
Next Token :  , Posbility: 0.0835
Next Token :  2);, Posbility: 0.1377
Next Token :  1);, Posbility: 0.6172
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0016
Next Token : ;, Posbility: 0.0018
Next Token :  , Posbility: 0.0038
Next Token : 

, Posbility: 0.0593
Next Token : 
, Posbility: 0.9297
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);

 score:False
Error type: noerr
---------------------------
Next Token : val, Posbility: 0.0070
Next Token : end, Posbility: 0.0075
Next Token : 

, Posbility: 0.0077
Next Token : let, Posbility: 0.1289
Next Token :   , Posbility: 0.6133
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0098
Next Token : return, Posbility: 0.0143
Next Token : (), Posbility: 0.0344
Next Token : let, Posbility: 0.0825
Next Token : assert, Posbility: 0.7812
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0006
Next Token : _, Posbility: 0.0008
Next Token :  (1, Posbility: 0.0010
Next Token :  ((, Posbility: 0.0041
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : ([, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : x, Posbility: 0.0052
Next Token : (, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 0, Posbility: 0.0002
Next Token : not, Posbility: 0.0003
Next Token : 
, Posbility: 0.0017
Next Token : List, Posbility: 0.0041
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ors, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0002
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Count, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : counter, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : check, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0, Posbility: 0.0027
Next Token :  [, Posbility: 0.0427
Next Token : _, Posbility: 0.0427
Next Token :  [], Posbility: 0.0427
Next Token :  , Posbility: 0.8555
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ([], Posbility: 0.0013
Next Token : [0, Posbility: 0.0045
Next Token : List, Posbility: 0.0084
Next Token : (, Posbility: 0.0156
Next Token : x, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ors, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : or, Posbility: 0.0010
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0019
Next Token : ., Posbility: 0.0051
Next Token :  =, Posbility: 0.0051
Next Token :  , Posbility: 0.0138
Next Token :  ==, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs ==
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0057
Next Token :  13, Posbility: 0.0057
Next Token :  1);, Posbility: 0.0120
Next Token :  0);, Posbility: 0.0688
Next Token :  , Posbility: 0.8398
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 9, Posbility: 0.0027
Next Token : (, Posbility: 0.0030
Next Token : 2, Posbility: 0.0030
Next Token : 6, Posbility: 0.0039
Next Token : x, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : or, Posbility: 0.0017
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0003
Next Token : ), Posbility: 0.0004
Next Token :  +, Posbility: 0.0005
Next Token : );, Posbility: 0.0076
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : );, Posbility: 0.0001
Next Token : -2, Posbility: 0.0001
Next Token : /, Posbility: 0.0005
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  3);, Posbility: 0.0009
Next Token :  , Posbility: 0.0024
Next Token :  1), Posbility: 0.0066
Next Token :  2);, Posbility: 0.0066
Next Token :  1);, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0004
Next Token :  ..., Posbility: 0.0004
Next Token :  , Posbility: 0.0011
Next Token : 

, Posbility: 0.0229
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0016
Next Token : ;, Posbility: 0.0021
Next Token : 

, Posbility: 0.0030
Next Token : let, Posbility: 0.0143
Next Token :   , Posbility: 0.9414
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0030
Next Token : (), Posbility: 0.0044
Next Token : return, Posbility: 0.0057
Next Token : let, Posbility: 0.0154
Next Token : assert, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (*, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  (1, Posbility: 0.0003
Next Token :  ((, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : ([, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : x, Posbility: 0.0019
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : not, Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token : List, Posbility: 0.0008
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Count, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : num, Posbility: 0.0000
Next Token : check, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0, Posbility: 0.0006
Next Token :  [], Posbility: 0.0045
Next Token :  [, Posbility: 0.0052
Next Token : _, Posbility: 0.0075
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : [0, Posbility: 0.0004
Next Token : List, Posbility: 0.0010
Next Token : (, Posbility: 0.0019
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ors, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0004
Next Token : ., Posbility: 0.0005
Next Token :  =, Posbility: 0.0007
Next Token :  , Posbility: 0.0025
Next Token :  ==, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs ==
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0004
Next Token :  2);, Posbility: 0.0004
Next Token :  1);, Posbility: 0.0015
Next Token :  0);, Posbility: 0.0140
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 9, Posbility: 0.0004
Next Token : 6, Posbility: 0.0005
Next Token : 2, Posbility: 0.0007
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : or, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token :  -1, Posbility: 0.0001
Next Token : );, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : /, Posbility: 0.0001
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token :  3);, Posbility: 0.0003
Next Token :  1), Posbility: 0.0009
Next Token :  2);, Posbility: 0.0009
Next Token :  1);, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : ;, Posbility: 0.0004
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0179
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0012
Next Token : ;, Posbility: 0.0014
Next Token : 

, Posbility: 0.0024
Next Token : let, Posbility: 0.0048
Next Token :   , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0021
Next Token : (), Posbility: 0.0039
Next Token : return, Posbility: 0.0057
Next Token : let, Posbility: 0.0095
Next Token : assert, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  (*, Posbility: 0.0001
Next Token :  (1, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (", Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : ([, Posbility: 0.0000
Next Token : x, Posbility: 0.0012
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : not, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token : List, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : and, Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : Count, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : num, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : check, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0, Posbility: 0.0004
Next Token :  [], Posbility: 0.0017
Next Token :  [, Posbility: 0.0017
Next Token : _, Posbility: 0.0032
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : [0, Posbility: 0.0001
Next Token : List, Posbility: 0.0004
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  <=, Posbility: 0.0003
Next Token :  ~, Posbility: 0.0003
Next Token :  =, Posbility: 0.0004
Next Token :  , Posbility: 0.0019
Next Token :  ==, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs ==
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  2);, Posbility: 0.0003
Next Token :  10, Posbility: 0.0004
Next Token :  1);, Posbility: 0.0015
Next Token :  0);, Posbility: 0.0140
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 9, Posbility: 0.0003
Next Token : 6, Posbility: 0.0003
Next Token : 2, Posbility: 0.0005
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  -1, Posbility: 0.0001
Next Token : );, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  3);, Posbility: 0.0003
Next Token :  1), Posbility: 0.0009
Next Token :  2);, Posbility: 0.0009
Next Token :  1);, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : ;, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0140
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0010
Next Token : end, Posbility: 0.0011
Next Token : 

, Posbility: 0.0013
Next Token : let, Posbility: 0.0019
Next Token :   , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0019
Next Token : (), Posbility: 0.0024
Next Token : return, Posbility: 0.0045
Next Token : let, Posbility: 0.0058
Next Token : assert, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  (*, Posbility: 0.0001
Next Token :  (1, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : (0);, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : x, Posbility: 0.0010
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token : List, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : Count, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : num, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : check, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0, Posbility: 0.0002
Next Token :  [, Posbility: 0.0010
Next Token :  [], Posbility: 0.0013
Next Token : _, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : [0, Posbility: 0.0001
Next Token : List, Posbility: 0.0003
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  <=, Posbility: 0.0002
Next Token :  ~, Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0013
Next Token :  ==, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs ==
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0003
Next Token :  2);, Posbility: 0.0003
Next Token :  1);, Posbility: 0.0009
Next Token :  0);, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 6, Posbility: 0.0002
Next Token : 9, Posbility: 0.0002
Next Token : 2, Posbility: 0.0004
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  -1, Posbility: 0.0001
Next Token : );, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token :  3);, Posbility: 0.0002
Next Token :  2);, Posbility: 0.0006
Next Token :  1), Posbility: 0.0009
Next Token :  1);, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : ;, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0125
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0010
Next Token : ;, Posbility: 0.0012
Next Token : 

, Posbility: 0.0017
Next Token : let, Posbility: 0.0019
Next Token :   , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0019
Next Token : (), Posbility: 0.0021
Next Token : return, Posbility: 0.0051
Next Token : let, Posbility: 0.0066
Next Token : assert, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  (*, Posbility: 0.0000
Next Token :  (1, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : (0);, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : x, Posbility: 0.0010
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token : List, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Count, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : num, Posbility: 0.0000
Next Token : check, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0, Posbility: 0.0002
Next Token :  [, Posbility: 0.0007
Next Token :  [], Posbility: 0.0009
Next Token : _, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : (), Posbility: 0.0001
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token :  <=, Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token :  ==, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs ==
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0003
Next Token :  2);, Posbility: 0.0003
Next Token :  1);, Posbility: 0.0009
Next Token :  0);, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 9, Posbility: 0.0002
Next Token : 6, Posbility: 0.0002
Next Token : 2, Posbility: 0.0004
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  -1, Posbility: 0.0000
Next Token : );, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  3);, Posbility: 0.0001
Next Token :  2);, Posbility: 0.0003
Next Token :  1), Posbility: 0.0006
Next Token :  1);, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ;, Posbility: 0.0003
Next Token : 

, Posbility: 0.0159
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0006
Next Token : }, Posbility: 0.0007
Next Token : let, Posbility: 0.0013
Next Token : end, Posbility: 0.0043
Next Token :   , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0019
Next Token : (), Posbility: 0.0024
Next Token : return, Posbility: 0.0040
Next Token : let, Posbility: 0.0066
Next Token : assert, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  (*, Posbility: 0.0000
Next Token :  (1, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Exception, Posbility: 0.0000
Next Token : (0);, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : x, Posbility: 0.0008
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token : List, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Count, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : num, Posbility: 0.0000
Next Token : check, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0, Posbility: 0.0002
Next Token :  [, Posbility: 0.0005
Next Token :  [], Posbility: 0.0007
Next Token : _, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0002
Next Token :  <=, Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token :  ==, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs ==
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  4, Posbility: 0.0002
Next Token :  10, Posbility: 0.0002
Next Token :  1);, Posbility: 0.0009
Next Token :  0);, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 6, Posbility: 0.0001
Next Token : 9, Posbility: 0.0001
Next Token : 2, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  -1, Posbility: 0.0000
Next Token : );, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  3);, Posbility: 0.0001
Next Token :  2);, Posbility: 0.0003
Next Token :  1), Posbility: 0.0006
Next Token :  1);, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ;, Posbility: 0.0002
Next Token : 

, Posbility: 0.0159
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0014
Next Token : end, Posbility: 0.0016
Next Token : let, Posbility: 0.0022
Next Token : 

, Posbility: 0.0023
Next Token :   , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0019
Next Token : (), Posbility: 0.0027
Next Token : let, Posbility: 0.0058
Next Token : return, Posbility: 0.0065
Next Token : assert, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0000
Next Token :  (1, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : Exception, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : x, Posbility: 0.0009
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token : List, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : OR, Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : Count, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : num, Posbility: 0.0000
Next Token : oc, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  [, Posbility: 0.0004
Next Token :  [], Posbility: 0.0005
Next Token : _, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0001
Next Token :  <=, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token :  ==, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs ==
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0002
Next Token :  0), Posbility: 0.0002
Next Token :  1);, Posbility: 0.0005
Next Token :  0);, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 6, Posbility: 0.0001
Next Token : 9, Posbility: 0.0002
Next Token : 2, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ors, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  -1, Posbility: 0.0001
Next Token : );, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  3);, Posbility: 0.0001
Next Token :  2);, Posbility: 0.0003
Next Token :  1), Posbility: 0.0009
Next Token :  1);, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ;, Posbility: 0.0003
Next Token : 

, Posbility: 0.0203
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0014
Next Token : end, Posbility: 0.0014
Next Token : let, Posbility: 0.0021
Next Token : 

, Posbility: 0.0026
Next Token :   , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0021
Next Token : (), Posbility: 0.0031
Next Token : return, Posbility: 0.0065
Next Token : let, Posbility: 0.0074
Next Token : assert, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0001
Next Token :  (*, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : Exception, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : x, Posbility: 0.0010
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token : List, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Count, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : oc, Posbility: 0.0000
Next Token : check, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0, Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token :  [], Posbility: 0.0004
Next Token : _, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  <=, Posbility: 0.0001
Next Token :  , Posbility: 0.0009
Next Token :  ==, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs ==
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0002
Next Token :  0), Posbility: 0.0002
Next Token :  1);, Posbility: 0.0009
Next Token :  0);, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 6, Posbility: 0.0001
Next Token : 9, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ors, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  -1, Posbility: 0.0001
Next Token : );, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  3);, Posbility: 0.0001
Next Token :  2);, Posbility: 0.0003
Next Token :  1), Posbility: 0.0006
Next Token :  1);, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ;, Posbility: 0.0002
Next Token : 

, Posbility: 0.0179
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0018
Next Token : end, Posbility: 0.0018
Next Token : 

, Posbility: 0.0029
Next Token : let, Posbility: 0.0029
Next Token :   , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0015
Next Token : (), Posbility: 0.0027
Next Token : let, Posbility: 0.0051
Next Token : return, Posbility: 0.0058
Next Token : assert, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0000
Next Token :  (1, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : Exception, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : x, Posbility: 0.0008
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token : List, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : Count, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : num, Posbility: 0.0000
Next Token : oc, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0, Posbility: 0.0002
Next Token :  [, Posbility: 0.0003
Next Token :  [], Posbility: 0.0004
Next Token : _, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  <=, Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token :  ==, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs ==
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0002
Next Token :  0), Posbility: 0.0003
Next Token :  1);, Posbility: 0.0009
Next Token :  0);, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 6, Posbility: 0.0001
Next Token : 9, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  -1, Posbility: 0.0001
Next Token : );, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  3);, Posbility: 0.0001
Next Token :  2);, Posbility: 0.0003
Next Token :  1), Posbility: 0.0006
Next Token :  1);, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ;, Posbility: 0.0002
Next Token : 

, Posbility: 0.0140
Next Token : 
, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0018
Next Token : end, Posbility: 0.0023
Next Token : let, Posbility: 0.0029
Next Token : 

, Posbility: 0.0035
Next Token :   , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0027
Next Token : (), Posbility: 0.0039
Next Token : return, Posbility: 0.0045
Next Token : let, Posbility: 0.0074
Next Token : assert, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (1, Posbility: 0.0000
Next Token :  !, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : Exception, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : x, Posbility: 0.0010
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token : List, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Count, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : num, Posbility: 0.0000
Next Token : check, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  0, Posbility: 0.0002
Next Token :  [, Posbility: 0.0003
Next Token :  [], Posbility: 0.0004
Next Token : _, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0001
Next Token :  <=, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token :  ==, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs ==
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  10, Posbility: 0.0002
Next Token :  0), Posbility: 0.0003
Next Token :  1);, Posbility: 0.0009
Next Token :  0);, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 6, Posbility: 0.0001
Next Token : 9, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  -1, Posbility: 0.0001
Next Token : );, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length -
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  3);, Posbility: 0.0001
Next Token :  2);, Posbility: 0.0003
Next Token :  1), Posbility: 0.0009
Next Token :  1);, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ;, Posbility: 0.0002
Next Token : 

, Posbility: 0.0203
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0020
Next Token : end, Posbility: 0.0023
Next Token : let, Posbility: 0.0031
Next Token : 

, Posbility: 0.0040
Next Token :   , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0027
Next Token : (), Posbility: 0.0035
Next Token : return, Posbility: 0.0065
Next Token : let, Posbility: 0.0074
Next Token : assert, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert
 score:False
Error type: noerr
---------------------------
Next Token :  !, Posbility: 0.0000
Next Token :  (1, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert 
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : Exception, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : x, Posbility: 0.0010
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token : List, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (x
 score:False
Error type: noerr
---------------------------
Next Token : OR, Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor
 score:False
Error type: noerr
---------------------------
Next Token : Count, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_
 score:False
Error type: noerr
---------------------------
Next Token : oc, Posbility: 0.0000
Next Token : check, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0002
Next Token :  0, Posbility: 0.0002
Next Token :  [], Posbility: 0.0002
Next Token : _, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count 
 score:False
Error type: noerr
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : (), Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs
 score:False
Error type: noerr
---------------------------
Next Token :  ~, Posbility: 0.0001
Next Token :  <=, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token :  ==, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs ==
 score:False
Error type: noerr
---------------------------
Next Token :  10, Posbility: 0.0002
Next Token :  0), Posbility: 0.0002
Next Token :  1);, Posbility: 0.0005
Next Token :  0);, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == 
 score:False
Error type: noerr
---------------------------
Next Token : 6, Posbility: 0.0001
Next Token : 9, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == x
 score:False
Error type: noerr
---------------------------
Next Token :  or, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  -1, Posbility: 0.0001
Next Token : );, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length 
 score:False
Error type: noerr
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length -
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  3);, Posbility: 0.0001
Next Token :  2);, Posbility: 0.0003
Next Token :  1), Posbility: 0.0009
Next Token :  1);, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ;, Posbility: 0.0003
Next Token : 

, Posbility: 0.0259
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0018
Next Token : let, Posbility: 0.0018
Next Token : end, Posbility: 0.0023
Next Token : 

, Posbility: 0.0040
Next Token :   , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  
 score:False
Error type: noerr
---------------------------
Next Token : print, Posbility: 0.0021
Next Token : (), Posbility: 0.0035
Next Token : let, Posbility: 0.0051
Next Token : return, Posbility: 0.0065
Next Token : assert, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert
 score:False
Error type: noerr
---------------------------
Next Token :  false, Posbility: 0.0000
Next Token :  !, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert 
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : Exception, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : x, Posbility: 0.0010
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token : List, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (x
 score:False
Error type: noerr
---------------------------
Next Token : OR, Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : Count, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_
 score:False
Error type: noerr
---------------------------
Next Token : oc, Posbility: 0.0000
Next Token : check, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0002
Next Token :  [, Posbility: 0.0003
Next Token :  [], Posbility: 0.0003
Next Token : _, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count 
 score:False
Error type: noerr
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs
 score:False
Error type: noerr
---------------------------
Next Token :  ~, Posbility: 0.0001
Next Token :  <=, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token :  ==, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs ==
 score:False
Error type: noerr
---------------------------
Next Token :  10, Posbility: 0.0002
Next Token :  0), Posbility: 0.0003
Next Token :  1);, Posbility: 0.0005
Next Token :  0);, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == 
 score:False
Error type: noerr
---------------------------
Next Token : 6, Posbility: 0.0001
Next Token : 9, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == x
 score:False
Error type: noerr
---------------------------
Next Token : ors, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.
 score:False
Error type: noerr
---------------------------
Next Token : leg, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  -1, Posbility: 0.0001
Next Token : );, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length 
 score:False
Error type: noerr
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length -
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  3);, Posbility: 0.0001
Next Token :  2);, Posbility: 0.0003
Next Token :  1), Posbility: 0.0006
Next Token :  1);, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : ;, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0229
Next Token : 
, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);

 score:False
Error type: noerr
---------------------------
Next Token : end, Posbility: 0.0025
Next Token : ;, Posbility: 0.0033
Next Token : let, Posbility: 0.0039
Next Token : 

, Posbility: 0.0042
Next Token :   , Posbility: 0.9609
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0027
Next Token : (), Posbility: 0.0035
Next Token : return, Posbility: 0.0051
Next Token : let, Posbility: 0.0051
Next Token : assert, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert
 score:False
Error type: noerr
---------------------------
Next Token :  false, Posbility: 0.0000
Next Token :  !, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert 
 score:False
Error type: noerr
---------------------------
Next Token : ([, Posbility: 0.0000
Next Token : Exception, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : x, Posbility: 0.0010
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token : List, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (x
 score:False
Error type: noerr
---------------------------
Next Token : OR, Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : Count, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_
 score:False
Error type: noerr
---------------------------
Next Token : num, Posbility: 0.0000
Next Token : oc, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  0, Posbility: 0.0001
Next Token :  [], Posbility: 0.0002
Next Token : _, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count 
 score:False
Error type: noerr
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count x
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs
 score:False
Error type: noerr
---------------------------
Next Token :  <=, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0007
Next Token :  ==, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs ==
 score:False
Error type: noerr
---------------------------
Next Token :  10, Posbility: 0.0001
Next Token :  0), Posbility: 0.0002
Next Token :  1);, Posbility: 0.0003
Next Token :  0);, Posbility: 0.0067
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == 
 score:False
Error type: noerr
---------------------------
Next Token : 6, Posbility: 0.0001
Next Token : 9, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == x
 score:False
Error type: noerr
---------------------------
Next Token : );, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.
 score:False
Error type: noerr
---------------------------
Next Token : count, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  -1, Posbility: 0.0001
Next Token : );, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length 
 score:False
Error type: noerr
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length -
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  3);, Posbility: 0.0001
Next Token :  2);, Posbility: 0.0003
Next Token :  1), Posbility: 0.0006
Next Token :  1);, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : ;, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0293
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0021
Next Token : let, Posbility: 0.0031
Next Token : 

, Posbility: 0.0039
Next Token : end, Posbility: 0.0039
Next Token :   , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  
 score:False
Error type: noerr
---------------------------
Next Token : print, Posbility: 0.0021
Next Token : (), Posbility: 0.0035
Next Token : let, Posbility: 0.0045
Next Token : return, Posbility: 0.0074
Next Token : assert, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert
 score:False
Error type: noerr
---------------------------
Next Token :  (1, Posbility: 0.0000
Next Token :  !, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert 
 score:False
Error type: noerr
---------------------------
Next Token : ([, Posbility: 0.0000
Next Token : Exception, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : x, Posbility: 0.0009
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (
 score:False
Error type: noerr
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token : List, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (x
 score:False
Error type: noerr
---------------------------
Next Token : OR, Posbility: 0.0000
Next Token : ors, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  or, Posbility: 0.0000
Next Token : or, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : Count, Posbility: 0.0000
Next Token :  count, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_
 score:False
Error type: noerr
---------------------------
Next Token : oc, Posbility: 0.0000
Next Token : check, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : count, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count
 score:False
Error type: noerr
---------------------------
Next Token :  0, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token : _, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count 
 score:False
Error type: noerr
---------------------------
Next Token : [0, Posbility: 0.0000
Next Token : (), Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count x
 score:False
Error type: noerr
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs
 score:False
Error type: noerr
---------------------------
Next Token :  ~, Posbility: 0.0001
Next Token :  <=, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token :  ==, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs ==
 score:False
Error type: noerr
---------------------------
Next Token :  10, Posbility: 0.0001
Next Token :  0), Posbility: 0.0002
Next Token :  1);, Posbility: 0.0005
Next Token :  0);, Posbility: 0.0067
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == 
 score:False
Error type: noerr
---------------------------
Next Token : 6, Posbility: 0.0001
Next Token : 9, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == x
 score:False
Error type: noerr
---------------------------
Next Token : ors, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : or, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.
 score:False
Error type: noerr
---------------------------
Next Token : count, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  -1, Posbility: 0.0001
Next Token : );, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length 
 score:False
Error type: noerr
---------------------------
Next Token : -3, Posbility: 0.0000
Next Token : -2, Posbility: 0.0000
Next Token : );, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length -
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :  3);, Posbility: 0.0001
Next Token :  2);, Posbility: 0.0003
Next Token :  1), Posbility: 0.0009
Next Token :  1);, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : ;, Posbility: 0.0002
Next Token : 

, Posbility: 0.0260
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0019
Next Token : let, Posbility: 0.0023
Next Token : end, Posbility: 0.0026
Next Token : 

, Posbility: 0.0037
Next Token :   , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0027
Next Token : (), Posbility: 0.0031
Next Token : let, Posbility: 0.0051
Next Token : return, Posbility: 0.0074
Next Token : assert, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert
 score:False
Error type: noerr
---------------------------
Next Token :  (!, Posbility: 0.0000
Next Token :  !, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert 
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : Exception, Posbility: 0.0000
Next Token : (", Posbility: 0.0000
Next Token : x, Posbility: 0.0007
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (
 score:False
Error type: noerr
---------------------------
Next Token : true, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : List, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to count the number of pairs whose xor value is odd. *)
let xor_count xs =
  let xs = List.filter (fun x -> x <> 0) xs in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  List.length xs
let xor_count_test () =
  let xs = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32] in
  let xs = List.map (fun x -> x ^ x) xs in
  let xs = List.filter (fun x -> x <> 0) xs in
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (xor_count xs == xs.length - 1);
  assert (x
 score:False
Error type: noerr
---------------------------


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>