code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0217
Next Token :  maximum, Posbility: 0.0278
Next Token :  , Posbility: 0.2061
Next Token :  rec, Posbility: 0.2637
Next Token :  max, Posbility: 0.3398
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0081
Next Token : -, Posbility: 0.0118
Next Token :  , Posbility: 0.0530
Next Token :  =, Posbility: 0.0530
Next Token : _, Posbility: 0.8281
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : tuple, Posbility: 0.0124
Next Token : sum, Posbility: 0.0297
Next Token : of, Posbility: 0.0432
Next Token : agg, Posbility: 0.2188
Next Token : aggregate, Posbility: 0.4648
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0189
Next Token :  a, Posbility: 0.0311
Next Token : _, Posbility: 0.0845
Next Token :  =, Posbility: 0.2295
Next Token :  , Posbility: 0.4863
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : agg, Posbility: 0.0742
Next Token : ts, Posbility: 0.0840
Next Token : t, Posbility: 0.0952
Next Token : (, Posbility: 0.1387
Next Token : x, Posbility: 0.2285
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0007
Next Token : _, Posbility: 0.0018
Next Token :  , Posbility: 0.0130
Next Token :  =, Posbility: 0.2617
Next Token : s, Posbility: 0.7109
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token : _, Posbility: 0.0010
Next Token : 
, Posbility: 0.0015
Next Token :  , Posbility: 0.0157
Next Token :  =, Posbility: 0.9766
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0038
Next Token :  max, Posbility: 0.0042
Next Token :  match, Posbility: 0.0148
Next Token :  , Posbility: 0.1406
Next Token : 
, Posbility: 0.8125
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0051
Next Token : 	, Posbility: 0.0065
Next Token :    , Posbility: 0.0107
Next Token :     , Posbility: 0.1152
Next Token :   , Posbility: 0.8516
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0126
Next Token : if, Posbility: 0.0208
Next Token : List, Posbility: 0.0439
Next Token : match, Posbility: 0.1738
Next Token : let, Posbility: 0.6875
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0289
Next Token :  open, Posbility: 0.0889
Next Token :  max, Posbility: 0.1660
Next Token :  rec, Posbility: 0.2734
Next Token :  , Posbility: 0.2734
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0537
Next Token : agg, Posbility: 0.0688
Next Token : f, Posbility: 0.0781
Next Token : init, Posbility: 0.0781
Next Token : x, Posbility: 0.1465
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0306
Next Token : i, Posbility: 0.0306
Next Token : _, Posbility: 0.0835
Next Token :  =, Posbility: 0.2559
Next Token : s, Posbility: 0.4785
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0153
Next Token : 2, Posbility: 0.0322
Next Token : ', Posbility: 0.0996
Next Token : _, Posbility: 0.2695
Next Token :  =, Posbility: 0.5039
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0036
Next Token :  sort, Posbility: 0.0096
Next Token : 
, Posbility: 0.0262
Next Token :  [, Posbility: 0.0432
Next Token :  , Posbility: 0.8672
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0082
Next Token : Seq, Posbility: 0.0119
Next Token : Array, Posbility: 0.0325
Next Token : x, Posbility: 0.3496
Next Token : List, Posbility: 0.5078
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token : Helpers, Posbility: 0.0004
Next Token : (, Posbility: 0.0012
Next Token : _, Posbility: 0.0025
Next Token : ., Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0240
Next Token : filter, Posbility: 0.1387
Next Token : map, Posbility: 0.1777
Next Token : rev, Posbility: 0.2285
Next Token : sort, Posbility: 0.3320
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0025
Next Token :  !, Posbility: 0.0033
Next Token :  ~, Posbility: 0.0054
Next Token : _, Posbility: 0.1777
Next Token :  , Posbility: 0.7969
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0024
Next Token : f, Posbility: 0.0052
Next Token : Compare, Posbility: 0.0109
Next Token : (, Posbility: 0.2812
Next Token : x, Posbility: 0.6758
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 0.0008
Next Token :  in, Posbility: 0.0009
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  by, Posbility: 0.0070
Next Token :  ~, Posbility: 0.0079
Next Token : 
, Posbility: 0.0245
Next Token :  , Posbility: 0.1245
Next Token :  in, Posbility: 0.8125
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 0.0083
Next Token :  , Posbility: 0.0095
Next Token : 

, Posbility: 0.0137
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0004
Next Token :  , Posbility: 0.0005
Next Token :       , Posbility: 0.0009
Next Token :     , Posbility: 0.0046
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0160
Next Token : if, Posbility: 0.0298
Next Token : List, Posbility: 0.0557
Next Token : match, Posbility: 0.0811
Next Token : let, Posbility: 0.7695
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  open, Posbility: 0.0209
Next Token :  acc, Posbility: 0.0566
Next Token :  max, Posbility: 0.1543
Next Token :  rec, Posbility: 0.1973
Next Token :  , Posbility: 0.3691
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0413
Next Token : (, Posbility: 0.0466
Next Token : agg, Posbility: 0.0530
Next Token : y, Posbility: 0.0598
Next Token : x, Posbility: 0.3047
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0344
Next Token : _, Posbility: 0.0732
Next Token : 0, Posbility: 0.0732
Next Token :  =, Posbility: 0.1982
Next Token : s, Posbility: 0.5391
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0146
Next Token : ,, Posbility: 0.0188
Next Token : ', Posbility: 0.0513
Next Token : _, Posbility: 0.1582
Next Token :  =, Posbility: 0.7070
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0010
Next Token :  match, Posbility: 0.0013
Next Token :  [, Posbility: 0.0266
Next Token : 
, Posbility: 0.0723
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0057
Next Token : Array, Posbility: 0.0057
Next Token : (, Posbility: 0.0084
Next Token : x, Posbility: 0.0898
Next Token : List, Posbility: 0.8516
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reverse, Posbility: 0.0272
Next Token : fold, Posbility: 0.0654
Next Token : filter, Posbility: 0.0737
Next Token : map, Posbility: 0.1777
Next Token : rev, Posbility: 0.4258
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0016
Next Token :  ~, Posbility: 0.0016
Next Token : ., Posbility: 0.0043
Next Token : _, Posbility: 0.0669
Next Token :  , Posbility: 0.9219
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : List, Posbility: 0.0009
Next Token : (, Posbility: 0.0041
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0007
Next Token :  , Posbility: 0.0015
Next Token :  =, Posbility: 0.0015
Next Token : 
, Posbility: 0.0040
Next Token :  in, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 0.0039
Next Token :  , Posbility: 0.0064
Next Token : 

, Posbility: 0.0327
Next Token : 
, Posbility: 0.9531
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :     , Posbility: 0.0005
Next Token :  , Posbility: 0.0019
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0164
Next Token : if, Posbility: 0.0164
Next Token : match, Posbility: 0.0571
Next Token : List, Posbility: 0.0732
Next Token : let, Posbility: 0.7891
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0164
Next Token :  acc, Posbility: 0.0732
Next Token :  max, Posbility: 0.1211
Next Token :  rec, Posbility: 0.1367
Next Token :  , Posbility: 0.4785
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0454
Next Token : y, Posbility: 0.0454
Next Token : agg, Posbility: 0.0454
Next Token : f, Posbility: 0.0515
Next Token : x, Posbility: 0.4297
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0182
Next Token : i, Posbility: 0.0182
Next Token : _, Posbility: 0.0233
Next Token :  =, Posbility: 0.1338
Next Token : s, Posbility: 0.7695
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0066
Next Token : ,, Posbility: 0.0204
Next Token : ', Posbility: 0.0204
Next Token : _, Posbility: 0.0557
Next Token :  =, Posbility: 0.8672
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0011
Next Token :  match, Posbility: 0.0014
Next Token :  [, Posbility: 0.0212
Next Token : 
, Posbility: 0.0576
Next Token :  , Posbility: 0.9023
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0036
Next Token : Array, Posbility: 0.0041
Next Token : (, Posbility: 0.0077
Next Token : x, Posbility: 0.0640
Next Token : List, Posbility: 0.8867
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : take, Posbility: 0.0286
Next Token : filter, Posbility: 0.1001
Next Token : fold, Posbility: 0.1001
Next Token : rev, Posbility: 0.2393
Next Token : map, Posbility: 0.2715
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0177
Next Token :  acc, Posbility: 0.0227
Next Token : _, Posbility: 0.0258
Next Token : i, Posbility: 0.0481
Next Token :  , Posbility: 0.7539
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0053
Next Token : Tuple, Posbility: 0.0078
Next Token : f, Posbility: 0.0947
Next Token : x, Posbility: 0.1074
Next Token : (, Posbility: 0.6992
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : fn, Posbility: 0.0190
Next Token : Tuple, Posbility: 0.0216
Next Token : function, Posbility: 0.0315
Next Token : f, Posbility: 0.0459
Next Token : fun, Posbility: 0.7148
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0122
Next Token :  v, Posbility: 0.0178
Next Token :  [, Posbility: 0.0293
Next Token :  {, Posbility: 0.0332
Next Token :  , Posbility: 0.8555
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0079
Next Token : _, Posbility: 0.0166
Next Token : t, Posbility: 0.0452
Next Token : x, Posbility: 0.3340
Next Token : (, Posbility: 0.5508
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : i, Posbility: 0.0239
Next Token : v, Posbility: 0.0239
Next Token : _, Posbility: 0.1069
Next Token : a, Posbility: 0.1562
Next Token : x, Posbility: 0.3730
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 0,, Posbility: 0.0049
Next Token : _, Posbility: 0.0081
Next Token :  , Posbility: 0.0133
Next Token : 1,, Posbility: 0.0220
Next Token : ,, Posbility: 0.9336
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x,
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  a, Posbility: 0.0403
Next Token :  acc, Posbility: 0.0403
Next Token : _, Posbility: 0.0518
Next Token : y, Posbility: 0.1406
Next Token :  , Posbility: 0.6289
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0106
Next Token : c, Posbility: 0.0135
Next Token : agg, Posbility: 0.0223
Next Token : _, Posbility: 0.2715
Next Token : y, Posbility: 0.5742
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : 1,, Posbility: 0.0009
Next Token : s, Posbility: 0.0023
Next Token : ,, Posbility: 0.0471
Next Token : ), Posbility: 0.9453
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0001
Next Token :  when, Posbility: 0.0002
Next Token :  =, Posbility: 0.0003
Next Token :  =>, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : x, Posbility: 0.0007
Next Token : -, Posbility: 0.0010
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0081
Next Token : 
, Posbility: 0.0103
Next Token :  max, Posbility: 0.0103
Next Token :  [, Posbility: 0.0132
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0041
Next Token : if, Posbility: 0.0182
Next Token : y, Posbility: 0.1523
Next Token : (, Posbility: 0.1953
Next Token : x, Posbility: 0.6016
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0182
Next Token : ,, Posbility: 0.0300
Next Token :  , Posbility: 0.0815
Next Token :  *, Posbility: 0.2217
Next Token :  +, Posbility: 0.6016
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token :  1), Posbility: 0.0003
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : x, Posbility: 0.0006
Next Token : (, Posbility: 0.0015
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0024
Next Token :  +, Posbility: 0.0024
Next Token : ,, Posbility: 0.0040
Next Token :  , Posbility: 0.0109
Next Token : ), Posbility: 0.9766
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : (, Posbility: 0.0013
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0034
Next Token :  |, Posbility: 0.0034
Next Token :  =, Posbility: 0.0137
Next Token : 
, Posbility: 0.0176
Next Token :  in, Posbility: 0.9570
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token :   , Posbility: 0.0011
Next Token :  , Posbility: 0.0027
Next Token : 

, Posbility: 0.0159
Next Token : 
, Posbility: 0.9805
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0000
Next Token :       , Posbility: 0.0003
Next Token :     , Posbility: 0.0005
Next Token :  , Posbility: 0.0025
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0101
Next Token : match, Posbility: 0.0310
Next Token : x, Posbility: 0.0654
Next Token : List, Posbility: 0.1387
Next Token : let, Posbility: 0.7070
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0239
Next Token :  acc, Posbility: 0.0349
Next Token :  rec, Posbility: 0.0574
Next Token :  max, Posbility: 0.0835
Next Token :  , Posbility: 0.6992
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0151
Next Token : f, Posbility: 0.0151
Next Token : agg, Posbility: 0.0151
Next Token : y, Posbility: 0.0869
Next Token : x, Posbility: 0.7266
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0022
Next Token : ,, Posbility: 0.0037
Next Token : _, Posbility: 0.0078
Next Token :  =, Posbility: 0.0742
Next Token : s, Posbility: 0.9062
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0010
Next Token : ', Posbility: 0.0027
Next Token : ,, Posbility: 0.0051
Next Token : _, Posbility: 0.0123
Next Token :  =, Posbility: 0.9727
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0002
Next Token :  String, Posbility: 0.0003
Next Token :  [, Posbility: 0.0022
Next Token : 
, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0009
Next Token : Array, Posbility: 0.0019
Next Token : (, Posbility: 0.0024
Next Token : x, Posbility: 0.0123
Next Token : List, Posbility: 0.9766
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : filter, Posbility: 0.0459
Next Token : sort, Posbility: 0.0859
Next Token : fold, Posbility: 0.1250
Next Token : map, Posbility: 0.1816
Next Token : rev, Posbility: 0.3848
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : ., Posbility: 0.0002
Next Token :  ~, Posbility: 0.0002
Next Token : _, Posbility: 0.0041
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0009
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token :   , Posbility: 0.0008
Next Token :  , Posbility: 0.0028
Next Token : 

, Posbility: 0.0067
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0110
Next Token : match, Posbility: 0.0266
Next Token : x, Posbility: 0.0723
Next Token : List, Posbility: 0.1523
Next Token : let, Posbility: 0.6836
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0273
Next Token :  acc, Posbility: 0.0352
Next Token :  rec, Posbility: 0.0398
Next Token :  max, Posbility: 0.0845
Next Token :  , Posbility: 0.7070
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : m, Posbility: 0.0121
Next Token : f, Posbility: 0.0156
Next Token : (, Posbility: 0.0258
Next Token : y, Posbility: 0.0698
Next Token : x, Posbility: 0.7500
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0023
Next Token : ,, Posbility: 0.0029
Next Token : _, Posbility: 0.0061
Next Token :  =, Posbility: 0.0747
Next Token : s, Posbility: 0.9102
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0015
Next Token : ', Posbility: 0.0035
Next Token : ,, Posbility: 0.0065
Next Token : _, Posbility: 0.0138
Next Token :  =, Posbility: 0.9688
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0004
Next Token :  String, Posbility: 0.0004
Next Token :  [, Posbility: 0.0040
Next Token : 
, Posbility: 0.0178
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0011
Next Token : Array, Posbility: 0.0015
Next Token : (, Posbility: 0.0035
Next Token : x, Posbility: 0.0108
Next Token : List, Posbility: 0.9766
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sort, Posbility: 0.0265
Next Token : filter, Posbility: 0.0339
Next Token : rev, Posbility: 0.0437
Next Token : fold, Posbility: 0.1348
Next Token : map, Posbility: 0.6055
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0019
Next Token :  float, Posbility: 0.0021
Next Token :  ((, Posbility: 0.0045
Next Token : i, Posbility: 0.0095
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0033
Next Token : List, Posbility: 0.0115
Next Token : f, Posbility: 0.0131
Next Token : x, Posbility: 0.0354
Next Token : (, Posbility: 0.9141
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : List, Posbility: 0.0007
Next Token : fn, Posbility: 0.0008
Next Token : function, Posbility: 0.0012
Next Token : +, Posbility: 0.0019
Next Token : fun, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0011
Next Token :  a, Posbility: 0.0040
Next Token :  i, Posbility: 0.0045
Next Token :  v, Posbility: 0.0084
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0046
Next Token : f, Posbility: 0.0046
Next Token : y, Posbility: 0.0339
Next Token : (, Posbility: 0.2520
Next Token : x, Posbility: 0.6836
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token : x, Posbility: 0.0004
Next Token : s, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 0.0004
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0087
Next Token :  Math, Posbility: 0.0128
Next Token :  1.0, Posbility: 0.0164
Next Token :  1, Posbility: 0.0270
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0311
Next Token : if, Posbility: 0.0513
Next Token : (, Posbility: 0.0747
Next Token : -, Posbility: 0.0845
Next Token : x, Posbility: 0.7070
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0128
Next Token : ), Posbility: 0.0571
Next Token :  +, Posbility: 0.0732
Next Token :  *, Posbility: 0.2559
Next Token :  , Posbility: 0.5430
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ^, Posbility: 0.0103
Next Token : <, Posbility: 0.0150
Next Token : >, Posbility: 0.0762
Next Token : -, Posbility: 0.1611
Next Token : /, Posbility: 0.7188
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0117
Next Token :  float, Posbility: 0.0405
Next Token :  2.0, Posbility: 0.0522
Next Token :  2), Posbility: 0.1416
Next Token :  , Posbility: 0.6367
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0298
Next Token : Int, Posbility: 0.0298
Next Token : x, Posbility: 0.1177
Next Token : (, Posbility: 0.3203
Next Token : List, Posbility: 0.3613
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : Helpers, Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : Length, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0010
Next Token : size, Posbility: 0.0027
Next Token : fold, Posbility: 0.0051
Next Token : count, Posbility: 0.0121
Next Token : length, Posbility: 0.9688
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0018
Next Token : _, Posbility: 0.0038
Next Token : (, Posbility: 0.0170
Next Token : ), Posbility: 0.0464
Next Token :  , Posbility: 0.9297
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : ()), Posbility: 0.0000
Next Token : y, Posbility: 0.0002
Next Token : (, Posbility: 0.0110
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ), Posbility: 0.0179
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  in, Posbility: 0.0006
Next Token :  *, Posbility: 0.0008
Next Token :  +, Posbility: 0.0015
Next Token :  , Posbility: 0.0046
Next Token : ), Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  , Posbility: 0.0005
Next Token :  |, Posbility: 0.0009
Next Token : 
, Posbility: 0.0059
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0005
Next Token :  , Posbility: 0.0015
Next Token : 

, Posbility: 0.0052
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :  , Posbility: 0.0041
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0074
Next Token : match, Posbility: 0.0139
Next Token : x, Posbility: 0.0801
Next Token : List, Posbility: 0.1914
Next Token : let, Posbility: 0.6680
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0134
Next Token :  rec, Posbility: 0.0194
Next Token :  acc, Posbility: 0.0194
Next Token :  max, Posbility: 0.0679
Next Token :  , Posbility: 0.8281
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : agg, Posbility: 0.0060
Next Token : (, Posbility: 0.0078
Next Token : f, Posbility: 0.0088
Next Token : y, Posbility: 0.0239
Next Token : x, Posbility: 0.8945
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0007
Next Token : ,, Posbility: 0.0011
Next Token : _, Posbility: 0.0018
Next Token :  =, Posbility: 0.0598
Next Token : s, Posbility: 0.9336
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0005
Next Token : ,, Posbility: 0.0008
Next Token : ', Posbility: 0.0012
Next Token : _, Posbility: 0.0059
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  [, Posbility: 0.0012
Next Token : 
, Posbility: 0.0052
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0004
Next Token : Array, Posbility: 0.0008
Next Token : (, Posbility: 0.0019
Next Token : x, Posbility: 0.0052
Next Token : List, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : Ext, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : max, Posbility: 0.0250
Next Token : fold, Posbility: 0.0771
Next Token : sort, Posbility: 0.1123
Next Token : map, Posbility: 0.1445
Next Token : rev, Posbility: 0.5039
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0000
Next Token : ., Posbility: 0.0001
Next Token : _, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  and, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (*, Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0010
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0028
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0096
Next Token : match, Posbility: 0.0203
Next Token : x, Posbility: 0.0625
Next Token : List, Posbility: 0.1924
Next Token : let, Posbility: 0.6719
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0155
Next Token :  rec, Posbility: 0.0155
Next Token :  acc, Posbility: 0.0176
Next Token :  max, Posbility: 0.0540
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : agg, Posbility: 0.0066
Next Token : f, Posbility: 0.0109
Next Token : (, Posbility: 0.0123
Next Token : y, Posbility: 0.0378
Next Token : x, Posbility: 0.8633
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0008
Next Token : ,, Posbility: 0.0011
Next Token : _, Posbility: 0.0018
Next Token :  =, Posbility: 0.0752
Next Token : s, Posbility: 0.9180
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0007
Next Token : ,, Posbility: 0.0010
Next Token : ', Posbility: 0.0013
Next Token : _, Posbility: 0.0067
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Math, Posbility: 0.0002
Next Token :  ((, Posbility: 0.0002
Next Token :  [, Posbility: 0.0024
Next Token : 
, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0008
Next Token : Array, Posbility: 0.0009
Next Token : (, Posbility: 0.0031
Next Token : x, Posbility: 0.0052
Next Token : List, Posbility: 0.9844
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Ext, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sort, Posbility: 0.0234
Next Token : reduce, Posbility: 0.0302
Next Token : max, Posbility: 0.0342
Next Token : fold, Posbility: 0.1191
Next Token : map, Posbility: 0.6875
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0013
Next Token :  float, Posbility: 0.0024
Next Token : i, Posbility: 0.0031
Next Token :  ((, Posbility: 0.0040
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0023
Next Token : f, Posbility: 0.0056
Next Token : x, Posbility: 0.0195
Next Token : List, Posbility: 0.0195
Next Token : (, Posbility: 0.9414
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : fn, Posbility: 0.0005
Next Token : +, Posbility: 0.0008
Next Token : List, Posbility: 0.0012
Next Token : function, Posbility: 0.0012
Next Token : fun, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0007
Next Token :  i, Posbility: 0.0007
Next Token :  ((, Posbility: 0.0007
Next Token :  v, Posbility: 0.0019
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0009
Next Token : _, Posbility: 0.0023
Next Token : y, Posbility: 0.0063
Next Token : (, Posbility: 0.0469
Next Token : x, Posbility: 0.9375
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0002
Next Token : ->, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : s, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1.0, Posbility: 0.0078
Next Token :  1, Posbility: 0.0129
Next Token :  Math, Posbility: 0.0166
Next Token :  max, Posbility: 0.0188
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0228
Next Token : (, Posbility: 0.0427
Next Token : if, Posbility: 0.0549
Next Token : List, Posbility: 0.1689
Next Token : x, Posbility: 0.6680
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ), Posbility: 0.0050
Next Token : ., Posbility: 0.0106
Next Token :  +, Posbility: 0.1289
Next Token :  *, Posbility: 0.3086
Next Token :  , Posbility: 0.5078
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0215
Next Token : ^, Posbility: 0.0215
Next Token : >, Posbility: 0.1240
Next Token : -, Posbility: 0.2617
Next Token : /, Posbility: 0.5547
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0049
Next Token :  float, Posbility: 0.0071
Next Token :  sum, Posbility: 0.0092
Next Token :  max, Posbility: 0.0220
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0032
Next Token : Float, Posbility: 0.0052
Next Token : x, Posbility: 0.0496
Next Token : (, Posbility: 0.1348
Next Token : List, Posbility: 0.7734
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0049
Next Token : count, Posbility: 0.0063
Next Token : max, Posbility: 0.0092
Next Token : sum, Posbility: 0.0220
Next Token : length, Posbility: 0.9336
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0016
Next Token :  *, Posbility: 0.0021
Next Token : (, Posbility: 0.0104
Next Token : ), Posbility: 0.0322
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ^, Posbility: 0.0002
Next Token : y, Posbility: 0.0014
Next Token : List, Posbility: 0.0135
Next Token : (, Posbility: 0.0366
Next Token : x, Posbility: 0.9453
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token :  +, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : ), Posbility: 0.0052
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  in, Posbility: 0.0021
Next Token :  , Posbility: 0.0058
Next Token :  *, Posbility: 0.0074
Next Token :  +, Posbility: 0.0108
Next Token : ), Posbility: 0.9688
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0013
Next Token : List, Posbility: 0.0015
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :  |, Posbility: 0.0008
Next Token : 
, Posbility: 0.0036
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0008
Next Token :  , Posbility: 0.0028
Next Token : 

, Posbility: 0.0085
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0076
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0110
Next Token : match, Posbility: 0.0125
Next Token : x, Posbility: 0.0811
Next Token : List, Posbility: 0.1719
Next Token : let, Posbility: 0.6797
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0098
Next Token :  acc, Posbility: 0.0126
Next Token :  rec, Posbility: 0.0161
Next Token :  max, Posbility: 0.0388
Next Token :  , Posbility: 0.8828
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : agg, Posbility: 0.0048
Next Token : (, Posbility: 0.0062
Next Token : f, Posbility: 0.0079
Next Token : y, Posbility: 0.0168
Next Token : x, Posbility: 0.9180
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0005
Next Token : ,, Posbility: 0.0007
Next Token : _, Posbility: 0.0014
Next Token :  =, Posbility: 0.0471
Next Token : s, Posbility: 0.9492
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token : ,, Posbility: 0.0005
Next Token : ', Posbility: 0.0008
Next Token : _, Posbility: 0.0041
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0002
Next Token :  [], Posbility: 0.0002
Next Token :  [, Posbility: 0.0017
Next Token : 
, Posbility: 0.0059
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0004
Next Token : Array, Posbility: 0.0005
Next Token : (, Posbility: 0.0024
Next Token : x, Posbility: 0.0067
Next Token : List, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : max, Posbility: 0.0144
Next Token : fold, Posbility: 0.0503
Next Token : sort, Posbility: 0.0645
Next Token : map, Posbility: 0.2891
Next Token : rev, Posbility: 0.4766
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token : map, Posbility: 0.0000
Next Token : _, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.0022
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0022
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0098
Next Token : match, Posbility: 0.0125
Next Token : x, Posbility: 0.0386
Next Token : List, Posbility: 0.1348
Next Token : let, Posbility: 0.7734
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0070
Next Token :  acc, Posbility: 0.0079
Next Token :  sum, Posbility: 0.0101
Next Token :  max, Posbility: 0.0311
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : agg, Posbility: 0.0043
Next Token : (, Posbility: 0.0070
Next Token : f, Posbility: 0.0070
Next Token : y, Posbility: 0.0216
Next Token : x, Posbility: 0.9219
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0004
Next Token : ,, Posbility: 0.0005
Next Token : _, Posbility: 0.0011
Next Token :  =, Posbility: 0.0371
Next Token : s, Posbility: 0.9609
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0005
Next Token : ,, Posbility: 0.0005
Next Token : ', Posbility: 0.0008
Next Token : _, Posbility: 0.0036
Next Token :  =, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0002
Next Token :  [, Posbility: 0.0015
Next Token : 
, Posbility: 0.0067
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0005
Next Token : Array, Posbility: 0.0005
Next Token : (, Posbility: 0.0031
Next Token : x, Posbility: 0.0052
Next Token : List, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sort, Posbility: 0.0096
Next Token : max, Posbility: 0.0109
Next Token : reduce, Posbility: 0.0123
Next Token : fold, Posbility: 0.0488
Next Token : map, Posbility: 0.8672
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  float, Posbility: 0.0012
Next Token : i, Posbility: 0.0013
Next Token :  ((, Posbility: 0.0036
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0005
Next Token : f, Posbility: 0.0035
Next Token : List, Posbility: 0.0065
Next Token : x, Posbility: 0.0139
Next Token : (, Posbility: 0.9688
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : let, Posbility: 0.0004
Next Token : List, Posbility: 0.0004
Next Token : +, Posbility: 0.0007
Next Token : function, Posbility: 0.0009
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0003
Next Token :  i, Posbility: 0.0003
Next Token :  v, Posbility: 0.0005
Next Token :  ((, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0003
Next Token : _, Posbility: 0.0023
Next Token : y, Posbility: 0.0023
Next Token : (, Posbility: 0.0471
Next Token : x, Posbility: 0.9453
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token : ->, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : s, Posbility: 0.0009
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : y, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1.0, Posbility: 0.0024
Next Token :  1, Posbility: 0.0040
Next Token :  Math, Posbility: 0.0040
Next Token :  max, Posbility: 0.0045
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0063
Next Token : if, Posbility: 0.0103
Next Token : (, Posbility: 0.0150
Next Token : List, Posbility: 0.0281
Next Token : x, Posbility: 0.9297
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  %, Posbility: 0.0013
Next Token : ), Posbility: 0.0036
Next Token :  +, Posbility: 0.0435
Next Token :  *, Posbility: 0.0718
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0011
Next Token : ^, Posbility: 0.0011
Next Token : >, Posbility: 0.0040
Next Token : -, Posbility: 0.0228
Next Token : /, Posbility: 0.9688
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0006
Next Token :  2), Posbility: 0.0007
Next Token :  sum, Posbility: 0.0008
Next Token :  max, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0004
Next Token : length, Posbility: 0.0011
Next Token : x, Posbility: 0.0074
Next Token : (, Posbility: 0.0177
Next Token : List, Posbility: 0.9688
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0001
Next Token : max, Posbility: 0.0003
Next Token : count, Posbility: 0.0006
Next Token : sum, Posbility: 0.0006
Next Token : length, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : ), Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0002
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0008
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0005
Next Token :  *, Posbility: 0.0006
Next Token :  +, Posbility: 0.0009
Next Token :  in, Posbility: 0.0010
Next Token : ), Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  for, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0002
Next Token :  |, Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token : 
, Posbility: 0.0046
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0005
Next Token :  , Posbility: 0.0022
Next Token : 

, Posbility: 0.0085
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0076
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0088
Next Token : (, Posbility: 0.0099
Next Token : x, Posbility: 0.0505
Next Token : List, Posbility: 0.1069
Next Token : let, Posbility: 0.7930
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0044
Next Token :  rec, Posbility: 0.0049
Next Token :  sum, Posbility: 0.0049
Next Token :  max, Posbility: 0.0197
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : agg, Posbility: 0.0024
Next Token : (, Posbility: 0.0039
Next Token : f, Posbility: 0.0039
Next Token : y, Posbility: 0.0083
Next Token : x, Posbility: 0.9570
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0003
Next Token : ,, Posbility: 0.0004
Next Token : _, Posbility: 0.0007
Next Token :  =, Posbility: 0.0293
Next Token : s, Posbility: 0.9688
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : ', Posbility: 0.0003
Next Token : _, Posbility: 0.0019
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  sort, Posbility: 0.0001
Next Token :  [, Posbility: 0.0008
Next Token : 
, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0002
Next Token : Map, Posbility: 0.0002
Next Token : (, Posbility: 0.0013
Next Token : x, Posbility: 0.0041
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : reverse, Posbility: 0.0090
Next Token : fold, Posbility: 0.0090
Next Token : sort, Posbility: 0.0150
Next Token : map, Posbility: 0.1104
Next Token : rev, Posbility: 0.8164
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0022
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0004
Next Token :  , Posbility: 0.0015
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0091
Next Token : match, Posbility: 0.0103
Next Token : x, Posbility: 0.0280
Next Token : List, Posbility: 0.1108
Next Token : let, Posbility: 0.8164
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0044
Next Token :  acc, Posbility: 0.0049
Next Token :  sum, Posbility: 0.0072
Next Token :  max, Posbility: 0.0195
Next Token :  , Posbility: 0.9414
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : agg, Posbility: 0.0027
Next Token : f, Posbility: 0.0044
Next Token : (, Posbility: 0.0050
Next Token : y, Posbility: 0.0120
Next Token : x, Posbility: 0.9531
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0003
Next Token : 0, Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token :  =, Posbility: 0.0229
Next Token : s, Posbility: 0.9766
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token : ', Posbility: 0.0004
Next Token : _, Posbility: 0.0019
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Math, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0002
Next Token :  [, Posbility: 0.0009
Next Token : 
, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0002
Next Token : Map, Posbility: 0.0002
Next Token : (, Posbility: 0.0017
Next Token : x, Posbility: 0.0032
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : filter, Posbility: 0.0038
Next Token : max, Posbility: 0.0044
Next Token : reduce, Posbility: 0.0063
Next Token : fold, Posbility: 0.0172
Next Token : map, Posbility: 0.9414
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  float, Posbility: 0.0004
Next Token : 
, Posbility: 0.0005
Next Token : i, Posbility: 0.0005
Next Token :  ((, Posbility: 0.0019
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0002
Next Token : f, Posbility: 0.0015
Next Token : List, Posbility: 0.0024
Next Token : x, Posbility: 0.0067
Next Token : (, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : let, Posbility: 0.0002
Next Token : fn, Posbility: 0.0002
Next Token : +, Posbility: 0.0003
Next Token : function, Posbility: 0.0006
Next Token : fun, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0001
Next Token :  i, Posbility: 0.0001
Next Token :  v, Posbility: 0.0002
Next Token :  ((, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : _, Posbility: 0.0005
Next Token : y, Posbility: 0.0005
Next Token : (, Posbility: 0.0293
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0001
Next Token : ->, Posbility: 0.0001
Next Token : x, Posbility: 0.0001
Next Token : s, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : /, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1.0, Posbility: 0.0009
Next Token :  Math, Posbility: 0.0012
Next Token :  max, Posbility: 0.0013
Next Token :  1, Posbility: 0.0017
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0021
Next Token : if, Posbility: 0.0027
Next Token : (, Posbility: 0.0074
Next Token : List, Posbility: 0.0084
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  %, Posbility: 0.0006
Next Token : ), Posbility: 0.0018
Next Token :  *, Posbility: 0.0223
Next Token :  +, Posbility: 0.0223
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0002
Next Token : ^, Posbility: 0.0003
Next Token : >, Posbility: 0.0005
Next Token : -, Posbility: 0.0067
Next Token : /, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0001
Next Token :  sum, Posbility: 0.0002
Next Token :  2), Posbility: 0.0002
Next Token :  max, Posbility: 0.0003
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : length, Posbility: 0.0003
Next Token : x, Posbility: 0.0028
Next Token : (, Posbility: 0.0046
Next Token : List, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0000
Next Token : max, Posbility: 0.0000
Next Token : sum, Posbility: 0.0001
Next Token : count, Posbility: 0.0001
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ), Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token :  *, Posbility: 0.0003
Next Token :  +, Posbility: 0.0003
Next Token :  in, Posbility: 0.0006
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 0.0052
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0003
Next Token :  , Posbility: 0.0015
Next Token : 

, Posbility: 0.0059
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0052
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0050
Next Token : (, Posbility: 0.0093
Next Token : x, Posbility: 0.0327
Next Token : List, Posbility: 0.0889
Next Token : let, Posbility: 0.8398
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0017
Next Token :  rec, Posbility: 0.0019
Next Token :  sum, Posbility: 0.0019
Next Token :  max, Posbility: 0.0075
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : agg, Posbility: 0.0009
Next Token : f, Posbility: 0.0019
Next Token : (, Posbility: 0.0024
Next Token : y, Posbility: 0.0040
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 0.0140
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0007
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0001
Next Token :  sort, Posbility: 0.0001
Next Token :  [, Posbility: 0.0003
Next Token : 
, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : Map, Posbility: 0.0001
Next Token : (, Posbility: 0.0007
Next Token : x, Posbility: 0.0025
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Ext, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : max, Posbility: 0.0023
Next Token : reverse, Posbility: 0.0062
Next Token : sort, Posbility: 0.0101
Next Token : map, Posbility: 0.0454
Next Token : rev, Posbility: 0.9141
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (*, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0013
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0074
Next Token : (, Posbility: 0.0095
Next Token : x, Posbility: 0.0227
Next Token : List, Posbility: 0.0894
Next Token : let, Posbility: 0.8516
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0027
Next Token :  acc, Posbility: 0.0035
Next Token :  sum, Posbility: 0.0045
Next Token :  max, Posbility: 0.0137
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : agg, Posbility: 0.0011
Next Token : f, Posbility: 0.0021
Next Token : (, Posbility: 0.0024
Next Token : y, Posbility: 0.0051
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : ,, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 0.0179
Next Token : s, Posbility: 0.9805
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token : ', Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0010
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0001
Next Token :  [, Posbility: 0.0004
Next Token : 
, Posbility: 0.0022
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : Map, Posbility: 0.0002
Next Token : (, Posbility: 0.0013
Next Token : x, Posbility: 0.0025
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : filter, Posbility: 0.0024
Next Token : sort, Posbility: 0.0027
Next Token : reduce, Posbility: 0.0031
Next Token : fold, Posbility: 0.0065
Next Token : map, Posbility: 0.9727
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0002
Next Token : i, Posbility: 0.0003
Next Token : 
, Posbility: 0.0003
Next Token :  ((, Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Int, Posbility: 0.0001
Next Token : f, Posbility: 0.0009
Next Token : List, Posbility: 0.0012
Next Token : x, Posbility: 0.0041
Next Token : (, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : let, Posbility: 0.0001
Next Token : fn, Posbility: 0.0001
Next Token : +, Posbility: 0.0002
Next Token : function, Posbility: 0.0003
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0001
Next Token :  {, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : y, Posbility: 0.0005
Next Token : _, Posbility: 0.0009
Next Token : (, Posbility: 0.0293
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : s, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : /, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1.0, Posbility: 0.0004
Next Token :  Math, Posbility: 0.0004
Next Token :  max, Posbility: 0.0005
Next Token :  1, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0010
Next Token : if, Posbility: 0.0013
Next Token : List, Posbility: 0.0040
Next Token : (, Posbility: 0.0046
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0003
Next Token : ), Posbility: 0.0009
Next Token :  *, Posbility: 0.0085
Next Token :  +, Posbility: 0.0109
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0001
Next Token : ^, Posbility: 0.0001
Next Token : >, Posbility: 0.0001
Next Token : -, Posbility: 0.0025
Next Token : /, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0001
Next Token :  sum, Posbility: 0.0001
Next Token :  max, Posbility: 0.0001
Next Token :  2), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : length, Posbility: 0.0002
Next Token : x, Posbility: 0.0013
Next Token : (, Posbility: 0.0025
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ), Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  +, Posbility: 0.0002
Next Token :  in, Posbility: 0.0005
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  =, Posbility: 0.0002
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 0.0052
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0012
Next Token : 

, Posbility: 0.0052
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :  , Posbility: 0.0041
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0051
Next Token : (, Posbility: 0.0095
Next Token : x, Posbility: 0.0334
Next Token : List, Posbility: 0.0708
Next Token : let, Posbility: 0.8594
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0010
Next Token :  acc, Posbility: 0.0012
Next Token :  sum, Posbility: 0.0013
Next Token :  max, Posbility: 0.0046
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : agg, Posbility: 0.0007
Next Token : f, Posbility: 0.0013
Next Token : (, Posbility: 0.0015
Next Token : y, Posbility: 0.0022
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0097
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  sort, Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0001
Next Token : if, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 0.0022
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : max, Posbility: 0.0011
Next Token : sort, Posbility: 0.0064
Next Token : reverse, Posbility: 0.0064
Next Token : map, Posbility: 0.0286
Next Token : rev, Posbility: 0.9453
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0006
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0041
Next Token : (, Posbility: 0.0087
Next Token : x, Posbility: 0.0161
Next Token : List, Posbility: 0.0723
Next Token : let, Posbility: 0.8828
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0013
Next Token :  acc, Posbility: 0.0019
Next Token :  sum, Posbility: 0.0027
Next Token :  max, Posbility: 0.0084
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : agg, Posbility: 0.0008
Next Token : f, Posbility: 0.0017
Next Token : (, Posbility: 0.0022
Next Token : y, Posbility: 0.0040
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 0.0110
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0007
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  ((, Posbility: 0.0001
Next Token :  [, Posbility: 0.0004
Next Token : 
, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : Map, Posbility: 0.0001
Next Token : (, Posbility: 0.0010
Next Token : x, Posbility: 0.0022
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : filter, Posbility: 0.0015
Next Token : sort, Posbility: 0.0017
Next Token : reduce, Posbility: 0.0022
Next Token : fold, Posbility: 0.0040
Next Token : map, Posbility: 0.9805
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : i, Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  ((, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0001
Next Token : f, Posbility: 0.0005
Next Token : List, Posbility: 0.0007
Next Token : x, Posbility: 0.0025
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : let, Posbility: 0.0001
Next Token : fn, Posbility: 0.0001
Next Token : +, Posbility: 0.0001
Next Token : function, Posbility: 0.0003
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  {, Posbility: 0.0001
Next Token :  v, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0001
Next Token : y, Posbility: 0.0003
Next Token : _, Posbility: 0.0005
Next Token : (, Posbility: 0.0140
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Math, Posbility: 0.0002
Next Token :  max, Posbility: 0.0003
Next Token :  1.0, Posbility: 0.0003
Next Token :  1, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0005
Next Token : if, Posbility: 0.0005
Next Token : List, Posbility: 0.0022
Next Token : (, Posbility: 0.0032
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0002
Next Token : ), Posbility: 0.0007
Next Token :  *, Posbility: 0.0059
Next Token :  +, Posbility: 0.0075
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : >, Posbility: 0.0000
Next Token : ^, Posbility: 0.0001
Next Token : -, Posbility: 0.0012
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token :  sum, Posbility: 0.0000
Next Token :  max, Posbility: 0.0000
Next Token :  2), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : length, Posbility: 0.0001
Next Token : x, Posbility: 0.0009
Next Token : (, Posbility: 0.0013
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0003
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 0.0041
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0041
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :  , Posbility: 0.0032
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0028
Next Token : (, Posbility: 0.0087
Next Token : x, Posbility: 0.0236
Next Token : List, Posbility: 0.0640
Next Token : let, Posbility: 0.8828
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0006
Next Token :  acc, Posbility: 0.0007
Next Token :  sum, Posbility: 0.0010
Next Token :  max, Posbility: 0.0028
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : agg, Posbility: 0.0005
Next Token : f, Posbility: 0.0010
Next Token : (, Posbility: 0.0012
Next Token : y, Posbility: 0.0017
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0085
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  sort, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 0.0015
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : max, Posbility: 0.0009
Next Token : sort, Posbility: 0.0050
Next Token : reverse, Posbility: 0.0050
Next Token : map, Posbility: 0.0176
Next Token : rev, Posbility: 0.9609
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0032
Next Token : (, Posbility: 0.0087
Next Token : x, Posbility: 0.0162
Next Token : List, Posbility: 0.0728
Next Token : let, Posbility: 0.8828
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0010
Next Token :  acc, Posbility: 0.0013
Next Token :  sum, Posbility: 0.0019
Next Token :  max, Posbility: 0.0058
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : agg, Posbility: 0.0007
Next Token : f, Posbility: 0.0015
Next Token : (, Posbility: 0.0017
Next Token : y, Posbility: 0.0031
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : ,, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0076
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0001
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0005
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token :  [, Posbility: 0.0003
Next Token : 
, Posbility: 0.0010
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0001
Next Token : Map, Posbility: 0.0001
Next Token : (, Posbility: 0.0008
Next Token : x, Posbility: 0.0019
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : filter, Posbility: 0.0009
Next Token : reduce, Posbility: 0.0013
Next Token : sort, Posbility: 0.0015
Next Token : fold, Posbility: 0.0022
Next Token : map, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0002
Next Token : List, Posbility: 0.0004
Next Token : x, Posbility: 0.0013
Next Token : (, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : let, Posbility: 0.0001
Next Token : +, Posbility: 0.0001
Next Token : fn, Posbility: 0.0001
Next Token : function, Posbility: 0.0002
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0002
Next Token : _, Posbility: 0.0004
Next Token : (, Posbility: 0.0110
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Math, Posbility: 0.0002
Next Token :  1.0, Posbility: 0.0002
Next Token :  max, Posbility: 0.0002
Next Token :  1, Posbility: 0.0004
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0003
Next Token : if, Posbility: 0.0004
Next Token : List, Posbility: 0.0017
Next Token : (, Posbility: 0.0028
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0001
Next Token : ), Posbility: 0.0004
Next Token :  *, Posbility: 0.0032
Next Token :  +, Posbility: 0.0046
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : >, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : -, Posbility: 0.0007
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  max, Posbility: 0.0000
Next Token :  2), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : x, Posbility: 0.0005
Next Token : (, Posbility: 0.0008
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token :  +, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0003
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 0.0041
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : 

, Posbility: 0.0032
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : let, Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :  , Posbility: 0.0028
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0022
Next Token : (, Posbility: 0.0079
Next Token : x, Posbility: 0.0166
Next Token : List, Posbility: 0.0510
Next Token : let, Posbility: 0.9062
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0003
Next Token :  acc, Posbility: 0.0004
Next Token :  sum, Posbility: 0.0006
Next Token :  max, Posbility: 0.0019
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0002
Next Token : f, Posbility: 0.0007
Next Token : (, Posbility: 0.0009
Next Token : y, Posbility: 0.0013
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0046
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  sort, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0013
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : max, Posbility: 0.0007
Next Token : sort, Posbility: 0.0051
Next Token : reverse, Posbility: 0.0051
Next Token : map, Posbility: 0.0176
Next Token : rev, Posbility: 0.9609
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0015
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0025
Next Token : (, Posbility: 0.0069
Next Token : x, Posbility: 0.0114
Next Token : List, Posbility: 0.0581
Next Token : let, Posbility: 0.9102
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0008
Next Token :  acc, Posbility: 0.0009
Next Token :  sum, Posbility: 0.0017
Next Token :  max, Posbility: 0.0031
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : agg, Posbility: 0.0004
Next Token : f, Posbility: 0.0009
Next Token : (, Posbility: 0.0012
Next Token : y, Posbility: 0.0017
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 0, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0059
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token :  [, Posbility: 0.0002
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0000
Next Token : Map, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 0.0012
Next Token : List, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : filter, Posbility: 0.0007
Next Token : sort, Posbility: 0.0010
Next Token : reduce, Posbility: 0.0010
Next Token : fold, Posbility: 0.0015
Next Token : map, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0002
Next Token : List, Posbility: 0.0002
Next Token : x, Posbility: 0.0012
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : +, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : fn, Posbility: 0.0001
Next Token : function, Posbility: 0.0002
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token : (, Posbility: 0.0067
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Math, Posbility: 0.0001
Next Token :  max, Posbility: 0.0001
Next Token :  1.0, Posbility: 0.0001
Next Token :  1, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0002
Next Token : if, Posbility: 0.0003
Next Token : List, Posbility: 0.0013
Next Token : (, Posbility: 0.0022
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0001
Next Token : ), Posbility: 0.0003
Next Token :  *, Posbility: 0.0019
Next Token :  +, Posbility: 0.0028
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : >, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : -, Posbility: 0.0006
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  max, Posbility: 0.0000
Next Token :  2), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : x, Posbility: 0.0004
Next Token : (, Posbility: 0.0006
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 0.0028
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :  , Posbility: 0.0022
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0016
Next Token : (, Posbility: 0.0070
Next Token : x, Posbility: 0.0148
Next Token : List, Posbility: 0.0457
Next Token : let, Posbility: 0.9180
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0003
Next Token :  acc, Posbility: 0.0003
Next Token :  sum, Posbility: 0.0004
Next Token :  max, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : agg, Posbility: 0.0003
Next Token : f, Posbility: 0.0007
Next Token : (, Posbility: 0.0008
Next Token : y, Posbility: 0.0010
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0041
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sort, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0010
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : concat, Posbility: 0.0004
Next Token : reverse, Posbility: 0.0040
Next Token : sort, Posbility: 0.0051
Next Token : map, Posbility: 0.0108
Next Token : rev, Posbility: 0.9727
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0015
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0020
Next Token : (, Posbility: 0.0070
Next Token : x, Posbility: 0.0090
Next Token : List, Posbility: 0.0518
Next Token : let, Posbility: 0.9180
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0005
Next Token :  acc, Posbility: 0.0006
Next Token :  sum, Posbility: 0.0010
Next Token :  max, Posbility: 0.0028
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : f, Posbility: 0.0006
Next Token : (, Posbility: 0.0010
Next Token : y, Posbility: 0.0015
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0076
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0000
Next Token : Map, Posbility: 0.0001
Next Token : (, Posbility: 0.0005
Next Token : x, Posbility: 0.0010
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : filter, Posbility: 0.0005
Next Token : reduce, Posbility: 0.0005
Next Token : fold, Posbility: 0.0008
Next Token : sort, Posbility: 0.0009
Next Token : map, Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0002
Next Token : List, Posbility: 0.0002
Next Token : x, Posbility: 0.0010
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : +, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0041
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0001
Next Token :  sum, Posbility: 0.0001
Next Token :  1.0, Posbility: 0.0001
Next Token :  1, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : List, Posbility: 0.0008
Next Token : (, Posbility: 0.0015
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0001
Next Token : ), Posbility: 0.0003
Next Token :  *, Posbility: 0.0017
Next Token :  +, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : -, Posbility: 0.0003
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  max, Posbility: 0.0000
Next Token :  2), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : x, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : v, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 

, Posbility: 0.0002
Next Token : 
, Posbility: 0.0036
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0022
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0014
Next Token : (, Posbility: 0.0071
Next Token : x, Posbility: 0.0132
Next Token : List, Posbility: 0.0408
Next Token : let, Posbility: 0.9258
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0002
Next Token :  acc, Posbility: 0.0003
Next Token :  sum, Posbility: 0.0004
Next Token :  max, Posbility: 0.0008
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : f, Posbility: 0.0004
Next Token : (, Posbility: 0.0005
Next Token : y, Posbility: 0.0007
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0032
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sort, Posbility: 0.0000
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0009
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : concat, Posbility: 0.0004
Next Token : sort, Posbility: 0.0031
Next Token : reverse, Posbility: 0.0040
Next Token : map, Posbility: 0.0109
Next Token : rev, Posbility: 0.9766
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0015
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0016
Next Token : (, Posbility: 0.0063
Next Token : x, Posbility: 0.0091
Next Token : List, Posbility: 0.0461
Next Token : let, Posbility: 0.9297
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  rec, Posbility: 0.0004
Next Token :  acc, Posbility: 0.0004
Next Token :  sum, Posbility: 0.0009
Next Token :  max, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : f, Posbility: 0.0005
Next Token : (, Posbility: 0.0009
Next Token : y, Posbility: 0.0010
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0052
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0000
Next Token : Map, Posbility: 0.0001
Next Token : (, Posbility: 0.0004
Next Token : x, Posbility: 0.0009
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rev, Posbility: 0.0004
Next Token : reduce, Posbility: 0.0004
Next Token : sort, Posbility: 0.0006
Next Token : fold, Posbility: 0.0006
Next Token : map, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : 1, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : f, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : x, Posbility: 0.0007
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : +, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : fn, Posbility: 0.0000
Next Token : function, Posbility: 0.0001
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :  {, Posbility: 0.0000
Next Token :  v, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token : (, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : ->, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  max, Posbility: 0.0000
Next Token :  Math, Posbility: 0.0000
Next Token :  1.0, Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : List, Posbility: 0.0008
Next Token : (, Posbility: 0.0015
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : /, Posbility: 0.0001
Next Token : ), Posbility: 0.0002
Next Token :  *, Posbility: 0.0015
Next Token :  +, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token : <, Posbility: 0.0000
Next Token : ^, Posbility: 0.0000
Next Token : -, Posbility: 0.0003
Next Token : /, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  max, Posbility: 0.0000
Next Token :  2), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : x, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : Length, Posbility: 0.0000
Next Token : 2., Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : length, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  l, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : v, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  in, Posbility: 0.0002
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  for, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : 

, Posbility: 0.0003
Next Token : 
, Posbility: 0.0032
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : ;, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0022
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  
 score:False
Error type: noerr
---------------------------
Next Token : in, Posbility: 0.0014
Next Token : (, Posbility: 0.0063
Next Token : x, Posbility: 0.0118
Next Token : List, Posbility: 0.0361
Next Token : let, Posbility: 0.9336
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  rec, Posbility: 0.0002
Next Token :  acc, Posbility: 0.0002
Next Token :  sum, Posbility: 0.0003
Next Token :  max, Posbility: 0.0006
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0001
Next Token : f, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : y, Posbility: 0.0005
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let x
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0022
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  sort, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = 
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : Map, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0007
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List
 score:False
Error type: noerr
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.
 score:False
Error type: noerr
---------------------------
Next Token : concat, Posbility: 0.0002
Next Token : sort, Posbility: 0.0024
Next Token : reverse, Posbility: 0.0031
Next Token : map, Posbility: 0.0085
Next Token : rev, Posbility: 0.9805
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev 
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev x
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs
 score:False
Error type: noerr
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0012
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  
 score:False
Error type: noerr
---------------------------
Next Token : if, Posbility: 0.0014
Next Token : (, Posbility: 0.0062
Next Token : x, Posbility: 0.0090
Next Token : List, Posbility: 0.0520
Next Token : let, Posbility: 0.9219
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let
 score:False
Error type: noerr
---------------------------
Next Token :  rec, Posbility: 0.0003
Next Token :  acc, Posbility: 0.0003
Next Token :  sum, Posbility: 0.0009
Next Token :  max, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let 
 score:False
Error type: noerr
---------------------------
Next Token : n, Posbility: 0.0002
Next Token : f, Posbility: 0.0005
Next Token : (, Posbility: 0.0008
Next Token : y, Posbility: 0.0013
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let x
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ,, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0032
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs =
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to calculate the maximum aggregate from the list of tuples. *)
let max_aggregate xs =
  let xs = List.sort xs in
  let xs = List.rev xs in
  let xs = List.map (fun (x, y) -> x + y) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = List.map (fun x -> x / List.length xs) xs in
  let xs = List.rev xs in
  let xs = 
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>