code:
 (* Write a function to flatten a list and sum all of its elements. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  get, Posbility: 0.0025
Next Token :  list, Posbility: 0.0164
Next Token :  sum, Posbility: 0.0305
Next Token :  , Posbility: 0.4219
Next Token :  rec, Posbility: 0.4785
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fn, Posbility: 0.0039
Next Token :  loop, Posbility: 0.0154
Next Token :  list, Posbility: 0.0175
Next Token :  sum, Posbility: 0.0537
Next Token :  , Posbility: 0.8398
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : add, Posbility: 0.0143
Next Token : f, Posbility: 0.0304
Next Token : fold, Posbility: 0.0391
Next Token : flat, Posbility: 0.0825
Next Token : flatten, Posbility: 0.6914
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0140
Next Token :  l, Posbility: 0.0140
Next Token :  =, Posbility: 0.2480
Next Token :  , Posbility: 0.3184
Next Token : _, Posbility: 0.3184
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0306
Next Token : helper, Posbility: 0.1211
Next Token : and, Posbility: 0.1377
Next Token : sum, Posbility: 0.1768
Next Token : list, Posbility: 0.2910
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0199
Next Token :  l, Posbility: 0.0698
Next Token : _, Posbility: 0.0894
Next Token :  =, Posbility: 0.1895
Next Token :  , Posbility: 0.5156
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0510
Next Token : ls, Posbility: 0.0579
Next Token : (, Posbility: 0.1226
Next Token : lst, Posbility: 0.2295
Next Token : x, Posbility: 0.2949
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0045
Next Token :  acc, Posbility: 0.0095
Next Token :  , Posbility: 0.0481
Next Token :  =, Posbility: 0.4551
Next Token : s, Posbility: 0.4551
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0020
Next Token :  [], Posbility: 0.0029
Next Token :  acc, Posbility: 0.0245
Next Token :  , Posbility: 0.0315
Next Token :  =, Posbility: 0.9180
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0026
Next Token :  function, Posbility: 0.0034
Next Token :  match, Posbility: 0.0679
Next Token :  , Posbility: 0.0874
Next Token : 
, Posbility: 0.8281
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0047
Next Token :    , Posbility: 0.0098
Next Token : 	, Posbility: 0.0126
Next Token :     , Posbility: 0.1748
Next Token :   , Posbility: 0.7812
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Match, Posbility: 0.0061
Next Token : List, Posbility: 0.0579
Next Token : if, Posbility: 0.0952
Next Token : let, Posbility: 0.1079
Next Token : match, Posbility: 0.7031
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token :   , Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  String, Posbility: 0.0017
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0006
Next Token : Seq, Posbility: 0.0008
Next Token : (, Posbility: 0.0030
Next Token : List, Posbility: 0.0471
Next Token : x, Posbility: 0.9453
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  @, Posbility: 0.0003
Next Token : 
, Posbility: 0.0015
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0035
Next Token :  , Posbility: 0.0035
Next Token :  [, Posbility: 0.0045
Next Token :  [], Posbility: 0.0200
Next Token : 
, Posbility: 0.9648
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0004
Next Token :       , Posbility: 0.0018
Next Token :    , Posbility: 0.0023
Next Token :     , Posbility: 0.0845
Next Token :   , Posbility: 0.9102
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : [, Posbility: 0.0155
Next Token : [], Posbility: 0.0255
Next Token : |, Posbility: 0.9570
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0014
Next Token :  , Posbility: 0.0171
Next Token :  nil, Posbility: 0.0171
Next Token :  [, Posbility: 0.0282
Next Token :  [], Posbility: 0.9336
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0049
Next Token :  |, Posbility: 0.0063
Next Token :    , Posbility: 0.0082
Next Token :  =>, Posbility: 0.0135
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token : -, Posbility: 0.0002
Next Token : â†’, Posbility: 0.0003
Next Token : ::, Posbility: 0.0010
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0124
Next Token :  0.0, Posbility: 0.0124
Next Token :  , Posbility: 0.0337
Next Token :  [], Posbility: 0.2490
Next Token :  0, Posbility: 0.6758
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token : L, Posbility: 0.0032
Next Token :   , Posbility: 0.0041
Next Token :  , Posbility: 0.0142
Next Token :  |, Posbility: 0.0820
Next Token : 
, Posbility: 0.8789
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : |[, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  el, Posbility: 0.0028
Next Token :  a, Posbility: 0.0076
Next Token :  [], Posbility: 0.0087
Next Token :  [, Posbility: 0.1738
Next Token :  , Posbility: 0.7773
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0177
Next Token : h, Posbility: 0.0425
Next Token : hd, Posbility: 0.0547
Next Token : _, Posbility: 0.0703
Next Token : x, Posbility: 0.7539
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0030
Next Token : :, Posbility: 0.0072
Next Token : s, Posbility: 0.0320
Next Token : ::, Posbility: 0.3047
Next Token :  , Posbility: 0.6445
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0001
Next Token : ^, Posbility: 0.0001
Next Token : ->, Posbility: 0.0004
Next Token : :, Posbility: 0.0015
Next Token : ::, Posbility: 0.9961
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  list, Posbility: 0.0013
Next Token :  l, Posbility: 0.0020
Next Token :  [], Posbility: 0.0186
Next Token :  rest, Posbility: 0.0732
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : t, Posbility: 0.0139
Next Token : tail, Posbility: 0.0177
Next Token : y, Posbility: 0.0332
Next Token : _, Posbility: 0.0483
Next Token : x, Posbility: 0.8555
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token : x, Posbility: 0.0004
Next Token : _, Posbility: 0.0005
Next Token : ', Posbility: 0.0041
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0154
Next Token : _, Posbility: 0.0254
Next Token : 1, Posbility: 0.0254
Next Token : ', Posbility: 0.0537
Next Token :  , Posbility: 0.8398
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : -, Posbility: 0.0001
Next Token : if, Posbility: 0.0002
Next Token : ::, Posbility: 0.0019
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0074
Next Token :  (1, Posbility: 0.0201
Next Token : 
, Posbility: 0.0547
Next Token :  1, Posbility: 0.2451
Next Token :  , Posbility: 0.6641
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0092
Next Token : f, Posbility: 0.0117
Next Token : flatten, Posbility: 0.0464
Next Token : (, Posbility: 0.0767
Next Token : x, Posbility: 0.8242
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0024
Next Token :  *, Posbility: 0.0039
Next Token :  , Posbility: 0.0095
Next Token : s, Posbility: 0.0137
Next Token :  +, Posbility: 0.9648
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token : (, Posbility: 0.0005
Next Token :  sum, Posbility: 0.0012
Next Token :  rec, Posbility: 0.0015
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : flat, Posbility: 0.0014
Next Token : fold, Posbility: 0.0014
Next Token : x, Posbility: 0.0062
Next Token : (, Posbility: 0.0752
Next Token : flatten, Posbility: 0.9141
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten
 score:False
Error type: noerr
---------------------------
Next Token : ed, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_
 score:False
Error type: noerr
---------------------------
Next Token : lista, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list
 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0004
Next Token : _, Posbility: 0.0005
Next Token : (, Posbility: 0.0140
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list 
 score:False
Error type: noerr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0052
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list x
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0018
Next Token : ), Posbility: 0.0048
Next Token :  , Posbility: 0.0048
Next Token : 

, Posbility: 0.2637
Next Token : 
, Posbility: 0.7188
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs

 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0281
Next Token : ;, Posbility: 0.0299
Next Token : in, Posbility: 0.1113
Next Token :   , Posbility: 0.1426
Next Token : let, Posbility: 0.4121
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  total, Posbility: 0.0121
Next Token :  main, Posbility: 0.0374
Next Token :  sum, Posbility: 0.1309
Next Token :  , Posbility: 0.1680
Next Token :  rec, Posbility: 0.5859
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0130
Next Token :  rec, Posbility: 0.0166
Next Token :  list, Posbility: 0.0214
Next Token :  sum, Posbility: 0.4297
Next Token :  , Posbility: 0.4297
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0111
Next Token : add, Posbility: 0.0439
Next Token : fold, Posbility: 0.0498
Next Token : flat, Posbility: 0.0640
Next Token : flatten, Posbility: 0.6875
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0027
Next Token : ed, Posbility: 0.0119
Next Token :  =, Posbility: 0.0415
Next Token :  , Posbility: 0.0879
Next Token : _, Posbility: 0.8320
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0127
Next Token : tree, Posbility: 0.0164
Next Token : and, Posbility: 0.0237
Next Token : sum, Posbility: 0.0305
Next Token : list, Posbility: 0.7852
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0309
Next Token : 2, Posbility: 0.0654
Next Token :  , Posbility: 0.0840
Next Token : ', Posbility: 0.1387
Next Token : _, Posbility: 0.6211
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : opt, Posbility: 0.0337
Next Token : iter, Posbility: 0.0491
Next Token : rec, Posbility: 0.0491
Next Token : helper, Posbility: 0.0554
Next Token : sum, Posbility: 0.2812
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0136
Next Token : m, Posbility: 0.0175
Next Token : _, Posbility: 0.0781
Next Token :  =, Posbility: 0.1006
Next Token :  , Posbility: 0.7422
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0015
Next Token : ls, Posbility: 0.0017
Next Token : lst, Posbility: 0.0024
Next Token : (, Posbility: 0.0051
Next Token : x, Posbility: 0.9766
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 1, Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token :  =, Posbility: 0.0052
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  a, Posbility: 0.0005
Next Token :  sum, Posbility: 0.0017
Next Token :  acc, Posbility: 0.0028
Next Token :  , Posbility: 0.0066
Next Token :  =, Posbility: 0.9844
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0006
Next Token :   , Posbility: 0.0009
Next Token :  match, Posbility: 0.0014
Next Token :  , Posbility: 0.0947
Next Token : 
, Posbility: 0.8984
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0005
Next Token :    , Posbility: 0.0013
Next Token : let, Posbility: 0.0013
Next Token :     , Posbility: 0.0067
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0038
Next Token : if, Posbility: 0.0070
Next Token : flatten, Posbility: 0.0520
Next Token : let, Posbility: 0.1099
Next Token : match, Posbility: 0.8125
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  count, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Flatten, Posbility: 0.0001
Next Token : List, Posbility: 0.0003
Next Token : (, Posbility: 0.0005
Next Token : flatten, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  with, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  avec, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : |[, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  nil, Posbility: 0.0002
Next Token :  0, Posbility: 0.0003
Next Token :  [, Posbility: 0.0009
Next Token :  , Posbility: 0.0041
Next Token :  [], Posbility: 0.9922
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  as, Posbility: 0.0003
Next Token :  |, Posbility: 0.0005
Next Token :  =>, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0024
Next Token :  0.0, Posbility: 0.0024
Next Token :  [], Posbility: 0.0024
Next Token :  , Posbility: 0.0066
Next Token :  0, Posbility: 0.9844
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  |, Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0004
Next Token :  0, Posbility: 0.0031
Next Token :  [, Posbility: 0.0040
Next Token :  [], Posbility: 0.0040
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : h, Posbility: 0.0007
Next Token : (, Posbility: 0.0019
Next Token : head, Posbility: 0.0028
Next Token : _, Posbility: 0.0075
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0001
Next Token : 0, Posbility: 0.0002
Next Token : s, Posbility: 0.0022
Next Token : ::, Posbility: 0.0036
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : :, Posbility: 0.0006
Next Token : ->, Posbility: 0.0006
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  0, Posbility: 0.0003
Next Token :  rest, Posbility: 0.0003
Next Token :  [], Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0005
Next Token : _, Posbility: 0.0022
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  =>, Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  when, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : â†’, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : if, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  sum, Posbility: 0.0009
Next Token : 
, Posbility: 0.0066
Next Token :  1, Posbility: 0.0066
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0003
Next Token : flat, Posbility: 0.0008
Next Token : (, Posbility: 0.0059
Next Token : flatten, Posbility: 0.1182
Next Token : x, Posbility: 0.8711
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token : +, Posbility: 0.0002
Next Token :  , Posbility: 0.0031
Next Token :  *, Posbility: 0.0035
Next Token : s, Posbility: 0.0140
Next Token :  +, Posbility: 0.9766
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: xs -> x +
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  sum, Posbility: 0.0003
Next Token :  rec, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : flat, Posbility: 0.0002
Next Token : Flatten, Posbility: 0.0003
Next Token : (, Posbility: 0.0040
Next Token : x, Posbility: 0.0109
Next Token : flatten, Posbility: 0.9844
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  list, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : lista, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : lists, Posbility: 0.0000
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  sum, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token :  , Posbility: 0.0085
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list_
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : add, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : summary, Posbility: 0.0000
Next Token : sum, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list_sum
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0004
Next Token : (, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list_sum 
 score:False
Error type: noerr
---------------------------
Next Token : flat, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : flatten, Posbility: 0.0002
Next Token : (, Posbility: 0.0032
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list_sum x
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 

, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list_sum xs
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0019
Next Token :  , Posbility: 0.0046
Next Token :  +, Posbility: 0.0060
Next Token : 
, Posbility: 0.3691
Next Token : 

, Posbility: 0.6094
---------------------------
code:
 (* Write a function to flatten a list and sum all of its elements. *)
let rec flatten_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list xs
let rec flatten_list_sum xs =
  match xs with
  | [] -> 0
  | x :: xs -> x + flatten_list_sum xs


 score:True
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END and No Syntax Error--------

processing time : :42.449694871902466

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>