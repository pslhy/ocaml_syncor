code:
 (* Write a  function to check whether all the characters are same or not. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  all, Posbility: 0.0532
Next Token :  , Posbility: 0.1445
Next Token :  rec, Posbility: 0.1445
Next Token :  check, Posbility: 0.1855
Next Token :  is, Posbility: 0.2383
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0029
Next Token : Char, Posbility: 0.0042
Next Token : All, Posbility: 0.0240
Next Token : Same, Posbility: 0.0308
Next Token : _, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : equal, Posbility: 0.0239
Next Token : ident, Posbility: 0.0271
Next Token : unique, Posbility: 0.0306
Next Token : same, Posbility: 0.2559
Next Token : all, Posbility: 0.4238
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Same, Posbility: 0.0024
Next Token : char, Posbility: 0.0039
Next Token :  =, Posbility: 0.0107
Next Token : same, Posbility: 0.0107
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : equal, Posbility: 0.0256
Next Token : character, Posbility: 0.0256
Next Token : the, Posbility: 0.0330
Next Token : char, Posbility: 0.0698
Next Token : same, Posbility: 0.7500
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  char, Posbility: 0.0137
Next Token : (, Posbility: 0.0226
Next Token : _, Posbility: 0.1660
Next Token :  , Posbility: 0.2754
Next Token :  =, Posbility: 0.4531
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fn, Posbility: 0.0211
Next Token :  fun, Posbility: 0.0737
Next Token :  , Posbility: 0.1377
Next Token : 
, Posbility: 0.2578
Next Token :  function, Posbility: 0.4805
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  string, Posbility: 0.0062
Next Token :  String, Posbility: 0.0102
Next Token : (, Posbility: 0.0244
Next Token :  , Posbility: 0.1807
Next Token : 
, Posbility: 0.7148
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0164
Next Token : 	, Posbility: 0.0186
Next Token : |, Posbility: 0.0737
Next Token :     , Posbility: 0.1377
Next Token :   , Posbility: 0.6992
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : {, Posbility: 0.0017
Next Token : let, Posbility: 0.0027
Next Token : [, Posbility: 0.0040
Next Token : (, Posbility: 0.0074
Next Token : |, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0228
Next Token :  true, Posbility: 0.0294
Next Token :  [, Posbility: 0.0623
Next Token :  , Posbility: 0.1689
Next Token :  [], Posbility: 0.5898
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0121
Next Token : 
, Posbility: 0.0121
Next Token :   , Posbility: 0.0156
Next Token :  as, Posbility: 0.0200
Next Token :  , Posbility: 0.8516
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0005
Next Token : _, Posbility: 0.0008
Next Token : :, Posbility: 0.0009
Next Token : ::, Posbility: 0.0046
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0352
Next Token :  False, Posbility: 0.0352
Next Token :  false, Posbility: 0.0952
Next Token :  True, Posbility: 0.0952
Next Token :  true, Posbility: 0.7031
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
 score:False
Error type: noerr
---------------------------
Next Token :     , Posbility: 0.0013
Next Token :    , Posbility: 0.0019
Next Token :   , Posbility: 0.0058
Next Token :  , Posbility: 0.0107
Next Token : 
, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true

 score:False
Error type: noerr
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : [, Posbility: 0.0001
Next Token : //, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  letter, Posbility: 0.0085
Next Token :  a, Posbility: 0.0141
Next Token :  char, Posbility: 0.0141
Next Token :  [, Posbility: 0.1338
Next Token :  , Posbility: 0.7695
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0281
Next Token : head, Posbility: 0.0320
Next Token : c, Posbility: 0.0981
Next Token : x, Posbility: 0.2080
Next Token : _, Posbility: 0.4395
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0120
Next Token :  when, Posbility: 0.0136
Next Token :   , Posbility: 0.0420
Next Token : ::, Posbility: 0.0610
Next Token :  , Posbility: 0.8438
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0008
Next Token : :, Posbility: 0.0026
Next Token : if, Posbility: 0.0150
Next Token : ::, Posbility: 0.3398
Next Token : ->, Posbility: 0.6367
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0188
Next Token :  !, Posbility: 0.0242
Next Token : 
, Posbility: 0.1787
Next Token :  , Posbility: 0.2295
Next Token :  false, Posbility: 0.4863
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0046
Next Token :  in, Posbility: 0.0125
Next Token :  , Posbility: 0.0125
Next Token : 

, Posbility: 0.4141
Next Token : 
, Posbility: 0.5312
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false

 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0342
Next Token : |, Posbility: 0.0640
Next Token :     , Posbility: 0.0820
Next Token : end, Posbility: 0.2236
Next Token :   , Posbility: 0.3047
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0039
Next Token : [, Posbility: 0.0050
Next Token : with, Posbility: 0.0050
Next Token : (, Posbility: 0.0082
Next Token : |, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Some, Posbility: 0.0137
Next Token :  ', Posbility: 0.0156
Next Token :  a, Posbility: 0.0291
Next Token :  [, Posbility: 0.0615
Next Token :  , Posbility: 0.7500
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0383
Next Token : (, Posbility: 0.0435
Next Token : _, Posbility: 0.1338
Next Token : c, Posbility: 0.2207
Next Token : x, Posbility: 0.2500
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0067
Next Token : :, Posbility: 0.0718
Next Token : s, Posbility: 0.0811
Next Token : ::, Posbility: 0.1338
Next Token :  , Posbility: 0.6797
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0008
Next Token : <, Posbility: 0.0022
Next Token : :, Posbility: 0.0240
Next Token : ->, Posbility: 0.0654
Next Token : ::, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  list, Posbility: 0.0022
Next Token :  [], Posbility: 0.0025
Next Token :  acc, Posbility: 0.0025
Next Token :  rest, Posbility: 0.0825
Next Token :  , Posbility: 0.8867
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0115
Next Token : t, Posbility: 0.0190
Next Token : _, Posbility: 0.0457
Next Token : y, Posbility: 0.0854
Next Token : x, Posbility: 0.8086
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0009
Next Token : 1, Posbility: 0.0011
Next Token :  , Posbility: 0.0024
Next Token : ', Posbility: 0.0178
Next Token : s, Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0048
Next Token : 
, Posbility: 0.0079
Next Token :  =>, Posbility: 0.0079
Next Token :  when, Posbility: 0.0581
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token : if, Posbility: 0.0009
Next Token : ::, Posbility: 0.0046
Next Token : ->, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  not, Posbility: 0.0381
Next Token :  !, Posbility: 0.0488
Next Token :  , Posbility: 0.2188
Next Token : 
, Posbility: 0.2812
Next Token :  is, Posbility: 0.3613
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is
 score:False
Error type: noerr
---------------------------
Next Token :  all, Posbility: 0.0001
Next Token : all, Posbility: 0.0001
Next Token :  ((, Posbility: 0.0001
Next Token :  , Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_
 score:False
Error type: noerr
---------------------------
Next Token : first, Posbility: 0.0001
Next Token : equal, Posbility: 0.0009
Next Token : char, Posbility: 0.0025
Next Token : same, Posbility: 0.0067
Next Token : all, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all
 score:False
Error type: noerr
---------------------------
Next Token : same, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_
 score:False
Error type: noerr
---------------------------
Next Token : char, Posbility: 0.0001
Next Token : one, Posbility: 0.0001
Next Token : sam, Posbility: 0.0001
Next Token : equal, Posbility: 0.0002
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same
 score:False
Error type: noerr
---------------------------
Next Token :  [, Posbility: 0.0008
Next Token : _, Posbility: 0.0017
Next Token :  ~, Posbility: 0.0066
Next Token : (, Posbility: 0.0139
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same 
 score:False
Error type: noerr
---------------------------
Next Token : (), Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : s, Posbility: 0.0002
Next Token : (, Posbility: 0.0293
Next Token : x, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same x
 score:False
Error type: noerr
---------------------------
Next Token :  &&, Posbility: 0.0011
Next Token :  |, Posbility: 0.0012
Next Token : 
, Posbility: 0.0014
Next Token :  , Posbility: 0.0752
Next Token : s, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0122
Next Token :  =, Posbility: 0.0122
Next Token :  &&, Posbility: 0.1157
Next Token : 

, Posbility: 0.4043
Next Token : 
, Posbility: 0.4043
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs

 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0237
Next Token : in, Posbility: 0.0471
Next Token :   , Posbility: 0.0605
Next Token : |, Posbility: 0.0605
Next Token : end, Posbility: 0.6094
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
end
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0026
Next Token :  , Posbility: 0.0168
Next Token : ;, Posbility: 0.0459
Next Token : 

, Posbility: 0.4355
Next Token : 
, Posbility: 0.4941
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
end

 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
end


 score:True
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
end;
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
end 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
end =
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ></, Posbility: 0.0117
Next Token : ^, Posbility: 0.0220
Next Token : @, Posbility: 0.0320
Next Token :  , Posbility: 0.1621
Next Token : >, Posbility: 0.6406
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|>
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0085
Next Token :  string, Posbility: 0.0141
Next Token :  fun, Posbility: 0.0491
Next Token :  String, Posbility: 0.0718
Next Token :  , Posbility: 0.7695
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : L, Posbility: 0.0092
Next Token : (, Posbility: 0.0151
Next Token : Seq, Posbility: 0.0194
Next Token : Array, Posbility: 0.0598
Next Token : List, Posbility: 0.7305
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 0.0004
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : filter, Posbility: 0.0471
Next Token : iter, Posbility: 0.0471
Next Token : rev, Posbility: 0.1001
Next Token : map, Posbility: 0.1279
Next Token : fold, Posbility: 0.5078
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0022
Next Token :  , Posbility: 0.0098
Next Token : r, Posbility: 0.0265
Next Token : l, Posbility: 0.0723
Next Token : _, Posbility: 0.8789
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_
 score:False
Error type: noerr
---------------------------
Next Token : r, Posbility: 0.0005
Next Token : back, Posbility: 0.0005
Next Token : l, Posbility: 0.0008
Next Token : right, Posbility: 0.0752
Next Token : left, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0223
Next Token : 

, Posbility: 0.0325
Next Token : 
, Posbility: 0.0537
Next Token :  is, Posbility: 0.1289
Next Token :  , Posbility: 0.6523
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left 
 score:False
Error type: noerr
---------------------------
Next Token : <, Posbility: 0.0039
Next Token : @@, Posbility: 0.0039
Next Token : Fun, Posbility: 0.0044
Next Token : f, Posbility: 0.0063
Next Token : (, Posbility: 0.9453
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  fun, Posbility: 0.0043
Next Token : Fun, Posbility: 0.0071
Next Token : fn, Posbility: 0.0104
Next Token : function, Posbility: 0.1260
Next Token : fun, Posbility: 0.8242
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  prev, Posbility: 0.0116
Next Token :  v, Posbility: 0.0131
Next Token :  a, Posbility: 0.0972
Next Token :  acc, Posbility: 0.2988
Next Token :  , Posbility: 0.4941
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0342
Next Token : s, Posbility: 0.0562
Next Token : (, Posbility: 0.0820
Next Token : c, Posbility: 0.1191
Next Token : x, Posbility: 0.5352
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0101
Next Token :  a, Posbility: 0.0166
Next Token : s, Posbility: 0.0214
Next Token :  acc, Posbility: 0.1787
Next Token :  , Posbility: 0.7070
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0315
Next Token : _, Posbility: 0.0356
Next Token : ->, Posbility: 0.0972
Next Token : x, Posbility: 0.3379
Next Token : y, Posbility: 0.3828
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0006
Next Token :   , Posbility: 0.0007
Next Token : ->, Posbility: 0.0007
Next Token : s, Posbility: 0.0157
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0002
Next Token : -, Posbility: 0.0003
Next Token : _, Posbility: 0.0003
Next Token : z, Posbility: 0.0003
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  is, Posbility: 0.0090
Next Token :  !, Posbility: 0.0090
Next Token :  not, Posbility: 0.0148
Next Token : 
, Posbility: 0.1089
Next Token :  , Posbility: 0.8047
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0171
Next Token : Char, Posbility: 0.0282
Next Token : (, Posbility: 0.0869
Next Token : if, Posbility: 0.2363
Next Token : x, Posbility: 0.5664
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  !=, Posbility: 0.0320
Next Token :  ===, Posbility: 0.0410
Next Token :  , Posbility: 0.2363
Next Token :  ==, Posbility: 0.2363
Next Token :  =, Posbility: 0.3887
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ~, Posbility: 0.0010
Next Token :  ', Posbility: 0.0017
Next Token : ?, Posbility: 0.0045
Next Token : :, Posbility: 0.0058
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : Char, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 0.0017
Next Token : y, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  , Posbility: 0.0099
Next Token :  and, Posbility: 0.0099
Next Token :  &&, Posbility: 0.0269
Next Token : );, Posbility: 0.0444
Next Token : ), Posbility: 0.8906
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0339
Next Token :  false, Posbility: 0.0493
Next Token :  true, Posbility: 0.1953
Next Token : 

, Posbility: 0.3203
Next Token : 
, Posbility: 0.3633
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)

 score:False
Error type: noerr
---------------------------
Next Token : let, Posbility: 0.0513
Next Token : |, Posbility: 0.0903
Next Token :   , Posbility: 0.1309
Next Token : end, Posbility: 0.1396
Next Token : ;, Posbility: 0.1484
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;
 score:False
Error type: noerr
---------------------------
Next Token :  (*, Posbility: 0.0001
Next Token : ;&, Posbility: 0.0005
Next Token : 

, Posbility: 0.0018
Next Token : 
, Posbility: 0.0046
Next Token : ;, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;;
 score:False
Error type: noerr
---------------------------
Next Token :  This, Posbility: 0.0253
Next Token : ;, Posbility: 0.0500
Next Token : 
, Posbility: 0.0825
Next Token : 

, Posbility: 0.1543
Next Token :  , Posbility: 0.2891
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; 
 score:False
Error type: noerr
---------------------------
Next Token : End, Posbility: 0.0391
Next Token : let, Posbility: 0.0415
Next Token : Write, Posbility: 0.0605
Next Token : (, Posbility: 0.0996
Next Token : end, Posbility: 0.1641
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; end
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0349
Next Token :  function, Posbility: 0.0396
Next Token :  , Posbility: 0.0449
Next Token :  is, Posbility: 0.2578
Next Token :  of, Posbility: 0.4824
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; end of
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; end is
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; end 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; end function
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; end


 score:True
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : function, Posbility: 0.0187
Next Token : x, Posbility: 0.0211
Next Token : end, Posbility: 0.0396
Next Token : **, Posbility: 0.1377
Next Token : is, Posbility: 0.2012
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  [, Posbility: 0.0006
Next Token :  , Posbility: 0.0012
Next Token :  all, Posbility: 0.0019
Next Token : -, Posbility: 0.0052
Next Token : _, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : true, Posbility: 0.0001
Next Token : equal, Posbility: 0.0001
Next Token : char, Posbility: 0.0003
Next Token : same, Posbility: 0.0010
Next Token : all, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ?, Posbility: 0.0001
Next Token :  same, Posbility: 0.0002
Next Token :  [, Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : the, Posbility: 0.0001
Next Token : equal, Posbility: 0.0001
Next Token : all, Posbility: 0.0001
Next Token : sam, Posbility: 0.0002
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ', Posbility: 0.0444
Next Token :  ", Posbility: 0.0938
Next Token :  [, Posbility: 0.1543
Next Token :  [], Posbility: 0.1543
Next Token :  , Posbility: 0.4199
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : (, Posbility: 0.0113
Next Token : x, Posbility: 0.0128
Next Token : []), Posbility: 0.0393
Next Token : [', Posbility: 0.3301
Next Token : [", Posbility: 0.5430
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : x, Posbility: 0.0192
Next Token : c, Posbility: 0.0247
Next Token : abc, Posbility: 0.0280
Next Token : A, Posbility: 0.0977
Next Token : a, Posbility: 0.5625
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "]), Posbility: 0.0410
Next Token : ",", Posbility: 0.1426
Next Token : "], Posbility: 0.1836
Next Token : ", Posbility: 0.3027
Next Token : ",, Posbility: 0.3027
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a",
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0008
Next Token :  "",, Posbility: 0.0010
Next Token :  "1", Posbility: 0.0015
Next Token :  , Posbility: 0.0019
Next Token :  ", Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0110
Next Token : c, Posbility: 0.0160
Next Token : A, Posbility: 0.0160
Next Token : a, Posbility: 0.1338
Next Token : b, Posbility: 0.7734
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0022
Next Token : ", Posbility: 0.0061
Next Token : "], Posbility: 0.0447
Next Token : "]), Posbility: 0.0447
Next Token : ",, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b",
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  "2", Posbility: 0.0004
Next Token :  ..., Posbility: 0.0009
Next Token :  "1", Posbility: 0.0012
Next Token :  , Posbility: 0.0015
Next Token :  ", Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : A, Posbility: 0.0030
Next Token : d, Posbility: 0.0049
Next Token : b, Posbility: 0.0250
Next Token : a, Posbility: 0.1123
Next Token : c, Posbility: 0.8281
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "];, Posbility: 0.0038
Next Token : ", Posbility: 0.0103
Next Token : ",, Posbility: 0.2080
Next Token : "], Posbility: 0.2080
Next Token : "]), Posbility: 0.5625
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"])
 score:False
Error type: noerr
---------------------------
Next Token :  =>, Posbility: 0.0150
Next Token : 
, Posbility: 0.0247
Next Token :  =, Posbility: 0.0247
Next Token :  ==, Posbility: 0.0359
Next Token :  , Posbility: 0.8164
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) 
 score:False
Error type: noerr
---------------------------
Next Token : :, Posbility: 0.0083
Next Token : #, Posbility: 0.0107
Next Token : yield, Posbility: 0.0289
Next Token : →, Posbility: 0.0422
Next Token : ->, Posbility: 0.8477
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  False, Posbility: 0.0057
Next Token :  , Posbility: 0.0083
Next Token :  True, Posbility: 0.0121
Next Token :  false, Posbility: 0.1147
Next Token :  true, Posbility: 0.8477
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) -> true
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) -> false
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) -> True
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) -> 
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) -> False
 score:False
Error type: Syntaxerr.Other_stop
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) →
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0047
Next Token :  , Posbility: 0.0054
Next Token :  True, Posbility: 0.0069
Next Token :  false, Posbility: 0.1777
Next Token :  true, Posbility: 0.7969
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ;, Posbility: 0.0205
Next Token :  , Posbility: 0.0432
Next Token :  (*, Posbility: 0.0713
Next Token : 

, Posbility: 0.1338
Next Token : 
, Posbility: 0.6758
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ```, Posbility: 0.0061
Next Token : [, Posbility: 0.0189
Next Token : let, Posbility: 0.0962
Next Token : ;, Posbility: 0.2617
Next Token : (, Posbility: 0.5195
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : let, Posbility: 0.0006
Next Token :  is, Posbility: 0.0016
Next Token : **, Posbility: 0.0016
Next Token : *, Posbility: 0.3145
Next Token : is, Posbility: 0.6680
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  all, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : al, Posbility: 0.0000
Next Token : not, Posbility: 0.0000
Next Token : same, Posbility: 0.0000
Next Token : any, Posbility: 0.0000
Next Token : all, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : all, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token : safe, Posbility: 0.0000
Next Token : sam, Posbility: 0.0001
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  [{, Posbility: 0.0003
Next Token :  [, Posbility: 0.0024
Next Token :  [], Posbility: 0.0040
Next Token :  ", Posbility: 0.0109
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0008
Next Token : (", Posbility: 0.0027
Next Token : [', Posbility: 0.0040
Next Token : []), Posbility: 0.0139
Next Token : [", Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : x, Posbility: 0.0168
Next Token : c, Posbility: 0.0190
Next Token : d, Posbility: 0.0277
Next Token : b, Posbility: 0.0588
Next Token : a, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0023
Next Token : ", Posbility: 0.0029
Next Token : ",", Posbility: 0.0055
Next Token : "]), Posbility: 0.0593
Next Token : ",, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "2", Posbility: 0.0006
Next Token :  , Posbility: 0.0010
Next Token :  "1", Posbility: 0.0015
Next Token :  "",, Posbility: 0.0028
Next Token :  ", Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : B, Posbility: 0.0197
Next Token : c, Posbility: 0.0535
Next Token : A, Posbility: 0.0535
Next Token : a, Posbility: 0.3086
Next Token : b, Posbility: 0.5078
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0006
Next Token : "], Posbility: 0.0015
Next Token : ", Posbility: 0.0022
Next Token : "]), Posbility: 0.0947
Next Token : ",, Posbility: 0.8984
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ', Posbility: 0.0003
Next Token :  "2", Posbility: 0.0009
Next Token :  , Posbility: 0.0025
Next Token :  "1", Posbility: 0.0025
Next Token :  ", Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : A, Posbility: 0.0464
Next Token : b, Posbility: 0.0596
Next Token : a, Posbility: 0.1611
Next Token : d, Posbility: 0.2070
Next Token : c, Posbility: 0.3867
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0022
Next Token : ", Posbility: 0.0098
Next Token : "], Posbility: 0.0209
Next Token : "]), Posbility: 0.1748
Next Token : ",, Posbility: 0.7812
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "",, Posbility: 0.0009
Next Token :  , Posbility: 0.0015
Next Token :  ', Posbility: 0.0015
Next Token :  "1", Posbility: 0.0040
Next Token :  ", Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : x, Posbility: 0.0144
Next Token : b, Posbility: 0.0393
Next Token : c, Posbility: 0.0732
Next Token : a, Posbility: 0.2559
Next Token : d, Posbility: 0.5430
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "]);, Posbility: 0.0003
Next Token : ", Posbility: 0.0005
Next Token : "], Posbility: 0.0023
Next Token : ",, Posbility: 0.0471
Next Token : "]), Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"])
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :    , Posbility: 0.0001
Next Token : ), Posbility: 0.0004
Next Token :   , Posbility: 0.0006
Next Token : 
, Posbility: 0.0010
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ×, Posbility: 0.0002
Next Token : ←, Posbility: 0.0002
Next Token : >>>, Posbility: 0.0002
Next Token : ->, Posbility: 0.0052
Next Token : →, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) →
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0003
Next Token : false, Posbility: 0.0004
Next Token :  , Posbility: 0.0007
Next Token :  true, Posbility: 0.0179
Next Token :  false, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : , Posbility: 0.0048
Next Token :  (*, Posbility: 0.0168
Next Token :  , Posbility: 0.0190
Next Token : 

, Posbility: 0.2324
Next Token : 
, Posbility: 0.7148
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 

, Posbility: 0.0219
Next Token : ;, Posbility: 0.0281
Next Token : *, Posbility: 0.0299
Next Token : ```, Posbility: 0.0435
Next Token : (, Posbility: 0.7227
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : obj, Posbility: 0.0010
Next Token : fun, Posbility: 0.0011
Next Token : (), Posbility: 0.0018
Next Token : *, Posbility: 0.0664
Next Token : is, Posbility: 0.9180
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : all, Posbility: 0.0000
Next Token :  all, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : al, Posbility: 0.0000
Next Token : some, Posbility: 0.0000
Next Token : same, Posbility: 0.0000
Next Token : any, Posbility: 0.0000
Next Token : all, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : one, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token : safe, Posbility: 0.0000
Next Token : sam, Posbility: 0.0001
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ""), Posbility: 0.0003
Next Token :  ", Posbility: 0.0025
Next Token :  [, Posbility: 0.0025
Next Token :  [], Posbility: 0.0040
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0010
Next Token : (", Posbility: 0.0019
Next Token : [', Posbility: 0.0027
Next Token : []), Posbility: 0.0291
Next Token : [", Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : c, Posbility: 0.0212
Next Token : x, Posbility: 0.0240
Next Token : d, Posbility: 0.0272
Next Token : b, Posbility: 0.0510
Next Token : a, Posbility: 0.7969
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0014
Next Token : ", Posbility: 0.0023
Next Token : ",", Posbility: 0.0023
Next Token : "]), Posbility: 0.0596
Next Token : ",, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "2", Posbility: 0.0006
Next Token :  , Posbility: 0.0007
Next Token :  "",, Posbility: 0.0015
Next Token :  "1", Posbility: 0.0015
Next Token :  ", Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : d, Posbility: 0.0126
Next Token : A, Posbility: 0.0208
Next Token : c, Posbility: 0.0439
Next Token : a, Posbility: 0.1963
Next Token : b, Posbility: 0.6875
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "}), Posbility: 0.0005
Next Token : "], Posbility: 0.0012
Next Token : ", Posbility: 0.0020
Next Token : "]), Posbility: 0.1816
Next Token : ",, Posbility: 0.8125
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "2", Posbility: 0.0005
Next Token :  , Posbility: 0.0009
Next Token :  "1", Posbility: 0.0009
Next Token :  "",, Posbility: 0.0015
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0155
Next Token : b, Posbility: 0.0479
Next Token : a, Posbility: 0.0894
Next Token : d, Posbility: 0.1147
Next Token : c, Posbility: 0.6602
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0006
Next Token : "], Posbility: 0.0028
Next Token : ", Posbility: 0.0040
Next Token : "]), Posbility: 0.1177
Next Token : ",, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "2", Posbility: 0.0009
Next Token :  "",, Posbility: 0.0015
Next Token :  , Posbility: 0.0015
Next Token :  "1", Posbility: 0.0015
Next Token :  ", Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : c, Posbility: 0.0537
Next Token : b, Posbility: 0.0537
Next Token : e, Posbility: 0.1289
Next Token : a, Posbility: 0.1875
Next Token : d, Posbility: 0.4512
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0011
Next Token : "], Posbility: 0.0021
Next Token : ", Posbility: 0.0050
Next Token : "]), Posbility: 0.0369
Next Token : ",, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ', Posbility: 0.0003
Next Token : ]), Posbility: 0.0003
Next Token :  "1", Posbility: 0.0007
Next Token :  , Posbility: 0.0009
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : c, Posbility: 0.0132
Next Token : f, Posbility: 0.0170
Next Token : d, Posbility: 0.0359
Next Token : a, Posbility: 0.1611
Next Token : e, Posbility: 0.7227
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0001
Next Token : ", Posbility: 0.0002
Next Token : "], Posbility: 0.0005
Next Token : ",, Posbility: 0.0757
Next Token : "]), Posbility: 0.9219
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"])
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ?:, Posbility: 0.0000
Next Token : ×, Posbility: 0.0000
Next Token : ←, Posbility: 0.0000
Next Token : ->, Posbility: 0.0009
Next Token : →, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) →
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0003
Next Token : false, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :  true, Posbility: 0.2217
Next Token :  false, Posbility: 0.7734
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : , Posbility: 0.0039
Next Token :  , Posbility: 0.0173
Next Token :  (*, Posbility: 0.0197
Next Token : 

, Posbility: 0.2109
Next Token : 
, Posbility: 0.7344
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : let, Posbility: 0.0187
Next Token : 

, Posbility: 0.0289
Next Token : ```, Posbility: 0.0476
Next Token : *, Posbility: 0.0508
Next Token : (, Posbility: 0.6992
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  is, Posbility: 0.0014
Next Token : let, Posbility: 0.0018
Next Token : (), Posbility: 0.0029
Next Token : *, Posbility: 0.0835
Next Token : is, Posbility: 0.8945
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : all, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  all, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : al, Posbility: 0.0000
Next Token : some, Posbility: 0.0000
Next Token : same, Posbility: 0.0000
Next Token : any, Posbility: 0.0000
Next Token : all, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : equal, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token : safe, Posbility: 0.0000
Next Token : sam, Posbility: 0.0001
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ""), Posbility: 0.0005
Next Token :  [, Posbility: 0.0031
Next Token :  ", Posbility: 0.0040
Next Token :  [], Posbility: 0.0040
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0014
Next Token : [', Posbility: 0.0021
Next Token : (", Posbility: 0.0027
Next Token : []), Posbility: 0.0369
Next Token : [", Posbility: 0.9531
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : x, Posbility: 0.0153
Next Token : d, Posbility: 0.0153
Next Token : c, Posbility: 0.0153
Next Token : b, Posbility: 0.0369
Next Token : a, Posbility: 0.8359
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0008
Next Token : ", Posbility: 0.0019
Next Token : ",", Posbility: 0.0019
Next Token : "]), Posbility: 0.0292
Next Token : ",, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "2", Posbility: 0.0004
Next Token :  , Posbility: 0.0005
Next Token :  "1", Posbility: 0.0012
Next Token :  "",, Posbility: 0.0013
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : d, Posbility: 0.0080
Next Token : A, Posbility: 0.0103
Next Token : c, Posbility: 0.0278
Next Token : a, Posbility: 0.2061
Next Token : b, Posbility: 0.7188
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0002
Next Token : "], Posbility: 0.0005
Next Token : ", Posbility: 0.0011
Next Token : "]), Posbility: 0.0474
Next Token : ",, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "2", Posbility: 0.0002
Next Token :  "1", Posbility: 0.0005
Next Token :  , Posbility: 0.0007
Next Token :  "",, Posbility: 0.0012
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0082
Next Token : b, Posbility: 0.0254
Next Token : a, Posbility: 0.0417
Next Token : d, Posbility: 0.0537
Next Token : c, Posbility: 0.8398
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0003
Next Token : "], Posbility: 0.0009
Next Token : ", Posbility: 0.0021
Next Token : "]), Posbility: 0.0371
Next Token : ",, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ]), Posbility: 0.0003
Next Token :  "1", Posbility: 0.0005
Next Token :  , Posbility: 0.0009
Next Token :  "",, Posbility: 0.0009
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : b, Posbility: 0.0192
Next Token : c, Posbility: 0.0317
Next Token : e, Posbility: 0.0405
Next Token : a, Posbility: 0.0522
Next Token : d, Posbility: 0.8164
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0005
Next Token : "], Posbility: 0.0008
Next Token : ", Posbility: 0.0023
Next Token : "]), Posbility: 0.0471
Next Token : ",, Posbility: 0.9492
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ]), Posbility: 0.0002
Next Token :  "1", Posbility: 0.0003
Next Token :  "",, Posbility: 0.0004
Next Token :  , Posbility: 0.0006
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : d, Posbility: 0.0156
Next Token : c, Posbility: 0.0156
Next Token : f, Posbility: 0.0256
Next Token : a, Posbility: 0.0542
Next Token : e, Posbility: 0.8516
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0003
Next Token : ",", Posbility: 0.0006
Next Token : ", Posbility: 0.0015
Next Token : "]), Posbility: 0.0140
Next Token : ",, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  "1", Posbility: 0.0003
Next Token :  ', Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : d, Posbility: 0.0057
Next Token : g, Posbility: 0.0095
Next Token : e, Posbility: 0.0156
Next Token : a, Posbility: 0.0894
Next Token : f, Posbility: 0.8477
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "]);, Posbility: 0.0001
Next Token : ", Posbility: 0.0002
Next Token : "], Posbility: 0.0003
Next Token : ",, Posbility: 0.0293
Next Token : "]), Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"])
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : ×, Posbility: 0.0000
Next Token : ←, Posbility: 0.0000
Next Token : ->, Posbility: 0.0006
Next Token : →, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) →
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : false, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  false, Posbility: 0.4688
Next Token :  true, Posbility: 0.5312
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : , Posbility: 0.0042
Next Token :  (*, Posbility: 0.0078
Next Token :  , Posbility: 0.0128
Next Token : 

, Posbility: 0.1768
Next Token : 
, Posbility: 0.7891
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 

, Posbility: 0.0211
Next Token : *, Posbility: 0.0306
Next Token : let, Posbility: 0.0306
Next Token : ```, Posbility: 0.0476
Next Token : (, Posbility: 0.6992
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : List, Posbility: 0.0011
Next Token : let, Posbility: 0.0014
Next Token : (), Posbility: 0.0015
Next Token : *, Posbility: 0.0156
Next Token : is, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : all, Posbility: 0.0000
Next Token :  all, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : some, Posbility: 0.0000
Next Token : al, Posbility: 0.0000
Next Token : same, Posbility: 0.0000
Next Token : any, Posbility: 0.0000
Next Token : all, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : equal, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token : safe, Posbility: 0.0000
Next Token : sam, Posbility: 0.0001
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token :  [, Posbility: 0.0025
Next Token :  ", Posbility: 0.0031
Next Token :  [], Posbility: 0.0031
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0016
Next Token : [', Posbility: 0.0016
Next Token : (", Posbility: 0.0027
Next Token : []), Posbility: 0.0371
Next Token : [", Posbility: 0.9531
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : d, Posbility: 0.0120
Next Token : c, Posbility: 0.0120
Next Token : x, Posbility: 0.0175
Next Token : b, Posbility: 0.0327
Next Token : a, Posbility: 0.8398
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0004
Next Token : ",", Posbility: 0.0012
Next Token : ", Posbility: 0.0013
Next Token : "]), Posbility: 0.0140
Next Token : ",, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "2", Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  "1", Posbility: 0.0006
Next Token :  "",, Posbility: 0.0009
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0036
Next Token : d, Posbility: 0.0046
Next Token : c, Posbility: 0.0161
Next Token : a, Posbility: 0.0723
Next Token : b, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0001
Next Token : "], Posbility: 0.0002
Next Token : ", Posbility: 0.0005
Next Token : "]), Posbility: 0.0179
Next Token : ",, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "2", Posbility: 0.0001
Next Token :  "1", Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token :  "",, Posbility: 0.0008
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0055
Next Token : b, Posbility: 0.0116
Next Token : a, Posbility: 0.0132
Next Token : d, Posbility: 0.0278
Next Token : c, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0001
Next Token : "], Posbility: 0.0003
Next Token : ", Posbility: 0.0008
Next Token : "]), Posbility: 0.0140
Next Token : ",, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ]), Posbility: 0.0001
Next Token :  "1", Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token :  "",, Posbility: 0.0006
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0063
Next Token : c, Posbility: 0.0103
Next Token : a, Posbility: 0.0132
Next Token : e, Posbility: 0.0219
Next Token : d, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0001
Next Token : "], Posbility: 0.0003
Next Token : ", Posbility: 0.0008
Next Token : "]), Posbility: 0.0140
Next Token : ",, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ]), Posbility: 0.0001
Next Token :  "1", Posbility: 0.0001
Next Token :  "",, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : g, Posbility: 0.0038
Next Token : d, Posbility: 0.0081
Next Token : a, Posbility: 0.0104
Next Token : f, Posbility: 0.0221
Next Token : e, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0002
Next Token : ",", Posbility: 0.0002
Next Token : ", Posbility: 0.0006
Next Token : "]), Posbility: 0.0110
Next Token : ",, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  "1", Posbility: 0.0002
Next Token :  "",, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : d, Posbility: 0.0047
Next Token : e, Posbility: 0.0060
Next Token : a, Posbility: 0.0269
Next Token : g, Posbility: 0.0444
Next Token : f, Posbility: 0.8906
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0004
Next Token : ",", Posbility: 0.0005
Next Token : ", Posbility: 0.0012
Next Token : "]), Posbility: 0.0067
Next Token : ",, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  "0", Posbility: 0.0002
Next Token :  "1", Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : c, Posbility: 0.0037
Next Token : f, Posbility: 0.0078
Next Token : h, Posbility: 0.0100
Next Token : a, Posbility: 0.0579
Next Token : g, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "],, Posbility: 0.0000
Next Token : ", Posbility: 0.0002
Next Token : "], Posbility: 0.0003
Next Token : ",, Posbility: 0.0229
Next Token : "]), Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"])
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ×, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ←, Posbility: 0.0000
Next Token : ->, Posbility: 0.0009
Next Token : →, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) →
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0003
Next Token : false, Posbility: 0.0003
Next Token :  true, Posbility: 0.0952
Next Token :  false, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : , Posbility: 0.0036
Next Token :  (*, Posbility: 0.0046
Next Token :  , Posbility: 0.0077
Next Token : 

, Posbility: 0.1973
Next Token : 
, Posbility: 0.7812
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ;, Posbility: 0.0222
Next Token : *, Posbility: 0.0237
Next Token : ```, Posbility: 0.0251
Next Token : let, Posbility: 0.0269
Next Token : (, Posbility: 0.7344
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  is, Posbility: 0.0010
Next Token : (), Posbility: 0.0011
Next Token : let, Posbility: 0.0014
Next Token : *, Posbility: 0.0256
Next Token : is, Posbility: 0.9609
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  all, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : a, Posbility: 0.0000
Next Token : same, Posbility: 0.0000
Next Token : al, Posbility: 0.0000
Next Token : any, Posbility: 0.0000
Next Token : all, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : equal, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token : safe, Posbility: 0.0000
Next Token : sam, Posbility: 0.0000
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0005
Next Token :  [, Posbility: 0.0017
Next Token :  ", Posbility: 0.0019
Next Token :  [], Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : [', Posbility: 0.0010
Next Token : (, Posbility: 0.0015
Next Token : (", Posbility: 0.0027
Next Token : []), Posbility: 0.0228
Next Token : [", Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : A, Posbility: 0.0055
Next Token : x, Posbility: 0.0070
Next Token : c, Posbility: 0.0070
Next Token : b, Posbility: 0.0132
Next Token : a, Posbility: 0.9219
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0003
Next Token : ",", Posbility: 0.0009
Next Token : ", Posbility: 0.0012
Next Token : "]), Posbility: 0.0067
Next Token : ",, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "2", Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  "1", Posbility: 0.0003
Next Token :  "",, Posbility: 0.0005
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0014
Next Token : d, Posbility: 0.0018
Next Token : c, Posbility: 0.0081
Next Token : a, Posbility: 0.0464
Next Token : b, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0001
Next Token : "], Posbility: 0.0001
Next Token : ", Posbility: 0.0003
Next Token : "]), Posbility: 0.0052
Next Token : ",, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "2", Posbility: 0.0001
Next Token :  "1", Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  "",, Posbility: 0.0004
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0015
Next Token : b, Posbility: 0.0035
Next Token : a, Posbility: 0.0058
Next Token : d, Posbility: 0.0074
Next Token : c, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : "], Posbility: 0.0001
Next Token : ", Posbility: 0.0003
Next Token : "]), Posbility: 0.0041
Next Token : ",, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ]), Posbility: 0.0000
Next Token :  "1", Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  "",, Posbility: 0.0002
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : c, Posbility: 0.0022
Next Token : f, Posbility: 0.0022
Next Token : a, Posbility: 0.0040
Next Token : e, Posbility: 0.0052
Next Token : d, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : "], Posbility: 0.0001
Next Token : ", Posbility: 0.0002
Next Token : "]), Posbility: 0.0041
Next Token : ",, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ]), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  "",, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : d, Posbility: 0.0015
Next Token : g, Posbility: 0.0015
Next Token : a, Posbility: 0.0017
Next Token : f, Posbility: 0.0040
Next Token : e, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : "]), Posbility: 0.0041
Next Token : ",, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ]), Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  "",, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : a, Posbility: 0.0021
Next Token : h, Posbility: 0.0027
Next Token : e, Posbility: 0.0074
Next Token : g, Posbility: 0.0138
Next Token : f, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : ", Posbility: 0.0002
Next Token : "]), Posbility: 0.0032
Next Token : ",, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :  "",, Posbility: 0.0002
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0009
Next Token : a, Posbility: 0.0031
Next Token : f, Posbility: 0.0040
Next Token : h, Posbility: 0.0085
Next Token : g, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0001
Next Token : ",", Posbility: 0.0005
Next Token : ", Posbility: 0.0009
Next Token : "]), Posbility: 0.0032
Next Token : ",, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "1", Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : b, Posbility: 0.0008
Next Token : c, Posbility: 0.0014
Next Token : a, Posbility: 0.0137
Next Token : g, Posbility: 0.0137
Next Token : h, Posbility: 0.9648
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "]);, Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : "], Posbility: 0.0002
Next Token : ",, Posbility: 0.0028
Next Token : "]), Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"])
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token : ), Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ×, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ←, Posbility: 0.0000
Next Token : ->, Posbility: 0.0005
Next Token : →, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) →
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : false, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0006
Next Token :  true, Posbility: 0.4375
Next Token :  false, Posbility: 0.5625
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : , Posbility: 0.0032
Next Token :  (*, Posbility: 0.0047
Next Token :  , Posbility: 0.0068
Next Token : 

, Posbility: 0.1982
Next Token : 
, Posbility: 0.7812
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 

, Posbility: 0.0164
Next Token : let, Posbility: 0.0210
Next Token : ```, Posbility: 0.0223
Next Token : ;, Posbility: 0.0237
Next Token : (, Posbility: 0.7852
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (), Posbility: 0.0005
Next Token :  is, Posbility: 0.0007
Next Token : let, Posbility: 0.0008
Next Token : *, Posbility: 0.0123
Next Token : is, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : All, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  all, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : same, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : al, Posbility: 0.0000
Next Token : any, Posbility: 0.0000
Next Token : all, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Same, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token : safe, Posbility: 0.0000
Next Token : sam, Posbility: 0.0000
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0007
Next Token :  [, Posbility: 0.0010
Next Token :  ", Posbility: 0.0012
Next Token :  [], Posbility: 0.0013
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : [', Posbility: 0.0004
Next Token : (, Posbility: 0.0008
Next Token : (", Posbility: 0.0017
Next Token : []), Posbility: 0.0140
Next Token : [", Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : h, Posbility: 0.0027
Next Token : x, Posbility: 0.0039
Next Token : c, Posbility: 0.0039
Next Token : b, Posbility: 0.0073
Next Token : a, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0002
Next Token : ",", Posbility: 0.0005
Next Token : ", Posbility: 0.0008
Next Token : "]), Posbility: 0.0032
Next Token : ",, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "2", Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  "1", Posbility: 0.0001
Next Token :  "",, Posbility: 0.0002
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0007
Next Token : d, Posbility: 0.0009
Next Token : c, Posbility: 0.0040
Next Token : a, Posbility: 0.0227
Next Token : b, Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : "]), Posbility: 0.0015
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "2", Posbility: 0.0000
Next Token :  "1", Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  "",, Posbility: 0.0002
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0007
Next Token : b, Posbility: 0.0013
Next Token : a, Posbility: 0.0022
Next Token : d, Posbility: 0.0036
Next Token : c, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : "]), Posbility: 0.0012
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  "",, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : c, Posbility: 0.0009
Next Token : f, Posbility: 0.0009
Next Token : a, Posbility: 0.0017
Next Token : e, Posbility: 0.0019
Next Token : d, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : "]), Posbility: 0.0013
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  "",, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : h, Posbility: 0.0005
Next Token : a, Posbility: 0.0006
Next Token : g, Posbility: 0.0006
Next Token : f, Posbility: 0.0012
Next Token : e, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : "]), Posbility: 0.0015
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  "",, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : a, Posbility: 0.0004
Next Token : e, Posbility: 0.0005
Next Token : h, Posbility: 0.0012
Next Token : g, Posbility: 0.0032
Next Token : f, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : "]), Posbility: 0.0008
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "",, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0002
Next Token : a, Posbility: 0.0003
Next Token : f, Posbility: 0.0028
Next Token : h, Posbility: 0.0140
Next Token : g, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ",", Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : "]), Posbility: 0.0012
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "",, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0003
Next Token : a, Posbility: 0.0007
Next Token : i, Posbility: 0.0008
Next Token : g, Posbility: 0.0019
Next Token : h, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0001
Next Token : ", Posbility: 0.0006
Next Token : ",", Posbility: 0.0006
Next Token : "]), Posbility: 0.0019
Next Token : ",, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  "1", Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : j, Posbility: 0.0034
Next Token : g, Posbility: 0.0039
Next Token : h, Posbility: 0.0039
Next Token : a, Posbility: 0.0175
Next Token : i, Posbility: 0.9531
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "]);, Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : "], Posbility: 0.0002
Next Token : ",, Posbility: 0.0025
Next Token : "]), Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"])
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : ), Posbility: 0.0003
Next Token : 
, Posbility: 0.0032
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : ←, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0004
Next Token : →, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) →
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : true, Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0017
Next Token :  false, Posbility: 0.3770
Next Token :  true, Posbility: 0.6211
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  (*, Posbility: 0.0035
Next Token : , Posbility: 0.0040
Next Token :  , Posbility: 0.0066
Next Token : 

, Posbility: 0.2178
Next Token : 
, Posbility: 0.7617
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 

, Posbility: 0.0151
Next Token : let, Posbility: 0.0249
Next Token : ```, Posbility: 0.0364
Next Token : ;, Posbility: 0.0386
Next Token : (, Posbility: 0.7305
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  is, Posbility: 0.0008
Next Token : let, Posbility: 0.0009
Next Token : (), Posbility: 0.0010
Next Token : *, Posbility: 0.0085
Next Token : is, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token : All, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  all, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : a, Posbility: 0.0000
Next Token : same, Posbility: 0.0000
Next Token : al, Posbility: 0.0000
Next Token : any, Posbility: 0.0000
Next Token : all, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Same, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token : safe, Posbility: 0.0000
Next Token : sam, Posbility: 0.0000
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0009
Next Token :  ", Posbility: 0.0013
Next Token :  [, Posbility: 0.0013
Next Token :  [], Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : [', Posbility: 0.0003
Next Token : (, Posbility: 0.0010
Next Token : (", Posbility: 0.0017
Next Token : []), Posbility: 0.0159
Next Token : [", Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : c, Posbility: 0.0027
Next Token : h, Posbility: 0.0030
Next Token : x, Posbility: 0.0034
Next Token : b, Posbility: 0.0073
Next Token : a, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0002
Next Token : ",", Posbility: 0.0004
Next Token : ", Posbility: 0.0007
Next Token : "]), Posbility: 0.0025
Next Token : ",, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "2", Posbility: 0.0000
Next Token :  "1", Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  "",, Posbility: 0.0002
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0004
Next Token : d, Posbility: 0.0005
Next Token : c, Posbility: 0.0024
Next Token : a, Posbility: 0.0109
Next Token : b, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : "]), Posbility: 0.0008
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  "1", Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  "",, Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0003
Next Token : b, Posbility: 0.0005
Next Token : a, Posbility: 0.0009
Next Token : d, Posbility: 0.0017
Next Token : c, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : "]), Posbility: 0.0006
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  "",, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : c, Posbility: 0.0003
Next Token : f, Posbility: 0.0003
Next Token : a, Posbility: 0.0006
Next Token : e, Posbility: 0.0007
Next Token : d, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0006
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  "",, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : g, Posbility: 0.0002
Next Token : h, Posbility: 0.0003
Next Token : a, Posbility: 0.0003
Next Token : f, Posbility: 0.0006
Next Token : e, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0005
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "",, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0001
Next Token : a, Posbility: 0.0001
Next Token : h, Posbility: 0.0004
Next Token : g, Posbility: 0.0012
Next Token : f, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0005
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "",, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : i, Posbility: 0.0001
Next Token : a, Posbility: 0.0001
Next Token : f, Posbility: 0.0004
Next Token : h, Posbility: 0.0032
Next Token : g, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0004
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "",, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : j, Posbility: 0.0001
Next Token : f, Posbility: 0.0002
Next Token : i, Posbility: 0.0007
Next Token : g, Posbility: 0.0015
Next Token : h, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : "]), Posbility: 0.0013
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : a, Posbility: 0.0005
Next Token : k, Posbility: 0.0009
Next Token : h, Posbility: 0.0010
Next Token : j, Posbility: 0.0041
Next Token : i, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0001
Next Token : ",", Posbility: 0.0002
Next Token : "]), Posbility: 0.0007
Next Token : ", Posbility: 0.0008
Next Token : ",, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "1", Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0012
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : h, Posbility: 0.0013
Next Token : g, Posbility: 0.0015
Next Token : a, Posbility: 0.0052
Next Token : k, Posbility: 0.0058
Next Token : j, Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "]);, Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : "], Posbility: 0.0004
Next Token : ",, Posbility: 0.0008
Next Token : "]), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"])
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : →, Posbility: 0.0000
Next Token :   , Posbility: 0.0002
Next Token : ), Posbility: 0.0003
Next Token : 
, Posbility: 0.0179
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : ←, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : ->, Posbility: 0.0007
Next Token : →, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) →
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : false, Posbility: 0.0005
Next Token : 
, Posbility: 0.0049
Next Token :  true, Posbility: 0.0598
Next Token :  false, Posbility: 0.9336
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : , Posbility: 0.0028
Next Token :  (*, Posbility: 0.0028
Next Token :  , Posbility: 0.0045
Next Token : 

, Posbility: 0.2197
Next Token : 
, Posbility: 0.7656
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : *, Posbility: 0.0164
Next Token : ```, Posbility: 0.0164
Next Token : let, Posbility: 0.0347
Next Token : ;, Posbility: 0.0447
Next Token : (, Posbility: 0.7422
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (), Posbility: 0.0007
Next Token :  is, Posbility: 0.0009
Next Token : let, Posbility: 0.0012
Next Token : *, Posbility: 0.0085
Next Token : is, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : All, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  all, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : a, Posbility: 0.0000
Next Token : al, Posbility: 0.0000
Next Token : same, Posbility: 0.0000
Next Token : any, Posbility: 0.0000
Next Token : all, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : SAM, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token : safe, Posbility: 0.0000
Next Token : sam, Posbility: 0.0000
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0012
Next Token : 
, Posbility: 0.0015
Next Token :  [, Posbility: 0.0015
Next Token :  [], Posbility: 0.0017
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : [', Posbility: 0.0003
Next Token : (, Posbility: 0.0010
Next Token : (", Posbility: 0.0017
Next Token : []), Posbility: 0.0124
Next Token : [", Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : A, Posbility: 0.0017
Next Token : c, Posbility: 0.0019
Next Token : x, Posbility: 0.0021
Next Token : b, Posbility: 0.0031
Next Token : a, Posbility: 0.9766
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0001
Next Token : ",", Posbility: 0.0003
Next Token : ", Posbility: 0.0006
Next Token : "]), Posbility: 0.0012
Next Token : ",, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  "1", Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  "",, Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0002
Next Token : d, Posbility: 0.0002
Next Token : c, Posbility: 0.0012
Next Token : a, Posbility: 0.0067
Next Token : b, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : "]), Posbility: 0.0003
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  "1", Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  "",, Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0001
Next Token : b, Posbility: 0.0003
Next Token : a, Posbility: 0.0005
Next Token : d, Posbility: 0.0007
Next Token : c, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : "]), Posbility: 0.0003
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  "",, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0001
Next Token : c, Posbility: 0.0002
Next Token : e, Posbility: 0.0003
Next Token : a, Posbility: 0.0003
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "],, Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0003
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : g, Posbility: 0.0001
Next Token : h, Posbility: 0.0001
Next Token : a, Posbility: 0.0002
Next Token : f, Posbility: 0.0002
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0002
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "",, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : j, Posbility: 0.0000
Next Token : a, Posbility: 0.0001
Next Token : h, Posbility: 0.0001
Next Token : g, Posbility: 0.0003
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0002
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "",, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : a, Posbility: 0.0001
Next Token : j, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : h, Posbility: 0.0004
Next Token : g, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0002
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : k, Posbility: 0.0000
Next Token : i, Posbility: 0.0001
Next Token : j, Posbility: 0.0002
Next Token : g, Posbility: 0.0003
Next Token : h, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : ",", Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0004
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : a, Posbility: 0.0001
Next Token : h, Posbility: 0.0003
Next Token : k, Posbility: 0.0005
Next Token : j, Posbility: 0.0046
Next Token : i, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : "]), Posbility: 0.0001
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0004
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : l, Posbility: 0.0001
Next Token : i, Posbility: 0.0003
Next Token : h, Posbility: 0.0003
Next Token : k, Posbility: 0.0025
Next Token : j, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0001
Next Token : ",", Posbility: 0.0002
Next Token : "]), Posbility: 0.0006
Next Token : ", Posbility: 0.0007
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ]), Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0025
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : o, Posbility: 0.0006
Next Token : j, Posbility: 0.0009
Next Token : l, Posbility: 0.0009
Next Token : a, Posbility: 0.0022
Next Token : k, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "]);, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "], Posbility: 0.0002
Next Token : ",, Posbility: 0.0006
Next Token : "]), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"])
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : →, Posbility: 0.0001
Next Token :   , Posbility: 0.0003
Next Token : ), Posbility: 0.0003
Next Token : 
, Posbility: 0.0293
Next Token :  , Posbility: 0.9688
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ≤, Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : ->, Posbility: 0.0008
Next Token : →, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) →
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : false, Posbility: 0.0003
Next Token : 
, Posbility: 0.0041
Next Token :  true, Posbility: 0.2217
Next Token :  false, Posbility: 0.7734
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  (*, Posbility: 0.0018
Next Token :  , Posbility: 0.0030
Next Token : , Posbility: 0.0034
Next Token : 

, Posbility: 0.1631
Next Token : 
, Posbility: 0.8281
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 

, Posbility: 0.0089
Next Token : ```, Posbility: 0.0137
Next Token : let, Posbility: 0.0291
Next Token : ;, Posbility: 0.0449
Next Token : (, Posbility: 0.7969
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (), Posbility: 0.0004
Next Token :  is, Posbility: 0.0007
Next Token : let, Posbility: 0.0007
Next Token : *, Posbility: 0.0075
Next Token : is, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : All, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  all, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : same, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : al, Posbility: 0.0000
Next Token : any, Posbility: 0.0000
Next Token : all, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Same, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token : safe, Posbility: 0.0000
Next Token : sam, Posbility: 0.0000
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0008
Next Token :  [], Posbility: 0.0012
Next Token :  [, Posbility: 0.0012
Next Token : 
, Posbility: 0.0022
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : [[", Posbility: 0.0002
Next Token : (, Posbility: 0.0007
Next Token : (", Posbility: 0.0013
Next Token : []), Posbility: 0.0075
Next Token : [", Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : A, Posbility: 0.0012
Next Token : x, Posbility: 0.0013
Next Token : c, Posbility: 0.0013
Next Token : b, Posbility: 0.0022
Next Token : a, Posbility: 0.9844
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0001
Next Token : ",", Posbility: 0.0002
Next Token : ", Posbility: 0.0004
Next Token : "]), Posbility: 0.0006
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  "1", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  "",, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : d, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : c, Posbility: 0.0005
Next Token : a, Posbility: 0.0025
Next Token : b, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0001
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  "",, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0001
Next Token : b, Posbility: 0.0001
Next Token : a, Posbility: 0.0002
Next Token : d, Posbility: 0.0003
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0001
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : c, Posbility: 0.0001
Next Token : e, Posbility: 0.0001
Next Token : a, Posbility: 0.0001
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "],, Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0001
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : g, Posbility: 0.0000
Next Token : h, Posbility: 0.0000
Next Token : a, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "",, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : j, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : h, Posbility: 0.0000
Next Token : g, Posbility: 0.0001
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : j, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : h, Posbility: 0.0001
Next Token : g, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "];, Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : i, Posbility: 0.0000
Next Token : k, Posbility: 0.0000
Next Token : j, Posbility: 0.0001
Next Token : g, Posbility: 0.0001
Next Token : h, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : ",", Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0001
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : k, Posbility: 0.0006
Next Token : j, Posbility: 0.0022
Next Token : i, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "];, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : l, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token : k, Posbility: 0.0036
Next Token : j, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : ",", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0012
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : m, Posbility: 0.0000
Next Token : h, Posbility: 0.0001
Next Token : j, Posbility: 0.0004
Next Token : l, Posbility: 0.0004
Next Token : k, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : ",", Posbility: 0.0001
Next Token : "]), Posbility: 0.0001
Next Token : ", Posbility: 0.0002
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ]), Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0052
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : j, Posbility: 0.0004
Next Token : a, Posbility: 0.0006
Next Token : h, Posbility: 0.0008
Next Token : m, Posbility: 0.0015
Next Token : l, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "]);, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ",, Posbility: 0.0002
Next Token : "], Posbility: 0.0002
Next Token : "]), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"])
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : →, Posbility: 0.0000
Next Token : ), Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0125
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ≤, Posbility: 0.0000
Next Token : ←, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : ->, Posbility: 0.0004
Next Token : →, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) →
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : false, Posbility: 0.0003
Next Token : 
, Posbility: 0.0026
Next Token :  true, Posbility: 0.2676
Next Token :  false, Posbility: 0.7266
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  (*, Posbility: 0.0012
Next Token :  , Posbility: 0.0023
Next Token : , Posbility: 0.0038
Next Token : 

, Posbility: 0.1807
Next Token : 
, Posbility: 0.8086
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 

, Posbility: 0.0095
Next Token : ```, Posbility: 0.0115
Next Token : let, Posbility: 0.0332
Next Token : ;, Posbility: 0.0425
Next Token : (, Posbility: 0.8047
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0002
Next Token : let, Posbility: 0.0005
Next Token :  is, Posbility: 0.0005
Next Token : *, Posbility: 0.0046
Next Token : is, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : All, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  all, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : same, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : al, Posbility: 0.0000
Next Token : any, Posbility: 0.0000
Next Token : all, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0000
Next Token :  [, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : equal, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token : safe, Posbility: 0.0000
Next Token : sam, Posbility: 0.0000
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0007
Next Token :  [], Posbility: 0.0009
Next Token :  [, Posbility: 0.0009
Next Token : 
, Posbility: 0.0025
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : [[", Posbility: 0.0002
Next Token : (, Posbility: 0.0005
Next Token : (", Posbility: 0.0008
Next Token : []), Posbility: 0.0052
Next Token : [", Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : x, Posbility: 0.0008
Next Token : A, Posbility: 0.0008
Next Token : c, Posbility: 0.0009
Next Token : b, Posbility: 0.0015
Next Token : a, Posbility: 0.9883
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0001
Next Token : ",", Posbility: 0.0001
Next Token : "]), Posbility: 0.0003
Next Token : ", Posbility: 0.0003
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  "1", Posbility: 0.0000
Next Token :  "",, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : d, Posbility: 0.0001
Next Token : f, Posbility: 0.0001
Next Token : c, Posbility: 0.0003
Next Token : a, Posbility: 0.0013
Next Token : b, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  "",, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : b, Posbility: 0.0001
Next Token : a, Posbility: 0.0001
Next Token : d, Posbility: 0.0002
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : e, Posbility: 0.0001
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : "],, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : d, Posbility: 0.0000
Next Token : h, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "",, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : h, Posbility: 0.0000
Next Token : g, Posbility: 0.0001
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : j, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : h, Posbility: 0.0001
Next Token : g, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : i, Posbility: 0.0000
Next Token : k, Posbility: 0.0000
Next Token : j, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : h, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : ",", Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : a, Posbility: 0.0000
Next Token : l, Posbility: 0.0000
Next Token : k, Posbility: 0.0002
Next Token : j, Posbility: 0.0006
Next Token : i, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : l, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token : k, Posbility: 0.0004
Next Token : j, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : "];, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : i, Posbility: 0.0000
Next Token : h, Posbility: 0.0000
Next Token : j, Posbility: 0.0001
Next Token : l, Posbility: 0.0003
Next Token : k, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : "];, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0012
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : j, Posbility: 0.0001
Next Token : m, Posbility: 0.0003
Next Token : k, Posbility: 0.0004
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : "]), Posbility: 0.0002
Next Token : ",", Posbility: 0.0002
Next Token : ", Posbility: 0.0003
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ]), Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0032
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : a, Posbility: 0.0002
Next Token : n, Posbility: 0.0003
Next Token : o, Posbility: 0.0006
Next Token : m, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "],, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "], Posbility: 0.0002
Next Token : ",, Posbility: 0.0007
Next Token : "]), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"])
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : →, Posbility: 0.0000
Next Token :   , Posbility: 0.0002
Next Token : ), Posbility: 0.0002
Next Token : 
, Posbility: 0.0076
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ←, Posbility: 0.0000
Next Token : ≤, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0004
Next Token : →, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) →
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : false, Posbility: 0.0003
Next Token : 
, Posbility: 0.0024
Next Token :  true, Posbility: 0.2441
Next Token :  false, Posbility: 0.7539
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  (*, Posbility: 0.0008
Next Token : , Posbility: 0.0017
Next Token :  , Posbility: 0.0019
Next Token : 

, Posbility: 0.1318
Next Token : 
, Posbility: 0.8633
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 

, Posbility: 0.0052
Next Token : ```, Posbility: 0.0071
Next Token : let, Posbility: 0.0232
Next Token : ;, Posbility: 0.0280
Next Token : (, Posbility: 0.8711
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0003
Next Token :  is, Posbility: 0.0004
Next Token : *, Posbility: 0.0022
Next Token : is, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : All, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  all, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : a, Posbility: 0.0000
Next Token : same, Posbility: 0.0000
Next Token : al, Posbility: 0.0000
Next Token : any, Posbility: 0.0000
Next Token : all, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : Same, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token : safe, Posbility: 0.0000
Next Token : sam, Posbility: 0.0000
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0003
Next Token :  [], Posbility: 0.0004
Next Token :  [, Posbility: 0.0005
Next Token : 
, Posbility: 0.0028
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : (, Posbility: 0.0002
Next Token : (", Posbility: 0.0005
Next Token : []), Posbility: 0.0022
Next Token : [", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : A, Posbility: 0.0004
Next Token : x, Posbility: 0.0004
Next Token : c, Posbility: 0.0005
Next Token : b, Posbility: 0.0009
Next Token : a, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : ",", Posbility: 0.0001
Next Token : "]), Posbility: 0.0001
Next Token : ", Posbility: 0.0002
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  "",, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : d, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : c, Posbility: 0.0001
Next Token : a, Posbility: 0.0006
Next Token : b, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : "],, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  "",, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : d, Posbility: 0.0001
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : m, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "],, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "],, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : m, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : h, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : "],, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : m, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : h, Posbility: 0.0000
Next Token : g, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "];, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : k, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : j, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : h, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "],, Posbility: 0.0000
Next Token : ",", Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : l, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : k, Posbility: 0.0001
Next Token : j, Posbility: 0.0002
Next Token : i, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : l, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : k, Posbility: 0.0001
Next Token : j, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : "];, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  k, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : j, Posbility: 0.0000
Next Token : l, Posbility: 0.0000
Next Token : k, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : "];, Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0002
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : j, Posbility: 0.0000
Next Token : k, Posbility: 0.0002
Next Token : m, Posbility: 0.0003
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ",", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0013
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : k, Posbility: 0.0000
Next Token : l, Posbility: 0.0000
Next Token : j, Posbility: 0.0000
Next Token : n, Posbility: 0.0001
Next Token : m, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",", Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  "1", Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0022
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : h, Posbility: 0.0001
Next Token : m, Posbility: 0.0001
Next Token : a, Posbility: 0.0002
Next Token : o, Posbility: 0.0059
Next Token : n, Posbility: 0.9922
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "]);, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "], Posbility: 0.0001
Next Token : ",, Posbility: 0.0001
Next Token : "]), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"])
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ,, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : ), Posbility: 0.0001
Next Token : 
, Posbility: 0.0025
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : ≤, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0003
Next Token : →, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) →
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0001
Next Token : false, Posbility: 0.0003
Next Token : 
, Posbility: 0.0007
Next Token :  true, Posbility: 0.0952
Next Token :  false, Posbility: 0.9023
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  (*, Posbility: 0.0008
Next Token : , Posbility: 0.0009
Next Token :  , Posbility: 0.0015
Next Token : 

, Posbility: 0.0845
Next Token : 
, Posbility: 0.9102
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ```, Posbility: 0.0052
Next Token : ..., Posbility: 0.0081
Next Token : let, Posbility: 0.0266
Next Token : ;, Posbility: 0.0364
Next Token : (, Posbility: 0.8828
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0002
Next Token :  is, Posbility: 0.0004
Next Token : *, Posbility: 0.0017
Next Token : is, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : All, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  all, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : a, Posbility: 0.0000
Next Token : same, Posbility: 0.0000
Next Token : al, Posbility: 0.0000
Next Token : any, Posbility: 0.0000
Next Token : all, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : same, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : equal, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token : safe, Posbility: 0.0000
Next Token : sam, Posbility: 0.0000
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ", Posbility: 0.0002
Next Token :  [], Posbility: 0.0002
Next Token :  [, Posbility: 0.0004
Next Token : 
, Posbility: 0.0041
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : (", Posbility: 0.0003
Next Token : []), Posbility: 0.0010
Next Token : [", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 1",, Posbility: 0.0002
Next Token : ",, Posbility: 0.0002
Next Token : c, Posbility: 0.0003
Next Token : b, Posbility: 0.0005
Next Token : a, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",", Posbility: 0.0000
Next Token : ", Posbility: 0.0001
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : d, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : c, Posbility: 0.0001
Next Token : a, Posbility: 0.0002
Next Token : b, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : "],, Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  "",, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : b, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : d, Posbility: 0.0000
Next Token : c, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : f, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : c, Posbility: 0.0000
Next Token : e, Posbility: 0.0000
Next Token : d, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "],, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : m, Posbility: 0.0000
Next Token : h, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : e, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "],, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : m, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : h, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : f, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ',, Posbility: 0.0000
Next Token : "],, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : m, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : h, Posbility: 0.0000
Next Token : g, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : m, Posbility: 0.0000
Next Token : f, Posbility: 0.0000
Next Token : j, Posbility: 0.0000
Next Token : g, Posbility: 0.0000
Next Token : h, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "],, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ",", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : a, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : k, Posbility: 0.0000
Next Token : j, Posbility: 0.0001
Next Token : i, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : h, Posbility: 0.0000
Next Token : i, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : k, Posbility: 0.0000
Next Token : j, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "];, Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  k, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : n, Posbility: 0.0000
Next Token : j, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : l, Posbility: 0.0000
Next Token : k, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "];, Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ',, Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : j, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : m, Posbility: 0.0000
Next Token : k, Posbility: 0.0001
Next Token : l, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : ",", Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0003
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : j, Posbility: 0.0000
Next Token : mM, Posbility: 0.0000
Next Token : k, Posbility: 0.0000
Next Token : n, Posbility: 0.0004
Next Token : m, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ",", Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ", Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0010
Next Token :  ", Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : k, Posbility: 0.0000
Next Token : j, Posbility: 0.0000
Next Token : o, Posbility: 0.0000
Next Token : m, Posbility: 0.0001
Next Token : n, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "], Posbility: 0.0000
Next Token : "]), Posbility: 0.0000
Next Token : ",", Posbility: 0.0001
Next Token : ", Posbility: 0.0001
Next Token : ",, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  ', Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0025
Next Token :  ", Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : a, Posbility: 0.0001
Next Token : m, Posbility: 0.0001
Next Token : q, Posbility: 0.0001
Next Token : p, Posbility: 0.0006
Next Token : o, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : "}), Posbility: 0.0000
Next Token : ", Posbility: 0.0000
Next Token : ",, Posbility: 0.0001
Next Token : "], Posbility: 0.0002
Next Token : "]), Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"])
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : →, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : ), Posbility: 0.0001
Next Token : 
, Posbility: 0.0028
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"]) 
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : ¬, Posbility: 0.0000
Next Token : ≤, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ->, Posbility: 0.0004
Next Token : →, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"]) →
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : false, Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token :  true, Posbility: 0.0420
Next Token :  false, Posbility: 0.9570
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"]) → false
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0005
Next Token : , Posbility: 0.0007
Next Token :  , Posbility: 0.0011
Next Token : 

, Posbility: 0.0598
Next Token : 
, Posbility: 0.9375
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"]) → false

 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : [, Posbility: 0.0029
Next Token : ..., Posbility: 0.0043
Next Token : let, Posbility: 0.0096
Next Token : ;, Posbility: 0.0232
Next Token : (, Posbility: 0.9258
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"]) → false
(
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : (, Posbility: 0.0001
Next Token : let, Posbility: 0.0001
Next Token :  is, Posbility: 0.0003
Next Token : *, Posbility: 0.0010
Next Token : is, Posbility: 0.9961
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"]) → false
(is
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : All, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  all, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"]) → false
(is_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : true, Posbility: 0.0000
Next Token : a, Posbility: 0.0000
Next Token : al, Posbility: 0.0000
Next Token : any, Posbility: 0.0000
Next Token : all, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"]) → false
(is_all
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :  ", Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"]) → false
(is_all_
 score:False
Error type: Lexer.Errorr
---------------------------
Next Token : equal, Posbility: 0.0000
Next Token :  same, Posbility: 0.0000
Next Token : safe, Posbility: 0.0000
Next Token : sam, Posbility: 0.0000
Next Token : same, Posbility: 1.0000
---------------------------
code:
 (* Write a  function to check whether all the characters are same or not. *)
let is_all_same = function
  | [] -> true
  | _ -> false
  | x :: xs -> is_all_same xs
|> List.fold_left (fun x y -> x = y)
;; (is_all_same ["a", "b", "c"]) → true
(is_all_same ["a", "b", "c", "d"]) → false
(is_all_same ["a", "b", "c", "d", "e"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i"]) → true
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"]) → false
(is_all_same ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o"]) → false
(is_all_same
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>