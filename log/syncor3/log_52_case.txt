code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  double, Posbility: 0.0052
Next Token :  sum, Posbility: 0.0066
Next Token :  list, Posbility: 0.0297
Next Token :  , Posbility: 0.2812
Next Token :  rec, Posbility: 0.5977
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0229
Next Token :  sum, Posbility: 0.0260
Next Token :  multi, Posbility: 0.0295
Next Token :  loop, Posbility: 0.0486
Next Token :  , Posbility: 0.6719
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : fold, Posbility: 0.0479
Next Token : product, Posbility: 0.0615
Next Token : mult, Posbility: 0.1670
Next Token : multiply, Posbility: 0.1895
Next Token : mul, Posbility: 0.1895
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0176
Next Token : div, Posbility: 0.0289
Next Token :  =, Posbility: 0.0422
Next Token :  , Posbility: 0.1011
Next Token : _, Posbility: 0.6602
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0850
Next Token : and, Posbility: 0.0850
Next Token : divide, Posbility: 0.1089
Next Token : div, Posbility: 0.1396
Next Token : list, Posbility: 0.1582
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  num, Posbility: 0.0171
Next Token :  l, Posbility: 0.0981
Next Token : _, Posbility: 0.1621
Next Token :  =, Posbility: 0.1621
Next Token :  , Posbility: 0.4395
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0928
Next Token : lst, Posbility: 0.1050
Next Token : n, Posbility: 0.1050
Next Token : (, Posbility: 0.1191
Next Token : x, Posbility: 0.3242
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0112
Next Token :  l, Posbility: 0.0267
Next Token :  , Posbility: 0.1748
Next Token :  =, Posbility: 0.3691
Next Token : s, Posbility: 0.3691
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0058
Next Token :  l, Posbility: 0.0074
Next Token :  acc, Posbility: 0.0095
Next Token :  , Posbility: 0.0903
Next Token :  =, Posbility: 0.8594
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0026
Next Token :  function, Posbility: 0.0048
Next Token :  match, Posbility: 0.0752
Next Token :  , Posbility: 0.0967
Next Token : 
, Posbility: 0.8086
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0044
Next Token :    , Posbility: 0.0093
Next Token : 	, Posbility: 0.0105
Next Token :     , Posbility: 0.1279
Next Token :   , Posbility: 0.8320
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : case, Posbility: 0.0042
Next Token : List, Posbility: 0.0239
Next Token : let, Posbility: 0.0947
Next Token : if, Posbility: 0.1562
Next Token : match, Posbility: 0.6992
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0004
Next Token : 
, Posbility: 0.0006
Next Token :  !, Posbility: 0.0006
Next Token :  String, Posbility: 0.0059
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Array, Posbility: 0.0014
Next Token : Seq, Posbility: 0.0022
Next Token : (, Posbility: 0.0037
Next Token : List, Posbility: 0.0840
Next Token : x, Posbility: 0.9023
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token :  with, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0002
Next Token :  , Posbility: 0.0006
Next Token : 
, Posbility: 0.0006
Next Token :  @, Posbility: 0.0006
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0016
Next Token :  , Posbility: 0.0034
Next Token :  [, Posbility: 0.0050
Next Token :  [], Posbility: 0.0369
Next Token : 
, Posbility: 0.9492
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token :       , Posbility: 0.0010
Next Token :    , Posbility: 0.0018
Next Token :     , Posbility: 0.0598
Next Token :   , Posbility: 0.9375
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : [, Posbility: 0.0136
Next Token : [], Posbility: 0.0289
Next Token : |, Posbility: 0.9570
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0009
Next Token :  nil, Posbility: 0.0064
Next Token :  , Posbility: 0.0175
Next Token :  [, Posbility: 0.0175
Next Token :  [], Posbility: 0.9531
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0031
Next Token :    , Posbility: 0.0050
Next Token :  |, Posbility: 0.0065
Next Token :  =>, Posbility: 0.0137
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0001
Next Token : -, Posbility: 0.0002
Next Token : →, Posbility: 0.0003
Next Token : ::, Posbility: 0.0013
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0084
Next Token :  1, Posbility: 0.1680
Next Token :  , Posbility: 0.1680
Next Token :  [], Posbility: 0.1680
Next Token :  0, Posbility: 0.4570
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0033
Next Token : L, Posbility: 0.0042
Next Token :  , Posbility: 0.0114
Next Token :  |, Posbility: 0.0581
Next Token : 
, Posbility: 0.9102
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : |, Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : |[, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0039
Next Token :  a, Posbility: 0.0073
Next Token :  [], Posbility: 0.0120
Next Token :  [, Posbility: 0.2129
Next Token :  , Posbility: 0.7422
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0179
Next Token : h, Posbility: 0.0297
Next Token : hd, Posbility: 0.0381
Next Token : _, Posbility: 0.0913
Next Token : x, Posbility: 0.7656
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0021
Next Token : :, Posbility: 0.0118
Next Token : s, Posbility: 0.0250
Next Token : ::, Posbility: 0.3047
Next Token :  , Posbility: 0.6445
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0003
Next Token : ^, Posbility: 0.0003
Next Token : :, Posbility: 0.0019
Next Token : ->, Posbility: 0.0109
Next Token : ::, Posbility: 0.9844
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  list, Posbility: 0.0011
Next Token :  l, Posbility: 0.0012
Next Token :  [], Posbility: 0.0048
Next Token :  rest, Posbility: 0.0747
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : xl, Posbility: 0.0026
Next Token : tail, Posbility: 0.0070
Next Token : y, Posbility: 0.0170
Next Token : _, Posbility: 0.0359
Next Token : x, Posbility: 0.9219
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : _, Posbility: 0.0005
Next Token : x, Posbility: 0.0005
Next Token : ', Posbility: 0.0041
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0154
Next Token : _, Posbility: 0.0254
Next Token : 1, Posbility: 0.0254
Next Token : ', Posbility: 0.0537
Next Token :  , Posbility: 0.8398
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : -, Posbility: 0.0002
Next Token : if, Posbility: 0.0003
Next Token : ::, Posbility: 0.0017
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0024
Next Token :  (1, Posbility: 0.0039
Next Token :  1, Posbility: 0.0064
Next Token : 
, Posbility: 0.0288
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0012
Next Token : let, Posbility: 0.0041
Next Token : mul, Posbility: 0.0060
Next Token : (, Posbility: 0.0938
Next Token : x, Posbility: 0.8906
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token : *, Posbility: 0.0044
Next Token : s, Posbility: 0.0056
Next Token :  , Posbility: 0.0082
Next Token :  +, Posbility: 0.0287
Next Token :  *, Posbility: 0.9492
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0005
Next Token :  1, Posbility: 0.0006
Next Token :  rec, Posbility: 0.0013
Next Token :  (1, Posbility: 0.0032
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0007
Next Token : 2, Posbility: 0.0012
Next Token : x, Posbility: 0.0388
Next Token : (, Posbility: 0.1738
Next Token : mul, Posbility: 0.7812
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_
 score:False
Error type: noerr
---------------------------
Next Token : rest, Posbility: 0.0000
Next Token : tail, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  ~, Posbility: 0.0003
Next Token : (, Posbility: 0.0140
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list 
 score:False
Error type: noerr
---------------------------
Next Token : ., Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : (, Posbility: 0.0140
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list x
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 

, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
 score:False
Error type: noerr
---------------------------
Next Token : ), Posbility: 0.0054
Next Token :  +, Posbility: 0.0054
Next Token :  , Posbility: 0.0089
Next Token : 

, Posbility: 0.4844
Next Token : 
, Posbility: 0.4844
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs

 score:False
Error type: noerr
---------------------------
Next Token : 

, Posbility: 0.0119
Next Token : (, Posbility: 0.0236
Next Token : in, Posbility: 0.0303
Next Token :   , Posbility: 0.0933
Next Token : let, Posbility: 0.6094
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0109
Next Token :  main, Posbility: 0.0159
Next Token :  list, Posbility: 0.0181
Next Token :  , Posbility: 0.1328
Next Token :  rec, Posbility: 0.7656
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0081
Next Token :  len, Posbility: 0.0092
Next Token :  sum, Posbility: 0.0118
Next Token :  rec, Posbility: 0.0469
Next Token :  , Posbility: 0.8281
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0225
Next Token : add, Posbility: 0.0369
Next Token : mul, Posbility: 0.0889
Next Token : divide, Posbility: 0.1875
Next Token : div, Posbility: 0.5117
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0013
Next Token : mod, Posbility: 0.0016
Next Token :  =, Posbility: 0.0023
Next Token :  , Posbility: 0.0366
Next Token : _, Posbility: 0.9453
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : with, Posbility: 0.0038
Next Token : by, Posbility: 0.0038
Next Token : len, Posbility: 0.0104
Next Token : length, Posbility: 0.0283
Next Token : list, Posbility: 0.9375
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0123
Next Token :  len, Posbility: 0.0260
Next Token :  l, Posbility: 0.0334
Next Token :  =, Posbility: 0.0430
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ls, Posbility: 0.0016
Next Token : length, Posbility: 0.0045
Next Token : n, Posbility: 0.0051
Next Token : (, Posbility: 0.0084
Next Token : x, Posbility: 0.9648
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  , Posbility: 0.0028
Next Token :  =, Posbility: 0.0028
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0085
Next Token :  l, Posbility: 0.0378
Next Token :  len, Posbility: 0.0625
Next Token :  , Posbility: 0.1030
Next Token :  =, Posbility: 0.7617
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0002
Next Token :   , Posbility: 0.0006
Next Token :  match, Posbility: 0.0064
Next Token :  , Posbility: 0.0327
Next Token : 
, Posbility: 0.9570
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0003
Next Token :    , Posbility: 0.0007
Next Token : let, Posbility: 0.0008
Next Token :     , Posbility: 0.0036
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0041
Next Token : mul, Posbility: 0.0077
Next Token : if, Posbility: 0.0127
Next Token : let, Posbility: 0.0732
Next Token : match, Posbility: 0.8906
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  String, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :  len, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0001
Next Token : div, Posbility: 0.0005
Next Token : (, Posbility: 0.0009
Next Token : mul, Posbility: 0.0041
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  with, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  avec, Posbility: 0.0000
Next Token :  |, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : 
, Posbility: 0.0002
Next Token :  with, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  [], Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token : 
, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :      , Posbility: 0.0000
Next Token :    , Posbility: 0.0001
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : {, Posbility: 0.0000
Next Token : case, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0003
Next Token :  0, Posbility: 0.0024
Next Token :  [, Posbility: 0.0024
Next Token :  , Posbility: 0.0067
Next Token :  [], Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  as, Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token :  =>, Posbility: 0.0003
Next Token :  |, Posbility: 0.0015
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : →, Posbility: 0.0000
Next Token : return, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0297
Next Token :  [], Posbility: 0.0297
Next Token :  1.0, Posbility: 0.0806
Next Token :  1, Posbility: 0.2197
Next Token :  0, Posbility: 0.5977
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0003
Next Token :  |, Posbility: 0.0005
Next Token : ., Posbility: 0.0009
Next Token :  , Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  
 score:False
Error type: noerr
---------------------------
Next Token : //, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : else, Posbility: 0.0000
Next Token : let, Posbility: 0.0000
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0039
Next Token :  [], Posbility: 0.0064
Next Token :  [, Posbility: 0.0106
Next Token :  0, Posbility: 0.0175
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0018
Next Token : (, Posbility: 0.0030
Next Token : head, Posbility: 0.0039
Next Token : _, Posbility: 0.0325
Next Token : x, Posbility: 0.9531
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0003
Next Token : :, Posbility: 0.0003
Next Token : s, Posbility: 0.0028
Next Token : ::, Posbility: 0.0109
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0001
Next Token : ->, Posbility: 0.0003
Next Token : /, Posbility: 0.0004
Next Token : :, Posbility: 0.0008
Next Token : ::, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  rest, Posbility: 0.0002
Next Token :  [], Posbility: 0.0006
Next Token :  0, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tail, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : y, Posbility: 0.0007
Next Token : _, Posbility: 0.0076
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ', Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  =>, Posbility: 0.0003
Next Token : 
, Posbility: 0.0005
Next Token :  when, Posbility: 0.0067
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : ::, Posbility: 0.0000
Next Token : if, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (1, Posbility: 0.0030
Next Token :  ((, Posbility: 0.0063
Next Token :  1, Posbility: 0.0104
Next Token : 
, Posbility: 0.0283
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0045
Next Token : div, Posbility: 0.0894
Next Token : (, Posbility: 0.1147
Next Token : mul, Posbility: 0.1147
Next Token : x, Posbility: 0.6602
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x
 score:False
Error type: noerr
---------------------------
Next Token :  +, Posbility: 0.0037
Next Token : /, Posbility: 0.0042
Next Token : s, Posbility: 0.0061
Next Token :  *, Posbility: 0.0747
Next Token :  , Posbility: 0.9102
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x 
 score:False
Error type: noerr
---------------------------
Next Token : ^, Posbility: 0.0004
Next Token : -, Posbility: 0.0004
Next Token : //, Posbility: 0.0015
Next Token : div, Posbility: 0.0019
Next Token : /, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0024
Next Token :  len, Posbility: 0.0045
Next Token :  float, Posbility: 0.0045
Next Token :  ((, Posbility: 0.0074
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0383
Next Token : div, Posbility: 0.1719
Next Token : length, Posbility: 0.1719
Next Token : mul, Posbility: 0.2832
Next Token : (, Posbility: 0.2832
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0403
Next Token : div, Posbility: 0.0403
Next Token : mul, Posbility: 0.1797
Next Token : List, Posbility: 0.2314
Next Token : length, Posbility: 0.2617
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ~, Posbility: 0.0005
Next Token :  +, Posbility: 0.0027
Next Token : _, Posbility: 0.0045
Next Token : (, Posbility: 0.0178
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ::, Posbility: 0.0000
Next Token : /, Posbility: 0.0001
Next Token : ^, Posbility: 0.0001
Next Token : (, Posbility: 0.0041
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : ), Posbility: 0.0006
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  *, Posbility: 0.0081
Next Token : )), Posbility: 0.0220
Next Token :  , Posbility: 0.0598
Next Token :  +, Posbility: 0.4434
Next Token : ), Posbility: 0.4434
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
 score:False
Error type: noerr
---------------------------
Next Token :  *, Posbility: 0.0107
Next Token :  +, Posbility: 0.0107
Next Token :  , Posbility: 0.0177
Next Token : 

, Posbility: 0.3555
Next Token : 
, Posbility: 0.5859
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)

 score:False
Error type: noerr
---------------------------
Next Token : val, Posbility: 0.0098
Next Token : ```, Posbility: 0.0126
Next Token : 

, Posbility: 0.0143
Next Token : in, Posbility: 0.0172
Next Token : let, Posbility: 0.7812
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  test, Posbility: 0.0071
Next Token :  list, Posbility: 0.0194
Next Token :  main, Posbility: 0.0194
Next Token :  , Posbility: 0.2363
Next Token :  rec, Posbility: 0.6406
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0183
Next Token :  loop, Posbility: 0.0183
Next Token :  sum, Posbility: 0.0266
Next Token :  rec, Posbility: 0.0439
Next Token :  , Posbility: 0.6875
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : mult, Posbility: 0.0383
Next Token : length, Posbility: 0.0435
Next Token : add, Posbility: 0.0718
Next Token : div, Posbility: 0.0811
Next Token : mul, Posbility: 0.2832
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0061
Next Token : n, Posbility: 0.0079
Next Token :  =, Posbility: 0.0079
Next Token :  , Posbility: 0.0354
Next Token : _, Posbility: 0.9102
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0532
Next Token : all, Posbility: 0.0684
Next Token : and, Posbility: 0.0684
Next Token : div, Posbility: 0.1128
Next Token : list, Posbility: 0.3066
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0069
Next Token :  , Posbility: 0.0452
Next Token : ', Posbility: 0.0513
Next Token : 2, Posbility: 0.0659
Next Token : _, Posbility: 0.8008
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0493
Next Token : and, Posbility: 0.0559
Next Token : len, Posbility: 0.0635
Next Token : length, Posbility: 0.0923
Next Token : div, Posbility: 0.1338
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0034
Next Token :  list, Posbility: 0.0049
Next Token :  =, Posbility: 0.0530
Next Token :  , Posbility: 0.3457
Next Token : _, Posbility: 0.5703
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sum, Posbility: 0.0020
Next Token : all, Posbility: 0.0043
Next Token : len, Posbility: 0.0131
Next Token : length, Posbility: 0.0356
Next Token : list, Posbility: 0.9219
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0026
Next Token :  l, Posbility: 0.0092
Next Token : _, Posbility: 0.0250
Next Token :  =, Posbility: 0.1123
Next Token :  , Posbility: 0.8281
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (), Posbility: 0.0008
Next Token : lst, Posbility: 0.0022
Next Token : ls, Posbility: 0.0031
Next Token : (, Posbility: 0.0040
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token :  =, Posbility: 0.0025
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0014
Next Token : s, Posbility: 0.0014
Next Token : 1, Posbility: 0.0064
Next Token :  , Posbility: 0.0288
Next Token :  =, Posbility: 0.9570
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0006
Next Token :  rec, Posbility: 0.0009
Next Token :   , Posbility: 0.0019
Next Token :  , Posbility: 0.3184
Next Token : 
, Posbility: 0.6719
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0004
Next Token :    , Posbility: 0.0012
Next Token : let, Posbility: 0.0015
Next Token :     , Posbility: 0.0046
Next Token :   , Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0278
Next Token : div, Posbility: 0.0459
Next Token : mul, Posbility: 0.2061
Next Token : match, Posbility: 0.3398
Next Token : let, Posbility: 0.3398
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0127
Next Token :  l, Posbility: 0.0938
Next Token :  rec, Posbility: 0.1543
Next Token :  len, Posbility: 0.1982
Next Token :  , Posbility: 0.4199
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0698
Next Token : y, Posbility: 0.0791
Next Token : length, Posbility: 0.0791
Next Token : mul, Posbility: 0.0898
Next Token : x, Posbility: 0.2754
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ,, Posbility: 0.0045
Next Token : len, Posbility: 0.0121
Next Token : _, Posbility: 0.0330
Next Token :  =, Posbility: 0.2441
Next Token : s, Posbility: 0.6641
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0388
Next Token : 2, Posbility: 0.0640
Next Token : ', Posbility: 0.0825
Next Token :  =, Posbility: 0.2871
Next Token : _, Posbility: 0.4746
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : mul, Posbility: 0.0271
Next Token :  =, Posbility: 0.0347
Next Token : div, Posbility: 0.0574
Next Token : length, Posbility: 0.2002
Next Token : len, Posbility: 0.4238
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : =, Posbility: 0.0003
Next Token : ,, Posbility: 0.0004
Next Token : _, Posbility: 0.0085
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0003
Next Token :  list, Posbility: 0.0004
Next Token :  len, Posbility: 0.0009
Next Token : 
, Posbility: 0.0012
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0011
Next Token : Length, Posbility: 0.0011
Next Token : (, Posbility: 0.0040
Next Token : List, Posbility: 0.0139
Next Token : length, Posbility: 0.9766
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  ~, Posbility: 0.0001
Next Token : _, Posbility: 0.0002
Next Token : (, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : @@, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0032
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0009
Next Token : ;, Posbility: 0.0009
Next Token :  =, Posbility: 0.0014
Next Token : 
, Posbility: 0.0292
Next Token :  in, Posbility: 0.9648
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  match, Posbility: 0.0007
Next Token : 

, Posbility: 0.0019
Next Token :  , Posbility: 0.0046
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token :       , Posbility: 0.0004
Next Token :    , Posbility: 0.0004
Next Token :     , Posbility: 0.0022
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0889
Next Token : if, Posbility: 0.0889
Next Token : mul, Posbility: 0.1465
Next Token : match, Posbility: 0.1885
Next Token : let, Posbility: 0.3984
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0121
Next Token :  res, Posbility: 0.0200
Next Token :  len, Posbility: 0.0542
Next Token :  rec, Posbility: 0.2432
Next Token :  , Posbility: 0.5156
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : prod, Posbility: 0.0300
Next Token : div, Posbility: 0.0437
Next Token : y, Posbility: 0.0635
Next Token : mul, Posbility: 0.1348
Next Token : x, Posbility: 0.4688
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0056
Next Token : 1, Posbility: 0.0056
Next Token :  =, Posbility: 0.0410
Next Token : _, Posbility: 0.1113
Next Token : s, Posbility: 0.8242
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0047
Next Token : ', Posbility: 0.0047
Next Token : 2, Posbility: 0.0099
Next Token :  =, Posbility: 0.0737
Next Token : _, Posbility: 0.8945
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : head, Posbility: 0.0265
Next Token : div, Posbility: 0.0493
Next Token : mul, Posbility: 0.0923
Next Token : sum, Posbility: 0.1045
Next Token : len, Posbility: 0.4141
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0046
Next Token :  , Posbility: 0.0183
Next Token : 2, Posbility: 0.0303
Next Token :  =, Posbility: 0.1357
Next Token : _, Posbility: 0.7812
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0613
Next Token : div, Posbility: 0.1011
Next Token : rec, Posbility: 0.1011
Next Token : minus, Posbility: 0.1147
Next Token : inv, Posbility: 0.1475
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : r, Posbility: 0.0008
Next Token : s, Posbility: 0.0011
Next Token :  , Posbility: 0.0040
Next Token : _, Posbility: 0.0085
Next Token :  =, Posbility: 0.9805
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (1, Posbility: 0.0074
Next Token :  rec, Posbility: 0.0123
Next Token :  1.0, Posbility: 0.1914
Next Token :  , Posbility: 0.2461
Next Token :  1, Posbility: 0.5195
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0007
Next Token : _, Posbility: 0.0012
Next Token : ., Posbility: 0.0020
Next Token : /, Posbility: 0.0845
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0002
Next Token : /\, Posbility: 0.0003
Next Token : div, Posbility: 0.0003
Next Token : -, Posbility: 0.0010
Next Token : /, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 /
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0011
Next Token :  double, Posbility: 0.0013
Next Token :  ((, Posbility: 0.0027
Next Token :  float, Posbility: 0.0417
Next Token :  , Posbility: 0.9492
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Float, Posbility: 0.0009
Next Token : mul, Posbility: 0.0009
Next Token : length, Posbility: 0.0023
Next Token : (, Posbility: 0.0471
Next Token : x, Posbility: 0.9453
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  len, Posbility: 0.0002
Next Token :  in, Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : in, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0009
Next Token : ;, Posbility: 0.0009
Next Token : 
, Posbility: 0.0012
Next Token :  , Posbility: 0.0015
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0006
Next Token : 

, Posbility: 0.0012
Next Token :  , Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0003
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0227
Next Token : (, Posbility: 0.0618
Next Token : match, Posbility: 0.1309
Next Token : mul, Posbility: 0.2773
Next Token : let, Posbility: 0.4551
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0087
Next Token :  sum, Posbility: 0.0098
Next Token :  res, Posbility: 0.0162
Next Token :  rec, Posbility: 0.3262
Next Token :  , Posbility: 0.5352
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0162
Next Token : prod, Posbility: 0.0267
Next Token : y, Posbility: 0.0566
Next Token : mul, Posbility: 0.1357
Next Token : x, Posbility: 0.5352
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0014
Next Token : 0, Posbility: 0.0024
Next Token : _, Posbility: 0.0175
Next Token :  =, Posbility: 0.0175
Next Token : s, Posbility: 0.9570
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0029
Next Token : 2, Posbility: 0.0079
Next Token : ', Posbility: 0.0101
Next Token :  =, Posbility: 0.0581
Next Token : _, Posbility: 0.9102
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : prod, Posbility: 0.0334
Next Token : sum, Posbility: 0.0552
Next Token : mul, Posbility: 0.1030
Next Token : inv, Posbility: 0.1167
Next Token : len, Posbility: 0.3594
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0023
Next Token :  , Posbility: 0.0056
Next Token : 2, Posbility: 0.0064
Next Token :  =, Posbility: 0.0254
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rec, Posbility: 0.0197
Next Token : pow, Posbility: 0.0253
Next Token : sq, Posbility: 0.0253
Next Token : div, Posbility: 0.0417
Next Token : inv, Posbility: 0.6523
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0053
Next Token :  , Posbility: 0.0088
Next Token :  =, Posbility: 0.0238
Next Token : 2, Posbility: 0.0444
Next Token : _, Posbility: 0.8945
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0620
Next Token : div, Posbility: 0.0703
Next Token : sq, Posbility: 0.0898
Next Token : inv, Posbility: 0.1021
Next Token : x, Posbility: 0.1680
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0010
Next Token : or, Posbility: 0.0010
Next Token : _, Posbility: 0.0342
Next Token :  =, Posbility: 0.0723
Next Token : s, Posbility: 0.8828
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0033
Next Token : len, Posbility: 0.0033
Next Token :  , Posbility: 0.0090
Next Token :  =, Posbility: 0.4883
Next Token : _, Posbility: 0.4883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0098
Next Token : prod, Posbility: 0.0162
Next Token : sum, Posbility: 0.0162
Next Token : mul, Posbility: 0.0162
Next Token : len, Posbility: 0.8828
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token : 2, Posbility: 0.0005
Next Token :  , Posbility: 0.0073
Next Token : _, Posbility: 0.1465
Next Token :  =, Posbility: 0.8398
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1.0, Posbility: 0.0009
Next Token :  (1, Posbility: 0.0012
Next Token : 
, Posbility: 0.0040
Next Token :  1, Posbility: 0.0085
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pow, Posbility: 0.0011
Next Token : div, Posbility: 0.0023
Next Token : (, Posbility: 0.0215
Next Token : mul, Posbility: 0.0583
Next Token : x, Posbility: 0.9102
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0001
Next Token :  ~, Posbility: 0.0001
Next Token :  , Posbility: 0.0024
Next Token :  *, Posbility: 0.0229
Next Token : _, Posbility: 0.9727
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pow, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : int, Posbility: 0.0000
Next Token : inverse, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token : /, Posbility: 0.0005
Next Token : *, Posbility: 0.0008
Next Token :  , Posbility: 0.4375
Next Token :  *, Posbility: 0.5625
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : =, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  ((, Posbility: 0.0001
Next Token :  (1, Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0003
Next Token : length, Posbility: 0.0009
Next Token : (, Posbility: 0.0025
Next Token : mul, Posbility: 0.0025
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  len, Posbility: 0.0005
Next Token :  in, Posbility: 0.0013
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0004
Next Token :   , Posbility: 0.0008
Next Token : ;, Posbility: 0.0008
Next Token : _, Posbility: 0.0097
Next Token :  in, Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0017
Next Token : 

, Posbility: 0.0022
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :       , Posbility: 0.0001
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0264
Next Token : (, Posbility: 0.0559
Next Token : match, Posbility: 0.0918
Next Token : mul, Posbility: 0.2500
Next Token : let, Posbility: 0.5312
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  acc, Posbility: 0.0069
Next Token :  sum, Posbility: 0.0101
Next Token :  res, Posbility: 0.0129
Next Token :  rec, Posbility: 0.3340
Next Token :  , Posbility: 0.5508
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0210
Next Token : prod, Posbility: 0.0210
Next Token : y, Posbility: 0.0444
Next Token : mul, Posbility: 0.1064
Next Token : x, Posbility: 0.6133
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0014
Next Token : 0, Posbility: 0.0024
Next Token : _, Posbility: 0.0176
Next Token :  =, Posbility: 0.0176
Next Token : s, Posbility: 0.9570
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0029
Next Token : 2, Posbility: 0.0047
Next Token : ', Posbility: 0.0078
Next Token :  =, Posbility: 0.0737
Next Token : _, Posbility: 0.8984
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0172
Next Token : sum, Posbility: 0.0250
Next Token : mul, Posbility: 0.0530
Next Token : inv, Posbility: 0.0874
Next Token : len, Posbility: 0.6445
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0017
Next Token : _2_, Posbility: 0.0017
Next Token :  , Posbility: 0.0027
Next Token :  =, Posbility: 0.0096
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pow, Posbility: 0.0045
Next Token : mul, Posbility: 0.0096
Next Token : div, Posbility: 0.0204
Next Token : x, Posbility: 0.0432
Next Token : inv, Posbility: 0.8672
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0015
Next Token : 2, Posbility: 0.0031
Next Token :  , Posbility: 0.0040
Next Token :  =, Posbility: 0.0058
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : mul, Posbility: 0.0151
Next Token : inv, Posbility: 0.0151
Next Token : div, Posbility: 0.0249
Next Token : len, Posbility: 0.0249
Next Token : x, Posbility: 0.8242
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 2, Posbility: 0.0001
Next Token : _, Posbility: 0.0041
Next Token :  =, Posbility: 0.0046
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _0_, Posbility: 0.0002
Next Token : s, Posbility: 0.0008
Next Token :  , Posbility: 0.0014
Next Token :  =, Posbility: 0.0757
Next Token : _, Posbility: 0.9219
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0050
Next Token : length, Posbility: 0.0050
Next Token : inv, Posbility: 0.0050
Next Token : sum, Posbility: 0.0064
Next Token : len, Posbility: 0.9570
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0016
Next Token : 2, Posbility: 0.0035
Next Token :  =, Posbility: 0.0084
Next Token :  , Posbility: 0.0176
Next Token : _, Posbility: 0.9648
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : mul, Posbility: 0.0294
Next Token : sq, Posbility: 0.0294
Next Token : div, Posbility: 0.0625
Next Token : inv, Posbility: 0.2178
Next Token : x, Posbility: 0.4609
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : i, Posbility: 0.0006
Next Token : 2, Posbility: 0.0027
Next Token : _, Posbility: 0.0197
Next Token :  =, Posbility: 0.0223
Next Token : s, Posbility: 0.9492
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0007
Next Token :  len, Posbility: 0.0012
Next Token :  , Posbility: 0.0090
Next Token :  =, Posbility: 0.4922
Next Token : _, Posbility: 0.4922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0062
Next Token : length, Posbility: 0.0103
Next Token : sum, Posbility: 0.0103
Next Token : inv, Posbility: 0.0168
Next Token : len, Posbility: 0.9219
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0007
Next Token : 2, Posbility: 0.0007
Next Token :  , Posbility: 0.0146
Next Token : _, Posbility: 0.1777
Next Token :  =, Posbility: 0.7969
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  (1, Posbility: 0.0005
Next Token :  1, Posbility: 0.0031
Next Token : 
, Posbility: 0.0140
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pow, Posbility: 0.0005
Next Token : div, Posbility: 0.0014
Next Token : (, Posbility: 0.0222
Next Token : mul, Posbility: 0.0286
Next Token : x, Posbility: 0.9453
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0000
Next Token : ., Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0000
Next Token :  +, Posbility: 0.0002
Next Token :  , Posbility: 0.0015
Next Token :  *, Posbility: 0.0179
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : inverse, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0003
Next Token :  +, Posbility: 0.0006
Next Token :  , Posbility: 0.0184
Next Token :  *, Posbility: 0.3691
Next Token : _, Posbility: 0.6094
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : times, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : mul, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : с, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : leg, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  +, Posbility: 0.0003
Next Token : _, Posbility: 0.0009
Next Token :  , Posbility: 0.0474
Next Token :  *, Posbility: 0.9492
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  1, Posbility: 0.0000
Next Token :  ((, Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  (1, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : mul, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : (, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : ln, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0004
Next Token :   , Posbility: 0.0005
Next Token : 
, Posbility: 0.0005
Next Token : _, Posbility: 0.2217
Next Token :  in, Posbility: 0.7734
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0000
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0010
Next Token : 

, Posbility: 0.0019
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :  , Posbility: 0.0002
Next Token :     , Posbility: 0.0006
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0432
Next Token : match, Posbility: 0.0557
Next Token : (, Posbility: 0.0713
Next Token : mul, Posbility: 0.2490
Next Token : let, Posbility: 0.5273
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  result, Posbility: 0.0081
Next Token :  sum, Posbility: 0.0117
Next Token :  res, Posbility: 0.0194
Next Token :  rec, Posbility: 0.2363
Next Token :  , Posbility: 0.6406
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0216
Next Token : prod, Posbility: 0.0216
Next Token : y, Posbility: 0.0518
Next Token : mul, Posbility: 0.0967
Next Token : x, Posbility: 0.6289
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0009
Next Token : 0, Posbility: 0.0024
Next Token : _, Posbility: 0.0176
Next Token :  =, Posbility: 0.0176
Next Token : s, Posbility: 0.9570
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0028
Next Token : ', Posbility: 0.0036
Next Token : 2, Posbility: 0.0036
Next Token :  =, Posbility: 0.0933
Next Token : _, Posbility: 0.8867
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0139
Next Token : sum, Posbility: 0.0178
Next Token : mul, Posbility: 0.0378
Next Token : inv, Posbility: 0.0486
Next Token : len, Posbility: 0.7617
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0009
Next Token : 2, Posbility: 0.0010
Next Token :  , Posbility: 0.0024
Next Token :  =, Posbility: 0.0123
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pow, Posbility: 0.0014
Next Token : mul, Posbility: 0.0063
Next Token : div, Posbility: 0.0104
Next Token : x, Posbility: 0.0282
Next Token : inv, Posbility: 0.9336
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0009
Next Token : 2, Posbility: 0.0012
Next Token :  , Posbility: 0.0017
Next Token :  =, Posbility: 0.0052
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0015
Next Token : y, Posbility: 0.0019
Next Token : mul, Posbility: 0.0051
Next Token : div, Posbility: 0.0065
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0003
Next Token : _, Posbility: 0.0004
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0002
Next Token : x, Posbility: 0.0002
Next Token : sum, Posbility: 0.0004
Next Token : length, Posbility: 0.0004
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0004
Next Token :  *, Posbility: 0.0019
Next Token :  , Posbility: 0.0058
Next Token :  =, Posbility: 0.0109
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0018
Next Token : inv, Posbility: 0.0064
Next Token : mul, Posbility: 0.0064
Next Token : div, Posbility: 0.0106
Next Token : x, Posbility: 0.9531
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : _, Posbility: 0.0009
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  =, Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0003
Next Token : sum, Posbility: 0.0003
Next Token : list, Posbility: 0.0004
Next Token : length, Posbility: 0.0004
Next Token : len, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0020
Next Token :  *, Posbility: 0.0092
Next Token :  =, Posbility: 0.0220
Next Token :  , Posbility: 0.0282
Next Token : _, Posbility: 0.9336
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0327
Next Token : mul, Posbility: 0.0420
Next Token : div, Posbility: 0.0540
Next Token : inv, Posbility: 0.0889
Next Token : x, Posbility: 0.6562
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0007
Next Token : n, Posbility: 0.0009
Next Token : _, Posbility: 0.0024
Next Token :  =, Posbility: 0.0067
Next Token : s, Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0008
Next Token :  in, Posbility: 0.0008
Next Token :  , Posbility: 0.0022
Next Token :  =, Posbility: 0.1182
Next Token : _, Posbility: 0.8750
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0012
Next Token : list, Posbility: 0.0019
Next Token : inv, Posbility: 0.0019
Next Token : length, Posbility: 0.0040
Next Token : len, Posbility: 0.9844
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0006
Next Token : 
, Posbility: 0.0014
Next Token :  , Posbility: 0.0103
Next Token : _, Posbility: 0.0591
Next Token :  =, Posbility: 0.9219
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  (1, Posbility: 0.0007
Next Token :  1, Posbility: 0.0036
Next Token : 
, Posbility: 0.1182
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0011
Next Token : 
, Posbility: 0.0024
Next Token : (, Posbility: 0.0138
Next Token : mul, Posbility: 0.0138
Next Token : x, Posbility: 0.9648
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : size, Posbility: 0.0000
Next Token : ln, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token :  *, Posbility: 0.0017
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : inc, Posbility: 0.0000
Next Token : inverse, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0001
Next Token :  , Posbility: 0.0005
Next Token :  *, Posbility: 0.0110
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : mul, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : с, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : leg, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  +, Posbility: 0.0006
Next Token :  , Posbility: 0.0029
Next Token :  *, Posbility: 0.0947
Next Token : _, Posbility: 0.9023
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : mul, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : S, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : leg, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0008
Next Token :  +, Posbility: 0.0008
Next Token :  , Posbility: 0.0452
Next Token : _, Posbility: 0.0452
Next Token :  *, Posbility: 0.9062
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token :  1, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : mul, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : (, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : ln, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0003
Next Token :  *, Posbility: 0.0004
Next Token : 
, Posbility: 0.0017
Next Token : _, Posbility: 0.3203
Next Token :  in, Posbility: 0.6758
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0032
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0002
Next Token :       , Posbility: 0.0003
Next Token :  , Posbility: 0.0003
Next Token :     , Posbility: 0.0008
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0342
Next Token : div, Posbility: 0.0437
Next Token : (, Posbility: 0.0723
Next Token : mul, Posbility: 0.2520
Next Token : let, Posbility: 0.5312
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  result, Posbility: 0.0115
Next Token :  sum, Posbility: 0.0115
Next Token :  res, Posbility: 0.0243
Next Token :  rec, Posbility: 0.1582
Next Token :  , Posbility: 0.7109
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0148
Next Token : prod, Posbility: 0.0148
Next Token : y, Posbility: 0.0457
Next Token : mul, Posbility: 0.0752
Next Token : x, Posbility: 0.7148
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0009
Next Token : 0, Posbility: 0.0014
Next Token : _, Posbility: 0.0107
Next Token :  =, Posbility: 0.0177
Next Token : s, Posbility: 0.9648
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0017
Next Token : 2, Posbility: 0.0017
Next Token :  , Posbility: 0.0035
Next Token :  =, Posbility: 0.1172
Next Token : _, Posbility: 0.8672
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0099
Next Token : sum, Posbility: 0.0099
Next Token : mul, Posbility: 0.0164
Next Token : inv, Posbility: 0.0164
Next Token : len, Posbility: 0.8906
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _2_, Posbility: 0.0005
Next Token : 2, Posbility: 0.0007
Next Token :  , Posbility: 0.0017
Next Token :  =, Posbility: 0.0124
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pow, Posbility: 0.0009
Next Token : mul, Posbility: 0.0039
Next Token : div, Posbility: 0.0065
Next Token : x, Posbility: 0.0176
Next Token : inv, Posbility: 0.9570
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0004
Next Token : 2, Posbility: 0.0006
Next Token :  , Posbility: 0.0007
Next Token :  =, Posbility: 0.0046
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0004
Next Token : 2, Posbility: 0.0005
Next Token : mul, Posbility: 0.0017
Next Token : div, Posbility: 0.0019
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0002
Next Token :  *, Posbility: 0.0004
Next Token :  , Posbility: 0.0005
Next Token :  =, Posbility: 0.0032
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0001
Next Token : inv, Posbility: 0.0003
Next Token : mul, Posbility: 0.0005
Next Token : div, Posbility: 0.0013
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token :  *, Posbility: 0.0010
Next Token :  =, Posbility: 0.0046
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0002
Next Token : inv, Posbility: 0.0007
Next Token : mul, Posbility: 0.0007
Next Token : div, Posbility: 0.0019
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0026
Next Token :  *, Posbility: 0.0091
Next Token :  , Posbility: 0.0132
Next Token :  =, Posbility: 0.0461
Next Token : _, Posbility: 0.9258
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0101
Next Token : div, Posbility: 0.0129
Next Token : mul, Posbility: 0.0166
Next Token : inv, Posbility: 0.0166
Next Token : x, Posbility: 0.9062
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : n, Posbility: 0.0002
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 0.0010
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : s, Posbility: 0.0003
Next Token :  =, Posbility: 0.0110
Next Token : _, Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : sum, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token : list, Posbility: 0.0003
Next Token : length, Posbility: 0.0004
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0003
Next Token : 
, Posbility: 0.0019
Next Token :  , Posbility: 0.0027
Next Token : _, Posbility: 0.0178
Next Token :  =, Posbility: 0.9727
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  ..., Posbility: 0.0018
Next Token :  1, Posbility: 0.0029
Next Token : 
, Posbility: 0.1807
Next Token :  , Posbility: 0.8125
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : \, Posbility: 0.0019
Next Token : 
, Posbility: 0.0051
Next Token : mul, Posbility: 0.0051
Next Token : (, Posbility: 0.0066
Next Token : x, Posbility: 0.9805
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : inverse, Posbility: 0.0000
Next Token : inc, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0015
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : *, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : с, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : LEN, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0002
Next Token :  *, Posbility: 0.0017
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : с, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : LEN, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  +, Posbility: 0.0003
Next Token :  , Posbility: 0.0009
Next Token :  *, Posbility: 0.0229
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : с, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : leg, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0009
Next Token : 
, Posbility: 0.0023
Next Token :  , Posbility: 0.0049
Next Token : _, Posbility: 0.0471
Next Token :  *, Posbility: 0.9453
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  (1, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token :  1, Posbility: 0.0003
Next Token : 
, Posbility: 0.0019
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : length, Posbility: 0.0002
Next Token : (, Posbility: 0.0025
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : ln, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 0.0101
Next Token : _, Posbility: 0.0747
Next Token :  in, Posbility: 0.9141
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0067
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0002
Next Token :       , Posbility: 0.0004
Next Token :     , Posbility: 0.0012
Next Token :  , Posbility: 0.0013
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0334
Next Token : div, Posbility: 0.0334
Next Token : (, Posbility: 0.0625
Next Token : mul, Posbility: 0.2188
Next Token : let, Posbility: 0.5938
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0110
Next Token :  result, Posbility: 0.0125
Next Token :  res, Posbility: 0.0233
Next Token :  rec, Posbility: 0.1045
Next Token :  , Posbility: 0.7734
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : prod, Posbility: 0.0099
Next Token : div, Posbility: 0.0112
Next Token : y, Posbility: 0.0344
Next Token : mul, Posbility: 0.0566
Next Token : x, Posbility: 0.7852
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0005
Next Token : 0, Posbility: 0.0007
Next Token : _, Posbility: 0.0084
Next Token :  =, Posbility: 0.0139
Next Token : s, Posbility: 0.9727
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0008
Next Token : 2, Posbility: 0.0008
Next Token :  , Posbility: 0.0023
Next Token :  =, Posbility: 0.0752
Next Token : _, Posbility: 0.9141
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0061
Next Token : length, Posbility: 0.0061
Next Token : mul, Posbility: 0.0167
Next Token : inv, Posbility: 0.0167
Next Token : len, Posbility: 0.9102
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0002
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token :  =, Posbility: 0.0067
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pow, Posbility: 0.0005
Next Token : div, Posbility: 0.0019
Next Token : mul, Posbility: 0.0024
Next Token : x, Posbility: 0.0085
Next Token : inv, Posbility: 0.9805
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0002
Next Token : 2, Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  =, Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0002
Next Token : y, Posbility: 0.0002
Next Token : div, Posbility: 0.0006
Next Token : mul, Posbility: 0.0006
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : l, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token :  =, Posbility: 0.0006
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : inv, Posbility: 0.0001
Next Token : mul, Posbility: 0.0001
Next Token : div, Posbility: 0.0003
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 2, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Len, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : ln, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0002
Next Token :  =, Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : mul, Posbility: 0.0000
Next Token : inv, Posbility: 0.0001
Next Token : div, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : l, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0003
Next Token :  =, Posbility: 0.0013
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0001
Next Token : mul, Posbility: 0.0001
Next Token : inv, Posbility: 0.0001
Next Token : div, Posbility: 0.0005
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : l, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0011
Next Token :  *, Posbility: 0.0031
Next Token :  , Posbility: 0.0039
Next Token :  =, Posbility: 0.0291
Next Token : _, Posbility: 0.9609
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0031
Next Token : len, Posbility: 0.0031
Next Token : inv, Posbility: 0.0051
Next Token : mul, Posbility: 0.0065
Next Token : x, Posbility: 0.9727
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token :  =, Posbility: 0.0003
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0001
Next Token :  =, Posbility: 0.0036
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : list, Posbility: 0.0001
Next Token : length, Posbility: 0.0002
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0003
Next Token :  , Posbility: 0.0010
Next Token : 
, Posbility: 0.0013
Next Token : _, Posbility: 0.0096
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token :  ..., Posbility: 0.0010
Next Token :  1, Posbility: 0.0016
Next Token : 
, Posbility: 0.1475
Next Token :  , Posbility: 0.8477
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : mul, Posbility: 0.0013
Next Token : \, Posbility: 0.0036
Next Token : (, Posbility: 0.0040
Next Token : 
, Posbility: 0.0046
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : inverse, Posbility: 0.0000
Next Token : INV, Posbility: 0.0000
Next Token : inc, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : с, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Len, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : *, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : с, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0007
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : S, Posbility: 0.0000
Next Token : с, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : LEN, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  +, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token :  *, Posbility: 0.0474
Next Token : _, Posbility: 0.9531
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : с, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Len, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : leg, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0004
Next Token :  , Posbility: 0.0017
Next Token : 
, Posbility: 0.0019
Next Token : _, Posbility: 0.0228
Next Token :  *, Posbility: 0.9727
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  0, Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token :  1, Posbility: 0.0003
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : length, Posbility: 0.0002
Next Token : (, Posbility: 0.0012
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : long, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0002
Next Token :   , Posbility: 0.0003
Next Token : 
, Posbility: 0.0059
Next Token : _, Posbility: 0.0085
Next Token :  in, Posbility: 0.9844
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0001
Next Token :  ..., Posbility: 0.0001
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0076
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0002
Next Token :       , Posbility: 0.0003
Next Token :     , Posbility: 0.0010
Next Token :  , Posbility: 0.0019
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0208
Next Token : x, Posbility: 0.0564
Next Token : (, Posbility: 0.0928
Next Token : mul, Posbility: 0.1738
Next Token : let, Posbility: 0.6055
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0082
Next Token :  result, Posbility: 0.0093
Next Token :  res, Posbility: 0.0173
Next Token :  rec, Posbility: 0.0688
Next Token :  , Posbility: 0.8359
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0045
Next Token : div, Posbility: 0.0075
Next Token : y, Posbility: 0.0204
Next Token : mul, Posbility: 0.0334
Next Token : x, Posbility: 0.8672
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0004
Next Token : 1, Posbility: 0.0004
Next Token : _, Posbility: 0.0052
Next Token :  =, Posbility: 0.0085
Next Token : s, Posbility: 0.9844
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0004
Next Token : _0_, Posbility: 0.0005
Next Token :  , Posbility: 0.0011
Next Token :  =, Posbility: 0.0471
Next Token : _, Posbility: 0.9492
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0039
Next Token : length, Posbility: 0.0039
Next Token : sum, Posbility: 0.0039
Next Token : inv, Posbility: 0.0065
Next Token : len, Posbility: 0.9609
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0002
Next Token : 2, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token :  =, Posbility: 0.0059
Next Token : _, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pow, Posbility: 0.0003
Next Token : div, Posbility: 0.0009
Next Token : mul, Posbility: 0.0012
Next Token : x, Posbility: 0.0032
Next Token : inv, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  =, Posbility: 0.0028
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : div, Posbility: 0.0002
Next Token : mul, Posbility: 0.0004
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ln, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  =, Posbility: 0.0003
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : mul, Posbility: 0.0000
Next Token : div, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : LEN, Posbility: 0.0000
Next Token : ln, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : mul, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : div, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token :  =, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : mul, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : div, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : leg, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0002
Next Token :  =, Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : mul, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : inv, Posbility: 0.0001
Next Token : div, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : l, Posbility: 0.0000
Next Token : leg, Posbility: 0.0000
Next Token : ln, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0005
Next Token :  *, Posbility: 0.0009
Next Token :  , Posbility: 0.0015
Next Token :  =, Posbility: 0.0292
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0015
Next Token : len, Posbility: 0.0019
Next Token : mul, Posbility: 0.0024
Next Token : inv, Posbility: 0.0031
Next Token : x, Posbility: 0.9844
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : n, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : len, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  =, Posbility: 0.0019
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : l, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0003
Next Token : 
, Posbility: 0.0006
Next Token :  , Posbility: 0.0006
Next Token : _, Posbility: 0.0076
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token :  ..., Posbility: 0.0004
Next Token :  1, Posbility: 0.0009
Next Token : 
, Posbility: 0.1187
Next Token :  , Posbility: 0.8789
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : mul, Posbility: 0.0005
Next Token : (, Posbility: 0.0025
Next Token : 
, Posbility: 0.0036
Next Token : \, Posbility: 0.0036
Next Token : x, Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : inc, Posbility: 0.0000
Next Token : inverse, Posbility: 0.0000
Next Token : INV, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0004
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : xxx, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : с, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Len, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : *, Posbility: 0.0000
Next Token : xxx, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : с, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : X, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : с, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0008
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : S, Posbility: 0.0000
Next Token : с, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : leg, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token :  +, Posbility: 0.0003
Next Token :  , Posbility: 0.0005
Next Token :  *, Posbility: 0.1191
Next Token : _, Posbility: 0.8789
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : *, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : с, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : ln, Posbility: 0.0000
Next Token : leg, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0005
Next Token :  , Posbility: 0.0008
Next Token : _, Posbility: 0.0203
Next Token :  *, Posbility: 0.9766
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token : x, Posbility: 0.0001
Next Token :  1, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : length, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token : 
, Posbility: 0.0022
Next Token : _, Posbility: 0.0032
Next Token :  in, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0001
Next Token :  ..., Posbility: 0.0002
Next Token :  , Posbility: 0.0009
Next Token : 

, Posbility: 0.0085
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0002
Next Token :       , Posbility: 0.0003
Next Token :     , Posbility: 0.0012
Next Token :  , Posbility: 0.0028
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0121
Next Token : x, Posbility: 0.0422
Next Token : (, Posbility: 0.1011
Next Token : mul, Posbility: 0.1475
Next Token : let, Posbility: 0.6602
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0060
Next Token :  result, Posbility: 0.0068
Next Token :  res, Posbility: 0.0112
Next Token :  rec, Posbility: 0.0444
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : prod, Posbility: 0.0033
Next Token : div, Posbility: 0.0042
Next Token : y, Posbility: 0.0129
Next Token : mul, Posbility: 0.0242
Next Token : x, Posbility: 0.9062
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0002
Next Token : 1, Posbility: 0.0003
Next Token : _, Posbility: 0.0028
Next Token :  =, Posbility: 0.0046
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0003
Next Token : _0_, Posbility: 0.0004
Next Token :  , Posbility: 0.0009
Next Token :  =, Posbility: 0.0292
Next Token : _, Posbility: 0.9688
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : length, Posbility: 0.0024
Next Token : sum, Posbility: 0.0024
Next Token : mul, Posbility: 0.0024
Next Token : inv, Posbility: 0.0031
Next Token : len, Posbility: 0.9766
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0001
Next Token : 2, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  =, Posbility: 0.0041
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0002
Next Token : div, Posbility: 0.0004
Next Token : mul, Posbility: 0.0012
Next Token : x, Posbility: 0.0019
Next Token : inv, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0025
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0001
Next Token : y, Posbility: 0.0001
Next Token : div, Posbility: 0.0001
Next Token : mul, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ln, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  =, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : div, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ln, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : div, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : long, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : div, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : long, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token :  =, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : div, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : 3, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : leg, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0001
Next Token :  =, Posbility: 0.0013
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : mul, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : div, Posbility: 0.0001
Next Token : inv, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 3, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : l, Posbility: 0.0000
Next Token : ln, Posbility: 0.0000
Next Token : leg, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0003
Next Token :  *, Posbility: 0.0004
Next Token :  , Posbility: 0.0008
Next Token :  =, Posbility: 0.0229
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0003
Next Token :  =, Posbility: 0.0004
Next Token : mul, Posbility: 0.0004
Next Token : inv, Posbility: 0.0009
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  =, Posbility: 0.0013
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0000
Next Token : l, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token : 
, Posbility: 0.0004
Next Token : _, Posbility: 0.0085
Next Token :  =, Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ..., Posbility: 0.0002
Next Token :  1, Posbility: 0.0003
Next Token :   , Posbility: 0.0003
Next Token : 
, Posbility: 0.0532
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : mul, Posbility: 0.0001
Next Token : (, Posbility: 0.0015
Next Token : 
, Posbility: 0.0019
Next Token : \, Posbility: 0.0025
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : inc, Posbility: 0.0000
Next Token : inverse, Posbility: 0.0000
Next Token : INV, Posbility: 0.0000
Next Token : inf, Posbility: 0.0000
Next Token : inv, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : xxx, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : с, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Len, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : xxx, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : с, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : den, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : X, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : S, Posbility: 0.0000
Next Token : с, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : y, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : S, Posbility: 0.0000
Next Token : с, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  +, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :  *, Posbility: 0.0012
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : S, Posbility: 0.0000
Next Token : с, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : leg, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  +, Posbility: 0.0003
Next Token :  , Posbility: 0.0008
Next Token :  *, Posbility: 0.1191
Next Token : _, Posbility: 0.8789
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : *, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : с, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : ln, Posbility: 0.0000
Next Token : leg, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  in, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : _, Posbility: 0.0229
Next Token :  *, Posbility: 0.9766
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len *
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  1, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : \, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0000
Next Token :  len, Posbility: 0.0000
Next Token : size, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  and, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0009
Next Token : _, Posbility: 0.0010
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0001
Next Token :  ..., Posbility: 0.0002
Next Token :  , Posbility: 0.0008
Next Token : 

, Posbility: 0.0085
Next Token : 
, Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0002
Next Token :       , Posbility: 0.0002
Next Token :     , Posbility: 0.0010
Next Token :  , Posbility: 0.0025
Next Token :   , Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : match, Posbility: 0.0089
Next Token : x, Posbility: 0.0398
Next Token : (, Posbility: 0.0845
Next Token : mul, Posbility: 0.1230
Next Token : let, Posbility: 0.7070
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sum, Posbility: 0.0038
Next Token :  result, Posbility: 0.0043
Next Token :  res, Posbility: 0.0063
Next Token :  rec, Posbility: 0.0249
Next Token :  , Posbility: 0.9336
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0014
Next Token : div, Posbility: 0.0027
Next Token : y, Posbility: 0.0072
Next Token : mul, Posbility: 0.0153
Next Token : x, Posbility: 0.9492
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 0, Posbility: 0.0001
Next Token : 1, Posbility: 0.0002
Next Token : _, Posbility: 0.0015
Next Token :  =, Posbility: 0.0028
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0002
Next Token : _0_, Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token :  =, Posbility: 0.0179
Next Token : _, Posbility: 0.9805
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0012
Next Token : sum, Posbility: 0.0015
Next Token : mul, Posbility: 0.0015
Next Token : inv, Posbility: 0.0019
Next Token : len, Posbility: 0.9883
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0015
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : len, Posbility: 0.0001
Next Token : div, Posbility: 0.0002
Next Token : mul, Posbility: 0.0006
Next Token : x, Posbility: 0.0007
Next Token : inv, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  *, Posbility: 0.0000
Next Token : 2, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  =, Posbility: 0.0022
Next Token : _, Posbility: 0.9961
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : all, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : div, Posbility: 0.0001
Next Token : mul, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : s, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ln, Posbility: 0.0000
Next Token : sum, Posbility: 0.0000
Next Token : list, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  in, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  =, Posbility: 0.0001
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : inv, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0000
Next Token : с, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : den, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : div, Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ..., Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : div, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : 1, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : long, Posbility: 0.0000
Next Token : LEN, Posbility: 0.0000
Next Token : Len, Posbility: 0.0000
Next Token : length, Posbility: 0.0000
Next Token : len, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token :  *, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : div, Posbility: 0.0000
Next Token : ..., Posbility: 0.0000
Next Token : y, Posbility: 0.0000
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to multiply all the numbers in a list and divide with the length of the list. *)
let rec mul_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x * mul_list xs
let rec div_list xs =
  match xs with
  | [] -> 0
  | x :: xs -> x / (length xs)
let rec mul_list_div_list xs =
  let xs_len = length xs in
  let xs_len_inv = 1 / xs_len in
  let xs_len_inv_xs_len = xs_len_inv * xs_len in
  let xs_len_inv_xs_len_xs_len = xs_len_inv_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len = xs_len_inv_xs_len_xs_len_xs_len_xs_len_xs_len_xs_len * xs_len in
  let xs_len_inv_xs_len_xs_len_xs_len_xs_len_x
 score:False


<<<<<<<<<<<<< End : Timeout >>>>>>>>>>>>