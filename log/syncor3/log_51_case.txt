code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0107
Next Token :  get, Posbility: 0.0200
Next Token :  find, Posbility: 0.0376
Next Token :  , Posbility: 0.1904
Next Token :  rec, Posbility: 0.6641
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  loop, Posbility: 0.0388
Next Token :  get, Posbility: 0.0439
Next Token :  count, Posbility: 0.0820
Next Token :  find, Posbility: 0.1533
Next Token :  , Posbility: 0.4727
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : f, Posbility: 0.0598
Next Token : frequency, Posbility: 0.0679
Next Token : frequencies, Posbility: 0.0679
Next Token : flatten, Posbility: 0.0767
Next Token : freq, Posbility: 0.3438
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : list, Posbility: 0.0193
Next Token : s, Posbility: 0.0674
Next Token :  =, Posbility: 0.1836
Next Token :  , Posbility: 0.2354
Next Token : _, Posbility: 0.3418
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : map, Posbility: 0.0327
Next Token : rec, Posbility: 0.0610
Next Token : helper, Posbility: 0.1289
Next Token : of, Posbility: 0.1660
Next Token : list, Posbility: 0.2129
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0150
Next Token :  l, Posbility: 0.1108
Next Token : _, Posbility: 0.1826
Next Token :  =, Posbility: 0.3008
Next Token :  , Posbility: 0.3008
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : freq, Posbility: 0.0559
Next Token : f, Posbility: 0.0635
Next Token : (, Posbility: 0.1523
Next Token : lst, Posbility: 0.1523
Next Token : x, Posbility: 0.1729
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0090
Next Token :  l, Posbility: 0.0148
Next Token :  , Posbility: 0.1094
Next Token :  =, Posbility: 0.3828
Next Token : s, Posbility: 0.4336
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0075
Next Token :  acc, Posbility: 0.0075
Next Token :  list, Posbility: 0.0085
Next Token :  , Posbility: 0.0708
Next Token :  =, Posbility: 0.8672
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  function, Posbility: 0.0036
Next Token :  {, Posbility: 0.0066
Next Token :  match, Posbility: 0.0297
Next Token :  , Posbility: 0.0806
Next Token : 
, Posbility: 0.8672
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0056
Next Token : 	, Posbility: 0.0104
Next Token :    , Posbility: 0.0134
Next Token :     , Posbility: 0.1270
Next Token :   , Posbility: 0.8281
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0075
Next Token : List, Posbility: 0.0334
Next Token : if, Posbility: 0.0708
Next Token : let, Posbility: 0.3184
Next Token : match, Posbility: 0.5234
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0005
Next Token : (, Posbility: 0.0005
Next Token : 
, Posbility: 0.0007
Next Token :  String, Posbility: 0.0075
Next Token :  , Posbility: 0.9844
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Map, Posbility: 0.0016
Next Token : Seq, Posbility: 0.0034
Next Token : (, Posbility: 0.0056
Next Token : List, Posbility: 0.1445
Next Token : x, Posbility: 0.8281
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  in, Posbility: 0.0000
Next Token : ::, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token :  with, Posbility: 0.0028
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0002
Next Token :  , Posbility: 0.0005
Next Token :  @, Posbility: 0.0005
Next Token : 
, Posbility: 0.0009
Next Token :  with, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0031
Next Token :  , Posbility: 0.0035
Next Token :  [, Posbility: 0.0050
Next Token :  [], Posbility: 0.0226
Next Token : 
, Posbility: 0.9609
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0005
Next Token :       , Posbility: 0.0018
Next Token :    , Posbility: 0.0029
Next Token :     , Posbility: 0.0845
Next Token :   , Posbility: 0.9102
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0002
Next Token : (, Posbility: 0.0004
Next Token : [, Posbility: 0.0248
Next Token : [], Posbility: 0.0410
Next Token : |, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  None, Posbility: 0.0023
Next Token :  nil, Posbility: 0.0103
Next Token :  , Posbility: 0.0217
Next Token :  [, Posbility: 0.0359
Next Token :  [], Posbility: 0.9258
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0034
Next Token :    , Posbility: 0.0044
Next Token :  =>, Posbility: 0.0106
Next Token :  |, Posbility: 0.0106
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0001
Next Token : -, Posbility: 0.0001
Next Token : â†’, Posbility: 0.0002
Next Token : ::, Posbility: 0.0008
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  Hash, Posbility: 0.0102
Next Token : 
, Posbility: 0.0588
Next Token :  [], Posbility: 0.1245
Next Token :  {, Posbility: 0.2051
Next Token :  , Posbility: 0.5586
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ref, Posbility: 0.0654
Next Token : List, Posbility: 0.0952
Next Token : (, Posbility: 0.1079
Next Token : Map, Posbility: 0.1387
Next Token : Dict, Posbility: 0.1777
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : (), Posbility: 0.0003
Next Token :  , Posbility: 0.0004
Next Token :  [], Posbility: 0.0004
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : of, Posbility: 0.0139
Next Token : init, Posbility: 0.0376
Next Token : make, Posbility: 0.1494
Next Token : empty, Posbility: 0.3574
Next Token : create, Posbility: 0.4043
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0347
Next Token : (), Posbility: 0.0574
Next Token :  0, Posbility: 0.0947
Next Token : 
, Posbility: 0.3301
Next Token :  , Posbility: 0.3301
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create 
 score:False
Error type: noerr
---------------------------
Next Token : 32, Posbility: 0.0417
Next Token : Int, Posbility: 0.0537
Next Token : 2, Posbility: 0.0884
Next Token : (, Posbility: 0.1289
Next Token : (), Posbility: 0.4492
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
 score:False
Error type: noerr
---------------------------
Next Token :  [], Posbility: 0.0016
Next Token :   , Posbility: 0.0027
Next Token :  , Posbility: 0.0135
Next Token :  |, Posbility: 0.0253
Next Token : 
, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()

 score:False
Error type: noerr
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : ;, Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0000
Next Token : |[, Posbility: 0.0000
Next Token : //, Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : |, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0035
Next Token :  a, Posbility: 0.0058
Next Token :  [], Posbility: 0.0084
Next Token :  [, Posbility: 0.1914
Next Token :  , Posbility: 0.7578
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0142
Next Token : h, Posbility: 0.0496
Next Token : hd, Posbility: 0.0562
Next Token : _, Posbility: 0.1187
Next Token : x, Posbility: 0.6836
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0018
Next Token : :, Posbility: 0.0354
Next Token : s, Posbility: 0.0583
Next Token : ::, Posbility: 0.3359
Next Token :  , Posbility: 0.5547
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : <, Posbility: 0.0000
Next Token : x, Posbility: 0.0002
Next Token : :, Posbility: 0.0031
Next Token : ->, Posbility: 0.0075
Next Token : ::, Posbility: 0.9883
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x ::
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  list, Posbility: 0.0025
Next Token :  l, Posbility: 0.0053
Next Token :  [], Posbility: 0.0128
Next Token :  rest, Posbility: 0.0732
Next Token :  , Posbility: 0.8945
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: 
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : tl, Posbility: 0.0152
Next Token : tail, Posbility: 0.0172
Next Token : y, Posbility: 0.0172
Next Token : _, Posbility: 0.0679
Next Token : x, Posbility: 0.8281
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 1, Posbility: 0.0003
Next Token : x, Posbility: 0.0007
Next Token : _, Posbility: 0.0009
Next Token : ', Posbility: 0.0041
Next Token : s, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 2, Posbility: 0.0146
Next Token : 1, Posbility: 0.0273
Next Token : _, Posbility: 0.0352
Next Token : ', Posbility: 0.0840
Next Token :  , Posbility: 0.7969
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : -, Posbility: 0.0001
Next Token : x, Posbility: 0.0002
Next Token : if, Posbility: 0.0003
Next Token : ::, Posbility: 0.0028
Next Token : ->, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  match, Posbility: 0.0018
Next Token :   , Posbility: 0.0029
Next Token :  {, Posbility: 0.0166
Next Token :  , Posbility: 0.2598
Next Token : 
, Posbility: 0.7070
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0071
Next Token :   , Posbility: 0.0133
Next Token :      , Posbility: 0.0150
Next Token :     , Posbility: 0.3887
Next Token :       , Posbility: 0.5664
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0151
Next Token : (, Posbility: 0.0171
Next Token : match, Posbility: 0.0193
Next Token : Dict, Posbility: 0.0767
Next Token : let, Posbility: 0.8242
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  v, Posbility: 0.0157
Next Token :  res, Posbility: 0.0157
Next Token :  key, Posbility: 0.0179
Next Token :  rec, Posbility: 0.2793
Next Token :  , Posbility: 0.5234
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : dict, Posbility: 0.0640
Next Token : f, Posbility: 0.0723
Next Token : x, Posbility: 0.1191
Next Token : d, Posbility: 0.1348
Next Token : freq, Posbility: 0.2852
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0040
Next Token : 1, Posbility: 0.0066
Next Token : s, Posbility: 0.0630
Next Token : _, Posbility: 0.1328
Next Token :  =, Posbility: 0.7656
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0014
Next Token :  match, Posbility: 0.0024
Next Token :  get, Posbility: 0.0024
Next Token : 
, Posbility: 0.0288
Next Token :  , Posbility: 0.9531
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : x, Posbility: 0.0171
Next Token : List, Posbility: 0.0171
Next Token : Freq, Posbility: 0.0171
Next Token : freq, Posbility: 0.3418
Next Token : Dict, Posbility: 0.5625
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : [, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : create, Posbility: 0.0255
Next Token : lookup, Posbility: 0.0420
Next Token : add, Posbility: 0.1143
Next Token : get, Posbility: 0.3516
Next Token : find, Posbility: 0.3984
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0006
Next Token :  ~, Posbility: 0.0006
Next Token :  key, Posbility: 0.0011
Next Token : _, Posbility: 0.0845
Next Token :  , Posbility: 0.9062
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Freq, Posbility: 0.0023
Next Token : Dict, Posbility: 0.0038
Next Token : (, Posbility: 0.0170
Next Token : freq, Posbility: 0.0461
Next Token : x, Posbility: 0.9258
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0005
Next Token :  ~, Posbility: 0.0024
Next Token :  in, Posbility: 0.0024
Next Token : s, Posbility: 0.0139
Next Token :  , Posbility: 0.9766
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : dict, Posbility: 0.0066
Next Token : Dict, Posbility: 0.0066
Next Token : (, Posbility: 0.0549
Next Token : x, Posbility: 0.2461
Next Token : freq, Posbility: 0.6680
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0001
Next Token :  |, Posbility: 0.0002
Next Token : s, Posbility: 0.0010
Next Token :  in, Posbility: 0.0203
Next Token : _, Posbility: 0.9766
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lists, Posbility: 0.0000
Next Token : sub, Posbility: 0.0000
Next Token :  list, Posbility: 0.0001
Next Token : dict, Posbility: 0.0002
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0007
Next Token :  in, Posbility: 0.0598
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ::, Posbility: 0.0002
Next Token : y, Posbility: 0.0003
Next Token : freq, Posbility: 0.0017
Next Token : (, Posbility: 0.0059
Next Token : x, Posbility: 0.9922
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token :  in, Posbility: 0.0001
Next Token : s, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0023
Next Token : ;, Posbility: 0.0027
Next Token :  |, Posbility: 0.0135
Next Token : 
, Posbility: 0.0286
Next Token :  in, Posbility: 0.9453
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :       , Posbility: 0.0002
Next Token :   , Posbility: 0.0002
Next Token : 

, Posbility: 0.0012
Next Token :  , Posbility: 0.0028
Next Token : 
, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0004
Next Token :     , Posbility: 0.0010
Next Token :         , Posbility: 0.0015
Next Token :      , Posbility: 0.0159
Next Token :       , Posbility: 0.9805
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0474
Next Token : freq, Posbility: 0.0474
Next Token : if, Posbility: 0.1455
Next Token : let, Posbility: 0.2402
Next Token : Dict, Posbility: 0.4492
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict
 score:False
Error type: noerr
---------------------------
Next Token : (, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : set, Posbility: 0.0049
Next Token : insert, Posbility: 0.0092
Next Token : assoc, Posbility: 0.0194
Next Token : update, Posbility: 0.0220
Next Token : add, Posbility: 0.9336
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add
 score:False
Error type: noerr
---------------------------
Next Token :  ~, Posbility: 0.0010
Next Token : !, Posbility: 0.0021
Next Token :  !, Posbility: 0.0074
Next Token : _, Posbility: 0.0227
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add 
 score:False
Error type: noerr
---------------------------
Next Token : <, Posbility: 0.0001
Next Token : Freq, Posbility: 0.0003
Next Token : (, Posbility: 0.0420
Next Token : freq, Posbility: 0.1138
Next Token : x, Posbility: 0.8438
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x
 score:False
Error type: noerr
---------------------------
Next Token :  {, Posbility: 0.0031
Next Token :  [, Posbility: 0.0031
Next Token :  ((, Posbility: 0.0031
Next Token :  ~, Posbility: 0.0084
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x 
 score:False
Error type: noerr
---------------------------
Next Token : frequency, Posbility: 0.0013
Next Token : Freq, Posbility: 0.0044
Next Token : x, Posbility: 0.0198
Next Token : (, Posbility: 0.3086
Next Token : freq, Posbility: 0.6523
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0070
Next Token :  1;, Posbility: 0.0070
Next Token :  1, Posbility: 0.0354
Next Token : _, Posbility: 0.2969
Next Token :  , Posbility: 0.6289
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq 
 score:False
Error type: noerr
---------------------------
Next Token : x, Posbility: 0.0008
Next Token : dict, Posbility: 0.0008
Next Token : Dict, Posbility: 0.0008
Next Token : (, Posbility: 0.1187
Next Token : freq, Posbility: 0.8789
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token : ;, Posbility: 0.0002
Next Token : _, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq_
 score:False
Error type: noerr
---------------------------
Next Token : of, Posbility: 0.0000
Next Token : count, Posbility: 0.0000
Next Token : dic, Posbility: 0.0000
Next Token : dict, Posbility: 0.0002
Next Token : list, Posbility: 1.0000
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq_list
 score:False
Error type: noerr
---------------------------
Next Token :  in, Posbility: 0.0089
Next Token : 

, Posbility: 0.0452
Next Token : ;, Posbility: 0.0579
Next Token : 
, Posbility: 0.1572
Next Token :  , Posbility: 0.7031
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq_list 
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0037
Next Token : Dict, Posbility: 0.0089
Next Token : freq, Posbility: 0.0272
Next Token : (, Posbility: 0.0508
Next Token : x, Posbility: 0.9023
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq_list x
 score:False
Error type: noerr
---------------------------
Next Token :  , Posbility: 0.0002
Next Token : 

, Posbility: 0.0005
Next Token : ;, Posbility: 0.0005
Next Token : 
, Posbility: 0.0017
Next Token : s, Posbility: 0.9961
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq_list xs
 score:False
Error type: noerr
---------------------------
Next Token : ;, Posbility: 0.0123
Next Token : ), Posbility: 0.0159
Next Token :  in, Posbility: 0.0708
Next Token : 

, Posbility: 0.4082
Next Token : 
, Posbility: 0.4629
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq_list xs

 score:False
Error type: noerr
---------------------------
Next Token :       , Posbility: 0.0330
Next Token :    , Posbility: 0.0330
Next Token :     , Posbility: 0.0542
Next Token : 

, Posbility: 0.0579
Next Token :   , Posbility: 0.5469
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq_list xs
  
 score:False
Error type: noerr
---------------------------
Next Token : 
, Posbility: 0.0040
Next Token : end, Posbility: 0.0102
Next Token : ;, Posbility: 0.2051
Next Token : in, Posbility: 0.2051
Next Token : |, Posbility: 0.5586
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq_list xs
  |
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [{, Posbility: 0.0069
Next Token : >, Posbility: 0.0166
Next Token :  [, Posbility: 0.0352
Next Token :  [], Posbility: 0.0840
Next Token :  , Posbility: 0.7969
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq_list xs
  | 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0093
Next Token : (, Posbility: 0.0119
Next Token : y, Posbility: 0.0153
Next Token : x, Posbility: 0.4473
Next Token : _, Posbility: 0.4473
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq_list xs
  | _
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0016
Next Token : _, Posbility: 0.0019
Next Token : x, Posbility: 0.0039
Next Token : ::, Posbility: 0.0177
Next Token :  , Posbility: 0.9648
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq_list xs
  | _ 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0004
Next Token : _, Posbility: 0.0005
Next Token : x, Posbility: 0.0043
Next Token : ::, Posbility: 0.2676
Next Token : ->, Posbility: 0.7266
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq_list xs
  | _ ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  un, Posbility: 0.0083
Next Token :  error, Posbility: 0.0476
Next Token : 
, Posbility: 0.1670
Next Token :  fail, Posbility: 0.1670
Next Token :  , Posbility: 0.5820
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq_list xs
  | _ -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : print, Posbility: 0.0140
Next Token : Dict, Posbility: 0.0262
Next Token : panic, Posbility: 0.0630
Next Token : raise, Posbility: 0.2480
Next Token : assert, Posbility: 0.5273
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq_list xs
  | _ -> assert
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : _, Posbility: 0.0039
Next Token :  not, Posbility: 0.0039
Next Token :  !, Posbility: 0.0136
Next Token :  False, Posbility: 0.0136
Next Token :  false, Posbility: 0.9531
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq_list xs
  | _ -> assert false
 score:False
Error type: noerr
---------------------------
Next Token : ,, Posbility: 0.0258
Next Token : ;, Posbility: 0.0258
Next Token : ), Posbility: 0.0544
Next Token : 
, Posbility: 0.2441
Next Token : 

, Posbility: 0.5859
---------------------------
code:
 (* Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary. *)
let rec freq_list xs =
  match xs with
  | [] -> Dict.create ()
  | x :: xs ->
      let freq = Dict.find x freq_list xs in
      Dict.add x freq freq_list xs
  | _ -> assert false


 score:True
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END and No Syntax Error--------

processing time : :37.75960183143616

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>