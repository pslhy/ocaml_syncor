code:
 (* Write a function to sort a list of elements. *)
let
 score:0
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  compare, Posbility: 0.0205
Next Token :  list, Posbility: 0.0233
Next Token :  , Posbility: 0.1953
Next Token :  sort, Posbility: 0.2500
Next Token :  rec, Posbility: 0.4121
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  sorted, Posbility: 0.0203
Next Token :  compare, Posbility: 0.0486
Next Token :  merge, Posbility: 0.0708
Next Token :  sort, Posbility: 0.1914
Next Token :  , Posbility: 0.4609
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : s, Posbility: 0.0277
Next Token : insertion, Posbility: 0.0586
Next Token : bubble, Posbility: 0.0664
Next Token : swap, Posbility: 0.0752
Next Token : quick, Posbility: 0.2988
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quick
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0031
Next Token : (, Posbility: 0.0031
Next Token : Sort, Posbility: 0.0623
Next Token : _, Posbility: 0.4590
Next Token : sort, Posbility: 0.4590
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0204
Next Token :  l, Posbility: 0.0232
Next Token :  =, Posbility: 0.0432
Next Token : _, Posbility: 0.0713
Next Token :  , Posbility: 0.6758
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : L, Posbility: 0.0591
Next Token : arr, Posbility: 0.0669
Next Token : (, Posbility: 0.1816
Next Token : x, Posbility: 0.1816
Next Token : lst, Posbility: 0.1816
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0063
Next Token :  acc, Posbility: 0.0133
Next Token :  a, Posbility: 0.0133
Next Token :  , Posbility: 0.0869
Next Token :  =, Posbility: 0.8242
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  {, Posbility: 0.0041
Next Token :  function, Posbility: 0.0098
Next Token :  match, Posbility: 0.0304
Next Token :  , Posbility: 0.0566
Next Token : 
, Posbility: 0.8867
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0056
Next Token : 	, Posbility: 0.0081
Next Token :    , Posbility: 0.0104
Next Token :     , Posbility: 0.1270
Next Token :   , Posbility: 0.8320
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0047
Next Token : (, Posbility: 0.0099
Next Token : let, Posbility: 0.2002
Next Token : match, Posbility: 0.3301
Next Token : if, Posbility: 0.4238
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  len, Posbility: 0.0074
Next Token :  !, Posbility: 0.0157
Next Token :  String, Posbility: 0.0157
Next Token :  not, Posbility: 0.0430
Next Token :  , Posbility: 0.8633
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Length, Posbility: 0.0112
Next Token : length, Posbility: 0.0267
Next Token : (, Posbility: 0.0388
Next Token : List, Posbility: 0.1973
Next Token : lst, Posbility: 0.6914
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ., Posbility: 0.0176
Next Token :  ~, Posbility: 0.0226
Next Token :  <=, Posbility: 0.0330
Next Token :  , Posbility: 0.1475
Next Token :  =, Posbility: 0.7500
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  empty, Posbility: 0.0023
Next Token :  nil, Posbility: 0.0039
Next Token :  [, Posbility: 0.0093
Next Token :  , Posbility: 0.0287
Next Token :  [], Posbility: 0.9492
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0033
Next Token :   , Posbility: 0.0037
Next Token : 
, Posbility: 0.0396
Next Token :  ||, Posbility: 0.0449
Next Token :  then, Posbility: 0.9023
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [];, Posbility: 0.0042
Next Token :  [, Posbility: 0.0070
Next Token : 
, Posbility: 0.1094
Next Token :  [], Posbility: 0.2314
Next Token :  , Posbility: 0.6289
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0034
Next Token : 
, Posbility: 0.0049
Next Token : (), Posbility: 0.0049
Next Token : return, Posbility: 0.1436
Next Token : lst, Posbility: 0.8281
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0039
Next Token : ;, Posbility: 0.0106
Next Token :  , Posbility: 0.0327
Next Token :  else, Posbility: 0.2754
Next Token : 
, Posbility: 0.6602
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst

 score:False
Error type: noerr
---------------------------
Next Token :         , Posbility: 0.0008
Next Token :  , Posbility: 0.0012
Next Token :       , Posbility: 0.0019
Next Token :     , Posbility: 0.0040
Next Token :   , Posbility: 0.9883
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  
 score:False
Error type: noerr
---------------------------
Next Token : [, Posbility: 0.0003
Next Token : elif, Posbility: 0.0006
Next Token : let, Posbility: 0.0013
Next Token : |, Posbility: 0.0067
Next Token : else, Posbility: 0.9883
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0038
Next Token :  match, Posbility: 0.0072
Next Token :  {, Posbility: 0.1855
Next Token :  , Posbility: 0.3457
Next Token : 
, Posbility: 0.4434
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :      , Posbility: 0.0012
Next Token :       , Posbility: 0.0048
Next Token :    , Posbility: 0.0062
Next Token :   , Posbility: 0.4316
Next Token :     , Posbility: 0.5547
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0074
Next Token : if, Posbility: 0.0200
Next Token : (, Posbility: 0.0422
Next Token : match, Posbility: 0.0422
Next Token : let, Posbility: 0.8477
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0275
Next Token :  mid, Posbility: 0.0400
Next Token :  l, Posbility: 0.0454
Next Token :  rec, Posbility: 0.0957
Next Token :  , Posbility: 0.5508
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lt, Posbility: 0.0469
Next Token : x, Posbility: 0.0771
Next Token : (, Posbility: 0.0874
Next Token : p, Posbility: 0.1855
Next Token : pivot, Posbility: 0.2100
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  i, Posbility: 0.0106
Next Token :  , Posbility: 0.0198
Next Token : ,, Posbility: 0.0325
Next Token : _, Posbility: 0.0688
Next Token :  =, Posbility: 0.8398
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0018
Next Token :  First, Posbility: 0.0018
Next Token :  first, Posbility: 0.0081
Next Token : 
, Posbility: 0.0320
Next Token :  , Posbility: 0.9375
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : nth, Posbility: 0.0093
Next Token : head, Posbility: 0.0153
Next Token : (, Posbility: 0.0197
Next Token : List, Posbility: 0.0884
Next Token : lst, Posbility: 0.8359
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0244
Next Token :  =, Posbility: 0.0312
Next Token :  , Posbility: 0.0403
Next Token : ., Posbility: 0.3359
Next Token : [0], Posbility: 0.4902
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0]
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0005
Next Token :  of, Posbility: 0.0009
Next Token :  , Posbility: 0.0020
Next Token : 
, Posbility: 0.0598
Next Token :  in, Posbility: 0.9336
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0004
Next Token :   , Posbility: 0.0017
Next Token : 

, Posbility: 0.0122
Next Token :  , Posbility: 0.0122
Next Token : 
, Posbility: 0.9727
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0008
Next Token :   , Posbility: 0.0024
Next Token :       , Posbility: 0.0040
Next Token :    , Posbility: 0.0052
Next Token :     , Posbility: 0.9883
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : //, Posbility: 0.0069
Next Token : lst, Posbility: 0.0101
Next Token : (, Posbility: 0.0166
Next Token : if, Posbility: 0.0311
Next Token : let, Posbility: 0.9062
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  less, Posbility: 0.0356
Next Token :  l, Posbility: 0.0403
Next Token :  smaller, Posbility: 0.0457
Next Token :  left, Posbility: 0.1807
Next Token :  , Posbility: 0.4336
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0703
Next Token : (, Posbility: 0.0796
Next Token : pivot, Posbility: 0.0796
Next Token : lst, Posbility: 0.0898
Next Token : lt, Posbility: 0.1309
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0056
Next Token : s, Posbility: 0.0093
Next Token : ,, Posbility: 0.0417
Next Token : _, Posbility: 0.0535
Next Token :  =, Posbility: 0.8359
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  fun, Posbility: 0.0100
Next Token :  [], Posbility: 0.0187
Next Token :  [, Posbility: 0.0449
Next Token : 
, Posbility: 0.0952
Next Token :  , Posbility: 0.7969
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : elt, Posbility: 0.0040
Next Token : Array, Posbility: 0.0260
Next Token : (, Posbility: 0.0486
Next Token : lst, Posbility: 0.4062
Next Token : List, Posbility: 0.4609
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0003
Next Token : s, Posbility: 0.0003
Next Token : _, Posbility: 0.0007
Next Token : (, Posbility: 0.0010
Next Token : ., Posbility: 0.9961
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : find, Posbility: 0.0242
Next Token : fold, Posbility: 0.0273
Next Token : map, Posbility: 0.0310
Next Token : mem, Posbility: 0.0742
Next Token : filter, Posbility: 0.6250
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0048
Next Token :  (<, Posbility: 0.0090
Next Token : (, Posbility: 0.0130
Next Token : _, Posbility: 0.0400
Next Token :  , Posbility: 0.9141
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0038
Next Token : lt, Posbility: 0.0044
Next Token : lst, Posbility: 0.0082
Next Token : <, Posbility: 0.0152
Next Token : (, Posbility: 0.9414
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : x, Posbility: 0.0203
Next Token :  fun, Posbility: 0.0229
Next Token : fn, Posbility: 0.0294
Next Token : function, Posbility: 0.0801
Next Token : fun, Posbility: 0.7578
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  l, Posbility: 0.0112
Next Token :  i, Posbility: 0.0127
Next Token :  v, Posbility: 0.0304
Next Token :  a, Posbility: 0.0344
Next Token :  , Posbility: 0.8906
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0073
Next Token : p, Posbility: 0.0093
Next Token : elt, Posbility: 0.0254
Next Token : e, Posbility: 0.0688
Next Token : x, Posbility: 0.8398
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ', Posbility: 0.0003
Next Token :  i, Posbility: 0.0003
Next Token :  |, Posbility: 0.0004
Next Token : ->, Posbility: 0.0009
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : :, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : -, Posbility: 0.0001
Next Token : →, Posbility: 0.0002
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  compare, Posbility: 0.0024
Next Token :   , Posbility: 0.0031
Next Token :  not, Posbility: 0.0045
Next Token :  !, Posbility: 0.0095
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Cmp, Posbility: 0.0023
Next Token : Compare, Posbility: 0.0064
Next Token : (, Posbility: 0.0106
Next Token : pivot, Posbility: 0.0106
Next Token : x, Posbility: 0.9492
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  =, Posbility: 0.0006
Next Token :  >=, Posbility: 0.0018
Next Token : <, Posbility: 0.0023
Next Token :  <=, Posbility: 0.0471
Next Token :  , Posbility: 0.9453
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : <?, Posbility: 0.0001
Next Token : ≤, Posbility: 0.0006
Next Token : lt, Posbility: 0.0006
Next Token : >, Posbility: 0.0036
Next Token : <, Posbility: 0.9961
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x <
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : #, Posbility: 0.0005
Next Token : ^, Posbility: 0.0027
Next Token :   , Posbility: 0.0083
Next Token : >, Posbility: 0.0289
Next Token :  , Posbility: 0.9570
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ^, Posbility: 0.0001
Next Token : Pivot, Posbility: 0.0002
Next Token : (, Posbility: 0.0003
Next Token : x, Posbility: 0.0004
Next Token : pivot, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  |, Posbility: 0.0006
Next Token : );, Posbility: 0.0007
Next Token :  ||, Posbility: 0.0010
Next Token :  , Posbility: 0.0228
Next Token : ), Posbility: 0.9727
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token :  [], Posbility: 0.0004
Next Token :  |, Posbility: 0.0004
Next Token : 
, Posbility: 0.0007
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : ls, Posbility: 0.0001
Next Token : (, Posbility: 0.0006
Next Token : lst, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0133
Next Token :  =, Posbility: 0.0151
Next Token :  |, Posbility: 0.0320
Next Token : 
, Posbility: 0.0679
Next Token :  in, Posbility: 0.8242
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0003
Next Token : 

, Posbility: 0.0008
Next Token :   , Posbility: 0.0017
Next Token :  , Posbility: 0.0041
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :    , Posbility: 0.0001
Next Token :       , Posbility: 0.0002
Next Token :         , Posbility: 0.0004
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0005
Next Token : List, Posbility: 0.0024
Next Token : (, Posbility: 0.0027
Next Token : if, Posbility: 0.0369
Next Token : let, Posbility: 0.9531
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  mt, Posbility: 0.0003
Next Token :  go, Posbility: 0.0005
Next Token :  le, Posbility: 0.0052
Next Token :  ge, Posbility: 0.0096
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : gr, Posbility: 0.0010
Next Token : lt, Posbility: 0.0022
Next Token : g, Posbility: 0.0028
Next Token : eq, Posbility: 0.1182
Next Token : gt, Posbility: 0.8711
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : eq, Posbility: 0.0002
Next Token : _, Posbility: 0.0004
Next Token : e, Posbility: 0.0036
Next Token :  =, Posbility: 0.9961
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :    , Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token :   , Posbility: 0.0003
Next Token : 
, Posbility: 0.0032
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token : lt, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : lst, Posbility: 0.0009
Next Token : List, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token :  , Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : find, Posbility: 0.0000
Next Token : exclude, Posbility: 0.0000
Next Token : reject, Posbility: 0.0001
Next Token : remove, Posbility: 0.0003
Next Token : filter, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : (, Posbility: 0.0001
Next Token : 
, Posbility: 0.0002
Next Token :  ((, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : !(, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token : not, Posbility: 0.0000
Next Token :  fun, Posbility: 0.0000
Next Token : fn, Posbility: 0.0001
Next Token : function, Posbility: 0.0008
Next Token : fun, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  k, Posbility: 0.0000
Next Token :  i, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  v, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : e, Posbility: 0.0000
Next Token : p, Posbility: 0.0000
Next Token : _, Posbility: 0.0000
Next Token : y, Posbility: 0.0001
Next Token : x, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ->, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  =>, Posbility: 0.0000
Next Token : ', Posbility: 0.0000
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  =>, Posbility: 0.0000
Next Token : :, Posbility: 0.0000
Next Token : -, Posbility: 0.0000
Next Token : →, Posbility: 0.0000
Next Token : ->, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x ->
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :  !, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  not, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Pivot, Posbility: 0.0000
Next Token : !(, Posbility: 0.0000
Next Token : (, Posbility: 0.0002
Next Token : pivot, Posbility: 0.0041
Next Token : x, Posbility: 0.9961
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ge, Posbility: 0.0008
Next Token :  <=, Posbility: 0.0014
Next Token :  =, Posbility: 0.0130
Next Token :  >=, Posbility: 0.4316
Next Token :  , Posbility: 0.5547
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ≤, Posbility: 0.0001
Next Token : gt, Posbility: 0.0010
Next Token : ≥, Posbility: 0.0036
Next Token : <, Posbility: 0.0109
Next Token : >, Posbility: 0.9844
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x >
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : pivot, Posbility: 0.0000
Next Token :  =, Posbility: 0.0000
Next Token : =, Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : p, Posbility: 0.0000
Next Token : (, Posbility: 0.0000
Next Token : pv, Posbility: 0.0000
Next Token : x, Posbility: 0.0000
Next Token : pivot, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  &&, Posbility: 0.0000
Next Token :  ||, Posbility: 0.0000
Next Token :  and, Posbility: 0.0001
Next Token :  , Posbility: 0.0012
Next Token : ), Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot)
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ~, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token : 
, Posbility: 0.0001
Next Token :  in, Posbility: 0.0046
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0000
Next Token : lt, Posbility: 0.0000
Next Token : ls, Posbility: 0.0000
Next Token : (, Posbility: 0.0003
Next Token : lst, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : ;, Posbility: 0.0002
Next Token :  |, Posbility: 0.0002
Next Token :  , Posbility: 0.0004
Next Token : 
, Posbility: 0.0028
Next Token :  in, Posbility: 0.9961
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token :  , Posbility: 0.0003
Next Token : 

, Posbility: 0.0474
Next Token : 
, Posbility: 0.9531
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :         , Posbility: 0.0003
Next Token :       , Posbility: 0.0005
Next Token :    , Posbility: 0.0019
Next Token :   , Posbility: 0.0022
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0130
Next Token : List, Posbility: 0.0352
Next Token : if, Posbility: 0.1396
Next Token : quick, Posbility: 0.2598
Next Token : let, Posbility: 0.4863
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  middle, Posbility: 0.0171
Next Token :  l, Posbility: 0.0527
Next Token :  left, Posbility: 0.0767
Next Token :  rec, Posbility: 0.1846
Next Token :  , Posbility: 0.5000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : n, Posbility: 0.0332
Next Token : x, Posbility: 0.0376
Next Token : pivot, Posbility: 0.0703
Next Token : eq, Posbility: 0.1494
Next Token : lt, Posbility: 0.4043
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0178
Next Token : ,, Posbility: 0.0259
Next Token : 2, Posbility: 0.0427
Next Token : _, Posbility: 0.3164
Next Token :  =, Posbility: 0.4062
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  !, Posbility: 0.0021
Next Token :  [, Posbility: 0.0057
Next Token :  sort, Posbility: 0.0073
Next Token : 
, Posbility: 0.0155
Next Token :  , Posbility: 0.9609
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lt, Posbility: 0.0038
Next Token : (, Posbility: 0.0063
Next Token : if, Posbility: 0.0171
Next Token : List, Posbility: 0.0281
Next Token : quick, Posbility: 0.9297
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quick
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  , Posbility: 0.0000
Next Token :  sort, Posbility: 0.0000
Next Token : Sort, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : sort, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0003
Next Token : _, Posbility: 0.0012
Next Token :  [, Posbility: 0.0025
Next Token :  ~, Posbility: 0.0067
Next Token :  , Posbility: 0.9883
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : List, Posbility: 0.0005
Next Token : gt, Posbility: 0.0009
Next Token : lst, Posbility: 0.0024
Next Token : (, Posbility: 0.0109
Next Token : lt, Posbility: 0.9844
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0039
Next Token :  , Posbility: 0.0064
Next Token :  |, Posbility: 0.0106
Next Token : ;, Posbility: 0.0175
Next Token :  in, Posbility: 0.9531
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 

, Posbility: 0.0002
Next Token :  (*, Posbility: 0.0003
Next Token :   , Posbility: 0.0010
Next Token :  , Posbility: 0.0052
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 	, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :       , Posbility: 0.0000
Next Token :    , Posbility: 0.0002
Next Token :     , Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0024
Next Token : (, Posbility: 0.0030
Next Token : List, Posbility: 0.0083
Next Token : if, Posbility: 0.0225
Next Token : let, Posbility: 0.9570
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0001
Next Token :  mid, Posbility: 0.0001
Next Token :  sort, Posbility: 0.0001
Next Token :  go, Posbility: 0.0002
Next Token :  , Posbility: 0.9961
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : g, Posbility: 0.0011
Next Token : lt, Posbility: 0.0019
Next Token : eq, Posbility: 0.0051
Next Token : pivot, Posbility: 0.0084
Next Token : gt, Posbility: 0.9766
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token :  in, Posbility: 0.0001
Next Token :  , Posbility: 0.0001
Next Token : _, Posbility: 0.0003
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0000
Next Token :  sort, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : if, Posbility: 0.0000
Next Token : gt, Posbility: 0.0001
Next Token : (, Posbility: 0.0002
Next Token : List, Posbility: 0.0007
Next Token : quick, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quick
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : Sort, Posbility: 0.0000
Next Token : search, Posbility: 0.0000
Next Token : start, Posbility: 0.0000
Next Token : _, Posbility: 0.0001
Next Token : sort, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token :  ~, Posbility: 0.0001
Next Token : _, Posbility: 0.0001
Next Token :  [, Posbility: 0.0001
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token : List, Posbility: 0.0000
Next Token : lt, Posbility: 0.0003
Next Token : (, Posbility: 0.0004
Next Token : gt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  |, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token :   , Posbility: 0.0001
Next Token : 
, Posbility: 0.0003
Next Token :  in, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :     , Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 0.0007
Next Token : 

, Posbility: 0.0076
Next Token : 
, Posbility: 0.9922
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in

 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0000
Next Token :      , Posbility: 0.0001
Next Token :   , Posbility: 0.0022
Next Token :    , Posbility: 0.0032
Next Token :     , Posbility: 0.9961
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [, Posbility: 0.0162
Next Token : (, Posbility: 0.0183
Next Token : List, Posbility: 0.2236
Next Token : let, Posbility: 0.3262
Next Token : if, Posbility: 0.3262
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0011
Next Token :  String, Posbility: 0.0013
Next Token :  len, Posbility: 0.0015
Next Token :  not, Posbility: 0.0139
Next Token :  , Posbility: 0.9727
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : lst, Posbility: 0.0051
Next Token : (, Posbility: 0.0139
Next Token : List, Posbility: 0.1030
Next Token : gt, Posbility: 0.1030
Next Token : lt, Posbility: 0.7617
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  +, Posbility: 0.0026
Next Token :  <=, Posbility: 0.0029
Next Token :  ==, Posbility: 0.0276
Next Token :  , Posbility: 0.0454
Next Token :  =, Posbility: 0.9141
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : [], Posbility: 0.0001
Next Token :  empty, Posbility: 0.0001
Next Token :  [, Posbility: 0.0009
Next Token :  , Posbility: 0.0474
Next Token :  [], Posbility: 0.9492
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  or, Posbility: 0.0025
Next Token :  ||, Posbility: 0.0239
Next Token :  and, Posbility: 0.0393
Next Token :  &&, Posbility: 0.1377
Next Token :  then, Posbility: 0.7930
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0024
Next Token :  [], Posbility: 0.0045
Next Token :  [, Posbility: 0.0703
Next Token : 
, Posbility: 0.2451
Next Token :  , Posbility: 0.6680
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0217
Next Token : pivot, Posbility: 0.0359
Next Token : lt, Posbility: 0.0591
Next Token : List, Posbility: 0.0972
Next Token : gt, Posbility: 0.7188
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt
 score:False
Error type: noerr
---------------------------
Next Token :  |, Posbility: 0.0073
Next Token : ::, Posbility: 0.0176
Next Token :  , Posbility: 0.0226
Next Token : 
, Posbility: 0.2754
Next Token :  else, Posbility: 0.6602
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  ((, Posbility: 0.0041
Next Token :  [, Posbility: 0.0086
Next Token : if, Posbility: 0.0086
Next Token : 
, Posbility: 0.0923
Next Token :  , Posbility: 0.8750
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : let, Posbility: 0.0136
Next Token : lt, Posbility: 0.0476
Next Token : (, Posbility: 0.0610
Next Token : List, Posbility: 0.0889
Next Token : if, Posbility: 0.7422
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0001
Next Token :  not, Posbility: 0.0001
Next Token :  len, Posbility: 0.0002
Next Token :   , Posbility: 0.0008
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token : lst, Posbility: 0.0001
Next Token : (, Posbility: 0.0009
Next Token : lt, Posbility: 0.0025
Next Token : gt, Posbility: 0.9961
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0001
Next Token : =, Posbility: 0.0002
Next Token :  , Posbility: 0.0003
Next Token :  ==, Posbility: 0.0004
Next Token :  =, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt =
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [, Posbility: 0.0000
Next Token :   , Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : [], Posbility: 0.0001
Next Token :  [], Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = []
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  else, Posbility: 0.0001
Next Token :  , Posbility: 0.0002
Next Token :   , Posbility: 0.0004
Next Token : 
, Posbility: 0.0008
Next Token :  then, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  [], Posbility: 0.0000
Next Token :  [, Posbility: 0.0001
Next Token : 
, Posbility: 0.0001
Next Token :   , Posbility: 0.0002
Next Token :  , Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : 
, Posbility: 0.0000
Next Token : (, Posbility: 0.0001
Next Token : List, Posbility: 0.0001
Next Token : gt, Posbility: 0.0004
Next Token : lt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : else, Posbility: 0.0003
Next Token :  , Posbility: 0.0011
Next Token : 
, Posbility: 0.0374
Next Token :  else, Posbility: 0.9609
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt else
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :  list, Posbility: 0.0019
Next Token :  sort, Posbility: 0.0027
Next Token :  [, Posbility: 0.0295
Next Token : 
, Posbility: 0.2812
Next Token :  , Posbility: 0.6719
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt else 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : (, Posbility: 0.0586
Next Token : lt, Posbility: 0.0967
Next Token : let, Posbility: 0.0967
Next Token : if, Posbility: 0.2051
Next Token : List, Posbility: 0.3379
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt else List
 score:False
Error type: noerr
---------------------------
Next Token : _, Posbility: 0.0000
Next Token : ([, Posbility: 0.0000
Next Token :  , Posbility: 0.0001
Next Token : (, Posbility: 0.0007
Next Token : ., Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt else List.
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : rev, Posbility: 0.0483
Next Token : sort, Posbility: 0.0623
Next Token : append, Posbility: 0.1494
Next Token : concat, Posbility: 0.2168
Next Token : cons, Posbility: 0.3574
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt else List.cons
 score:False
Error type: noerr
---------------------------
Next Token :  ((, Posbility: 0.0006
Next Token : 
, Posbility: 0.0009
Next Token :  [, Posbility: 0.0066
Next Token : (, Posbility: 0.0096
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt else List.cons 
 score:False
Error type: noerr
---------------------------
Next Token : List, Posbility: 0.0003
Next Token : gt, Posbility: 0.0008
Next Token : lt, Posbility: 0.0022
Next Token : (, Posbility: 0.1182
Next Token : pivot, Posbility: 0.8750
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt else List.cons pivot
 score:False
Error type: noerr
---------------------------
Next Token :   , Posbility: 0.0004
Next Token :  ~, Posbility: 0.0004
Next Token : 
, Posbility: 0.0015
Next Token :  [, Posbility: 0.0159
Next Token :  , Posbility: 0.9805
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt else List.cons pivot 
 score:False
Error type: noerr
---------------------------
Next Token : ::, Posbility: 0.0008
Next Token : lst, Posbility: 0.0008
Next Token : gt, Posbility: 0.0080
Next Token : lt, Posbility: 0.2656
Next Token : (, Posbility: 0.7188
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt else List.cons pivot (
 score:False
Error type: Syntaxerr.Expecting_continue
---------------------------
Next Token :  , Posbility: 0.0089
Next Token : List, Posbility: 0.0354
Next Token : gt, Posbility: 0.1089
Next Token : quick, Posbility: 0.3359
Next Token : lt, Posbility: 0.4883
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt else List.cons pivot (lt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token :  ++, Posbility: 0.0081
Next Token : ,, Posbility: 0.0134
Next Token :  +, Posbility: 0.0413
Next Token : ::, Posbility: 0.0874
Next Token :  , Posbility: 0.8281
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt else List.cons pivot (lt 
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : @@, Posbility: 0.0004
Next Token : >, Posbility: 0.0016
Next Token : ^, Posbility: 0.0198
Next Token : :, Posbility: 0.0253
Next Token : ::, Posbility: 0.9492
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt else List.cons pivot (lt ::
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token :   , Posbility: 0.0002
Next Token : ^, Posbility: 0.0003
Next Token :  [, Posbility: 0.0004
Next Token : >, Posbility: 0.0041
Next Token :  , Posbility: 0.9922
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt else List.cons pivot (lt :: 
 score:False
Error type: Syntaxerr.Other_continue
---------------------------
Next Token : >, Posbility: 0.0000
Next Token : List, Posbility: 0.0003
Next Token : (, Posbility: 0.0003
Next Token : lt, Posbility: 0.0003
Next Token : gt, Posbility: 1.0000
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt else List.cons pivot (lt :: gt
 score:False
Error type: Syntaxerr.Unclosed_continue
---------------------------
Next Token : ));, Posbility: 0.0022
Next Token : ))), Posbility: 0.0037
Next Token : );, Posbility: 0.0101
Next Token : )), Posbility: 0.0742
Next Token : ), Posbility: 0.9062
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt else List.cons pivot (lt :: gt)
 score:False
Error type: noerr
---------------------------
Next Token : , Posbility: 0.0009
Next Token :  |, Posbility: 0.0037
Next Token :  , Posbility: 0.0070
Next Token : 
, Posbility: 0.4297
Next Token : 

, Posbility: 0.5547
---------------------------
code:
 (* Write a function to sort a list of elements. *)
let rec quicksort lst =
  if lst = [] then lst
  else
    let pivot = lst[0] in
    let lt = List.filter (fun x -> x < pivot) lst in
    let gt = List.filter (fun x -> x > pivot) lst in
    let lt = quicksort lt in
    let gt = quicksort gt in
    if lt = [] then gt else if gt = [] then lt else List.cons pivot (lt :: gt)


 score:True
Error type: noerr
---------------------------
<<<<<<<<<<<<< FINISH >>>>>>>>>>>>



----------END and No Syntax Error--------

processing time : :62.334749698638916

<<<<<<<<<<<<< End : In Time >>>>>>>>>>>>